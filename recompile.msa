/**
 * Overrides CommandHelper's recompile command to:
 * - Change default flags to -gfrx (use -g to clear globals)
 * - Prevent recompile if certain scripts like games are running (use -f to force recompile)
 * - Temporarily store some globals if they're cleared (use -p to also clear protected globals)
 * - Clear orphan scoreboards and boss bars
 * - Prints time to reload, compile and execute (use -s to silence this broadcast)
 * - Broadcasts optional recompile reason text
 */
/recompile [$args] [$] = >>>
	@clearGlobal = false; # -g clear all but protected exported global vars
	@clearProtected = false; # -p clear protected global vars
	@force = false; # -f force recompile even if games are running
	@silent = false;
	@message = '';
	if($args) {
		if($args[0] === '-') {
			foreach(@i in range(1, length($args))) {
				switch($args[@i]) {
					case 'g':
						@clearGlobal = true;
					case 'p':
						@clearProtected = true;
					case 'f':
						@force = true;
					case 's':
						@silent = true;
				}
			}
		} else {
			@message = $args.' ';
		}
	}
	if($) {
		@message .= $;
	}

	# check if a game is running before recompiling
	@activities = _get_activities_string();
	if(@activities) {
		msg(color('gold').'Currently in progress: '.@activities);
		if(!@force) {
			die(color('red').'Halted recompile due to games in progress.');
		} else {
			foreach(@id: @activity in import('activities')) {
				export(@id, null);
			}
		}
	}

	# if forcing a recompile, clear scoreboards and boss bars
	if(@force) {
		foreach(@scoreboard in get_scoreboards()) {
			if(@scoreboard !== 'main') {
				remove_scoreboard(@scoreboard);
			}
		}
		foreach(@bar in get_bars()) {
			remove_bar(@bar);
		}
	}

	# If we're clearing global variables, let's store and restore some
	if(@clearGlobal && !@clearProtected) {
		@requests = import('requests');
		if(is_array(@requests)) {
			store_value('session.requests', @requests);
		}

		@conv = import('conv');
		if(is_array(@conv)) {
			store_value('session.conv', @conv);
		}

		@ignorelist = import('ignorelist');
		if(is_array(@ignorelist)) {
			store_value('session.ignorelist', @ignorelist);
		}

		@timers = import('timers');
		if(is_array(@timers)) {
			store_value('session.timers', @timers);
		}
	} else {
		export('recompile', true);
	}

	@start = time();
	run('/recompile -rfx'.if(!@clearGlobal, 'g'));
	@stop = time();
	if(!@silent) {
		broadcast(color('yellow').'Recompiled scripts!'.if(@message, ' "'.@message.'"').' ('.round((@stop - @start) / 1000, 2).'s)');
	}
	export('recompile', null);
<<<
