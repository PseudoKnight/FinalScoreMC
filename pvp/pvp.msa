*:/pvp [$action] [$id] [$team] = >>>
	switch($action) {
	case 'join':
		@id = to_lower($id)
		@pvp = import('pvp'.@id)
		@arena = get_value('arena.'.@id)
		if(!@arena, die('Can\'t find that arena.'))
		if(!@pvp) {
			@pvp = array('players': array(), 'running': 'false', 'cooldown': 0)
			@pvp['players'][player()] = array()
		} else {
			if(array_index_exists(@pvp['players'], player()), die('You already joined.'))
			if(@pvp['running'] == 'true' && 
			(array_index_exists(@pvp['arena'], 'lives')
			|| (array_index_exists(@arena, 'max') && array_size(@pvp['players']) >= @arena['max']))) {
				die('Match already in progress.')
			}
			@pvp['players'][player()] = array()
		}
		foreach(@player in array_keys(@pvp['players'])) {
			if(!ponline(@player)) {
				array_remove(@pvp['players'], @player)
			}
		}
		if(array_index_exists(@arena, 'mode') && array_contains(array('ctf', 'tdm', 'infection'), @arena['mode'])) {
			if(!array_index_exists(@pvp, 'team'), @pvp['team'] = array(array('players': array()), array('players': array())))
			if(!array_index_exists(@arena, 'teamratio')) {
				@arena['teamratio'] = array(1, 1)
			}
			if(array_size(@pvp['team'][0]['players']) * @arena['teamratio'][1] <= array_size(@pvp['team'][1]['players']) * @arena['teamratio'][0]) {
				@pvp['players'][player()]['team'] = 0
				if(!array_contains(@pvp['team'][0]['players'], player())) {
					array_push(@pvp['team'][0]['players'], player())
				}
				array_remove_values(@pvp['team'][1]['players'], player())
			} else {
				@pvp['players'][player()]['team'] = 1
				if(!array_contains(@pvp['team'][1]['players'], player())) {
					array_push(@pvp['team'][1]['players'], player())
				}
				array_remove_values(@pvp['team'][0]['players'], player())
			}
		}
		_worldmsg('custom', color('gray').'[PVP] '.color('r').player().' has joined '.to_upper(if(array_index_exists(@arena, 'parent'), @arena['parent'].': ').@id).'. ('.array_size(@pvp['players']).')')
		console(player().' joined '.@id)
		export('pvp'.@id, @pvp)
		if(@pvp['running'] == 'true') {
			include('includes.library/match.ms')
			if(array_index_exists(@pvp['arena'], 'classes')) {
				include('includes.library/class.ms')			
			}
			_pvp_initialize_players(@id, array(player()))
		} else if(array_index_exists(@arena, 'max') && array_size(@pvp['players']) >= @arena['max']) {
			call_alias('/pvp start '.@id)
		}
		
	case 'debug':
		@id = to_lower($id)
		@pvp = import('pvp'.@id)
		foreach(@pvp, @key, @value) {
			msg(@key.': '.color('gray').@value)
		}

	case 'spectate':
		if(array_contains(get_scoreboards(), $id)) {
			set_pscoreboard(player(), $id)
		} else {
			msg('The arena isn\'t running.')
		}
		
	case 'addtime':
		if(!get_command_block() && !has_permission('group.moderators'), die())
		if(!$id, die())
		@id = to_lower($id)
		@pvp = import('pvp'.@id)
		@pvp['arena']['timer'][1] += $team
		export('pvp'.@id, @pvp)
		_regionmsg(@pvp['arena']['broadcast'], 'Added '.$team.' more minutes.')
		
	case 'removetime':
		if(!has_permission('group.moderators'), die())
		if(!$id, die())
		@id = to_lower($id)
		@pvp = import('pvp'.@id)
		array_remove(@pvp['arena'], 'timer')
		foreach(@p in @pvp['players']) {
			if(phas_bar(@p)) {
				premove_bar(@p)
			}
		}
		export('pvp'.@id, @pvp)
		
	case 'start':
		if(!$id, die('You must specify an arena to start. Usage: /pvp start arenaname'))
		@id = to_lower($id)
		@pvp = import('pvp'.@id)
		if(!@pvp, die('There is no match to start.'))
		if(@pvp['running'] == 'true', die('Match already in progress.'))
		
		@pvp['arena'] = get_value('arena.'.@id)
		if(!@pvp['arena'], die('Can\'t find that arena.'))

		if(array_index_exists(@pvp['arena'], 'parent')) {
			@parent = get_value('arena.'.@pvp['arena']['parent'])
			if(!@parent, die('Can\'t find parent arena.'))
			@name = to_upper(@pvp['arena']['parent'].': '.@id)
			@pvp['arena'] = array_merge(@parent, @pvp['arena'])
		} else if(array_index_exists(@pvp['arena'], 'arenaselect')) {
			@childid = array_rand(@pvp['arena']['arenaselect']['arenas'], 1, false)[0]
			@child = get_value('arena', @childid)
			if(!@child, die('Can\'t find child arena.'))
			@name = to_upper(@id.': '.@childid)
			@pvp['arena'] = array_merge(@pvp['arena'], @child)	
		} else {
			@name = to_upper(@id)
		}
		
		if(array_index_exists(@pvp['arena'], 'sharedarenas')) {
			foreach(@pvp['arena']['sharedarenas'], @arenaid) {
				@otherpvp = import('pvp'.@arenaid)
				if(@otherpvp && @otherpvp['running'] == 'true') {
					die('Another PVP match is running in that region.')
				}
			}
		}
		
		if(player() == '~console' || pworld() != 'custom', die('You can only run this in Frog Park.'))

		# CHECK ARENA SETTINGS
		if(!array_index_exists(@pvp['arena'], 'lobby'), die('No lobby defined for arena.'))
		if(!array_index_exists(@pvp['arena'], 'region'), die('No region defined for arena.'))
		if(!array_index_exists(@pvp['arena'], 'spawn'), die('No spawns defined for arena.'))
		if(!array_index_exists(@pvp['arena'], 'min'), @pvp['arena']['min'] = 2)
		if(!array_index_exists(@pvp['arena'], 'broadcast'), @pvp['arena']['broadcast'] = @pvp['arena']['region'])
		if(!array_index_exists(@pvp['arena'], 'mode'), @pvp['arena']['mode'] = 'dm')
		if(!array_index_exists(@pvp['arena'], 'ff'), @pvp['arena']['ff'] = true)
		if(!array_index_exists(@pvp['arena'], 'flags'), @pvp['arena']['flags'] = array())
		if(!array_index_exists(@pvp['arena'], 'stats'), @pvp['arena']['stats'] = true)
		if(!array_index_exists(@pvp['arena'], 'delay')) {
			if(array_index_exists(@pvp['arena'], 'classes')) {
				@pvp['arena']['delay'] = 15
			} else {
				@pvp['arena']['delay'] = 3
			}
		}
		if(array_contains(@pvp['arena']['flags'], 'keepinventory'), @pvp['arena']['denydrop'] = 'all')
		if(!array_index_exists(@pvp['arena'], 'team') && array_contains(array('ctf', 'tdm', 'infection'), @pvp['arena']['mode'])) {
			@pvp['arena']['team'] = array(
				array('name': 'Red', 'color': 'c'), 
				array('name': 'Blue', 'color': '3')
			)
		}
		if(!array_index_exists(@pvp['arena'], 'score')) {
			switch(@pvp['arena']['mode']) {
				case 'ctf':
					@pvp['arena']['score'] = 5
				case 'koth':
					@pvp['arena']['score'] = 60
			}
		}
		
		if(array_contains(@pvp['arena']['flags'], 'debug') && !array_contains(pgroup(), 'builders'), die('This arena is still in testing and can only be started by Builders.'))
		
		foreach(array_keys(@pvp['players']), @player) {
			if(!ponline(@player) || pworld(@player) != 'custom') {
				array_remove(@pvp['players'], @player)
			}
		}
		if(array_size(@pvp['players']) < @pvp['arena']['min'], die('There aren\'t enough players. ('.array_size(@pvp['players']).')'))
		if((@pvp['cooldown'] + 15000) > time() && !array_contains(pgroup(), 'builders')) {
			die('Arena still on a 15 second cooldown.')
		}
		
		if(array_contains(get_scoreboards(), @id), remove_scoreboard(@id))
		create_scoreboard(@id)
		
		# PREPARE TEAMS
		if(array_contains(array('tdm', 'ctf', 'infection'), @pvp['arena']['mode'])) {
			if(@pvp['arena']['mode'] == 'ctf') {
				@pvp['team'][0]['score'] = 0
				@pvp['team'][0]['flag'] = 0
				@pvp['team'][1]['score'] = 0
				@pvp['team'][1]['flag'] = 0
			}
			if(array_index_exists(@pvp['arena'], 'captain')) {
				@pvp['team'][0]['hatentity'] = 0
				@pvp['team'][1]['hatentity'] = 0
				@pvp['team'][0]['captain'] = ''
				@pvp['team'][1]['captain'] = ''
			}
			create_team(@pvp['arena']['team'][0]['name'], @id)
			create_team(@pvp['arena']['team'][1]['name'], @id)
			set_team_display(@pvp['arena']['team'][0]['name'], array('prefix': color(@pvp['arena']['team'][0]['color'])), @id)
			set_team_display(@pvp['arena']['team'][1]['name'], array('prefix': color(@pvp['arena']['team'][1]['color'])), @id)
			set_team_options(@pvp['arena']['team'][0]['name'], array('friendlyinvisibles': true), @id)
			set_team_options(@pvp['arena']['team'][1]['name'], array('friendlyinvisibles': true), @id)
		}

		switch(@pvp['arena']['mode']) {
		case 'koth':
			create_objective('seconds', 'DUMMY', @id)
			set_objective_display('seconds', array('displayname': color('a').'Seconds Left', 'slot': 'SIDEBAR'), @id)
		case 'tdm':
		case 'dm':
		case 'infection':
			if(array_index_exists(@pvp['arena'], 'lives')) {
				create_objective('lives', 'DUMMY', @id)
				if(@pvp['arena']['lives'] > 1) {
					set_objective_display('lives', array('displayname': color('a').'Lives Left', 'slot': 'SIDEBAR'), @id)
				}
			}
		case 'ctf':
			create_objective('captures', 'DUMMY', @id)
			set_objective_display('captures', array('displayname': color('a').'Captures ('.@pvp['arena']['score'].')', 'slot': 'SIDEBAR'), @id)
			team_add_player(@pvp['arena']['team'][0]['name'], @pvp['arena']['team'][0]['name'], @id)
			set_pscore('captures', @pvp['arena']['team'][0]['name'], 0, @id)
			team_add_player(@pvp['arena']['team'][1]['name'], @pvp['arena']['team'][1]['name'], @id)
			set_pscore('captures', @pvp['arena']['team'][1]['name'], 0, @id)
		}
		
		if(array_index_exists(@pvp['arena'], 'captain')) {
			@pvp['team'][0]['captainhat'] = @pvp['arena']['classes'][@pvp['arena']['captain'][0]]['kit'][103]
			@pvp['team'][1]['captainhat'] = @pvp['arena']['classes'][@pvp['arena']['captain'][1]]['kit'][103]
		}

		foreach(array_keys(@pvp['players']), @player) {
			if(pmode(@player) == 'CREATIVE', set_pmode(@player, 'SURVIVAL'))
		}

		@pvp['coins'] = array_size(@pvp['players']) - 2
		@pvp['stats'] = associative_array()
		@pvp['binds'] = array()
		@pvp['running'] = 'true'
		
		# CLASSES
		if(array_index_exists(@pvp['arena'], 'classes')) {
			include('includes.library/class.ms')
			_class_select(@id, @pvp)
		
			#ANNOUNCE
			_worldmsg('custom', color('gray').'[PVP] '.color('r')
				.'Starting '.@name.' when ready or '.@pvp['arena']['delay'].' seconds...')
		
		} else {
			_worldmsg('custom', color('gray').'[PVP] '.color('r')
				.'Starting '.@name.' in '.@pvp['arena']['delay'].' seconds...')
		
		}

		if(array_contains(array('tdm', 'ctf', 'infection'), @pvp['arena']['mode'])) {
			_worldmsg('custom', 
			color(@pvp['arena']['team'][0]['color']).'['.@pvp['arena']['team'][0]['name'].'] '.array_implode(@pvp['team'][0]['players'], ' ').'\n'.color('r').color(@pvp['arena']['team'][1]['color']).'['.@pvp['arena']['team'][1]['name'].'] '.array_implode(@pvp['team'][1]['players'], ' '))
		} else {
			_worldmsg('custom', array_implode(array_keys(@pvp['players']), ' vs '))
		}
		
		export('pvp'.@id, @pvp)
		play_sound(@pvp['arena']['lobby'], array('sound': 'WITHER_SPAWN', 'pitch': 1.5, 'volume': 3))
		
		#START ROUND
		@starttime = time()
		set_interval(1000, closure(){
			if(time() < @starttime + (@pvp['arena']['delay'] * 1000)) {
				if(array_index_exists(@pvp['arena'], 'classes')) {
					foreach(@p in array_keys(@pvp['players'])) {
						if(ponline(@p) && !is_null(pget_virtualchest(@p))) {
							die()
						}
					}
				} else {
					die()
				}
			}
			clear_task()
			include('includes.library/match.ms')
			_pvp_start_match(@id)
		})
		
	case 'end':
		if(!get_command_block() && !has_permission('group.builders'), die(color('red').'You do not have permission.'))
		if(!$id || !$team, die(color('gold').'Usage: /pvp end arenaName winningTeam#'))
		@id = to_lower($id)
		@pvp = import('pvp'.@id)
		if(!@pvp || !@pvp['running'], die(color('red').'Not running.'))
		include('includes.library/match.ms')
		if(array_index_exists(@pvp['arena'], 'classes')) {
			include('includes.library/class.ms')			
		}
		_pvp_end_match(@id, @pvp['team'][$team - 1]['players'])
		
	default:
		msg('/pvp join <id> '.color('gray').'Join the match')
		msg('/pvp start <id> '.color('gray').'Start the match')
		msg('/pvp end <id> <team> '.color('gray').'End in favor of team')
		msg('/pvp spectate <id> '.color('gray').'Displays the scoreboard')
	}
<<<	