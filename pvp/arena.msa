*:/arena [$action] [$id] [$setting] [$] = >>>
	if($, @args = parse_args($), @args = array())
	array_resize(@args, 4)
	switch($action) {
	case 'update': 
		if(!has_permission('group.administrators'), die('You do not have permission.'))
		@arenas = get_values('arena')
		foreach(@key: @arena in @arenas) {
			if(array_index_exists(@arena, 'classes')) {
				foreach(@classname: @class in @arena['classes']) {
					if(array_index_exists(@class, 'team') && @class['team'] == 2) {
						array_remove(@arena['classes'][@classname], 'team')
					}
				}
				store_value(@key, @arena)
			}
		}
		msg('All arenas updated.')

	case 'set':
		if(!has_permission('group.builders'), die('You do not have permission.'))
		
		if(!$id || !$setting) {
		
			msg('SETTING **required '.color('gray').'Description [usage] (defaults)')
			msg('lobby ** '.color('gray').'Sets the lobby warp point')
			msg('spawn ** '.color('gray').'Adds a spawn point')
			msg('region ** '.color('gray').'The combat region name')
			msg('parent '.color('gray').'The parent arena configuration.')
			msg('arenaselect '.color('gray').'Type of select and then a comma list of arenas.')
			msg('sharedarenas '.color('gray').'A comma separated list of arena ids.')
			msg('broadcast '.color('gray').'The region all messages are broadcasted.')
			msg('mode '.color('gray').'dm, tdm, ctf, infection, koth.')
			msg('ctfflag '.color('gray').'The flag spawn location for CTF (1 is red, 2 is blue)')
			msg('kothregion '.color('gray').'The king of the hill region - feet position')
			msg('lives '.color('gray').'Number of lives until elimination')
			msg('score '.color('gray').'The target score to win. (ctf: 5, koth: 60)')
			msg('mobprotect '.color('gray').'Team protects mob [team type].')
			msg('teamratio '.color('gray').'The ratio of players for team 1 and 2.')
			msg('team '.color('gray').'Team info - [&4Team1 &cTeam2]')
			msg('kit '.color('gray').'Sets the respawn kits - accepts team # as value')
			msg('classes '.color('gray').'Available classes [team1list team2list]')
			msg('captain '.color('gray').'The captain class for each team')
			msg('respawntime '.color('gray').'The respawn time in seconds')
			msg('restore '.color('gray').'A list of schematics to restore.')
			msg('time '.color('gray').'The starting time')
			msg('ff '.color('gray').'Sets team friendly-fire (true)')
			msg('itemspawn '.color('gray').'Set item drop. (60 sec, no spawn @ start)')
			msg('chestspawn '.color('gray').'Set chest spawn (60 sec, no spawn @ start)')
			msg('mobspawn '.color('gray').'Spawn mob @ loc [type qty respawnTime onStart]')
			msg('rsoutput '.color('gray').'The lever that turns on at start and off at end.')
			msg('rsoutputscore '.color('gray').'Redstone torch appears when a team scores')
			msg('min '.color('gray').'The minimum # of players to start a match. (2)')
			msg('max '.color('gray').'Start the match as soon as this number of players join.')
			msg('effect '.color('gray').'The starting potion effect for all or team.')
			msg('denydrop '.color('gray').'Comma list of IDs not dropped on death or "all"')
			msg('delay '.color('gray').'Delay before game starts after command (3)')
			msg('timer '.color('gray').'Time in minutes till team # wins.')
			msg('weapons '.color('gray').'Comma list of special weapons to enable')
			msg('flags '.color('gray').'Special game behavior modifiers')
			
			die('MORE INFORMATION AT:\n'
			.' http://finalscoremc.com/arena-configuration/')
			
		}
		
		if(reg_count('^[a-z0-9]+$', $id) < 1, die('You can only use lowercase alphanumeric characters for the arena ID'))
		@arena = get_value('arena.'.$id)
		if(!@arena, @arena = array())
		switch($setting) {

			case 'lobby':
				if(pworld() != 'custom', die('You can only set spawns in the custom world.'))
				@arena['lobby'] = array(round(ploc()[0], 1), ploc()[1], round(ploc()[2], 1), ploc()[3])
				msg('Set lobby spawn to current location.')

			case 'spawn':
				if(pworld() != 'custom', die('You can only set spawns in the custom world.'))
				if(!array_index_exists(@arena, 'spawn'), @arena['spawn'] = array(array(), array()))
				if(@args[0] == '1' || @args[0] == '2') {
					array_push(@arena['spawn'][@args[0] - 1], array(round(ploc()[0], 1), round(ploc()[1], 1), round(ploc()[2], 1), ploc()[3]))
					msg('Set a spawn point to current location for team '.color(10).@args[0])
				} else {
					array_push(@arena['spawn'][0], array(round(ploc()[0], 1), ploc()[1], round(ploc()[2], 1), ploc()[3]))
					msg('Set a spawn point to current location.')
				}
		
			case 'parent':
				@arena['parent'] = @args[0]
				msg('Set parent arena to '.color(10).@args[0])
				
			case 'arenaselect':
				if(array_size(@args) < 2) {
					die('Requires an arena select type (eg. random) and then a comma separated list of child arenas.')
				}
				@arena['arenaselect'] = array('type': @args[0], 'arenas': split(',', @args[1]))
				msg('Set parent arena to select by '.@args[0].' from the following child arenas: '.@arena['arenaselect']['arenas'])
			
			case 'sharedarenas':
				@arena['sharedarenas'] = split(',', @args[0])
				msg('Set shared arenas to '.@arena['sharedarenas'])
				
			case 'spawnblock':
				@block = get_block_at(pcursor())
				@arena['spawnblock'][if(array_size(@args) == 1, @args[0], 0)] = @block
				msg('Set spawnblock to '.color(10).@block.if(array_size(@args) == 1, color('r').' for team '.color(10).@args[0]))

			case 'region':
				if(!@args[0], die('This requires a region name for the combat zone.'))
				@arena['region'] = @args[0]
				msg('Combat region set to '.color(10).@args[0])

			case 'broadcast':
				if(!@args[0], die('This requires a region name for the chat broadcast zone.'))
				@arena['broadcast'] = @args[0]
				msg('Broadcast region set to '.color(10).@args[0])

			case 'kothregion':
				if(!@args[0], die('This requires a region name for the king of the hill zone.'))
				@arena['kothregion'] = @args[0]
				msg('King of the Hill region set to '.color(10).@args[0])

			case 'mode':
				if(!@args[0] || !array_contains_ic(array('dm', 'tdm', 'ctf', 'koth', 'infection'), @args[0]), die('Available modes: dm (default deathmatch), tdm (team deathmatch), ctf (capture the flag), koth (king of the hill), infection.'))
				@arena['mode'] = to_lower(@args[0])
				msg('Set arena game mode to '.color(10).@args[0])

			case 'ctfflag':
				if(!@args[0], die('This requires a team #.'))
				@team = @args[0] - 1
				@arena['ctfflag'][@team] = array(round(ploc()[0], 1), round(ploc()[1], 1) + 1, round(ploc()[2], 1), ploc()[3])
				msg('Set flag for team '.color(10).@args[0].color('r').' to this location.')

			case 'lives':
				if(!@args[0], die('This setting requires an integer.'))
				@arena['lives'] = @args[0]
				msg('Set lives to '.color(10).@args[0])

			case 'score':
				if(!@args[0], die('This setting requires an integer.'))
				@arena['score'] = @args[0]
				msg('Set score target to '.color(10).@args[0])
				
			case 'mobprotect':
				if(!@args[1], die('Requires a team # and mob type.'))
				if(!array_index_exists(@arena, 'mobprotect'), @arena['mobprotect'] = array())
				@loc = ploc()
				@Loc = array(floor(@loc[0]) + 0.5, @loc[1], floor(@loc[2]) + 0.5, @loc[3])
				@arena['mobprotect'][@args[0] - 1] = array(
					'loc': @loc,
					'type': @args[1]
				)
				msg('Set '.color(10).@args[1].color('r').' to spawn at start for team '.color(10).@args[0])

			case 'teamratio':
				if(array_size(@args) < 2, die('Needs two integers, for team 1 and team 2.'))
				@arena['teamratio'] = array(@args[0], @args[1])
				msg('Set team ratio to '.color(10).@args[0].':'.@args[1])

			case 'team':
				if(!@args[0] || !@args[1], die('Usage: /arena set <arena> team &4Team1 &cTeam2'))
				if(@args[2], die('Too many arguments. Usage: /arena set <arena> team &4Team1 &cTeam2'))
				@arena['team'][0]['name'] = substr(@args[0], 2)
				@arena['team'][0]['color'] = @args[0][1]
				@arena['team'][1]['name'] = substr(@args[1], 2)
				@arena['team'][1]['color'] = @args[1][1]
				if(length(@arena['team'][0]['name']) > 16 
				|| length(@arena['team'][1]['name']) > 16, die('Name too long. (16 character limit)'))
				msg('Set team names to '.colorize(@args[0]).' vs '.colorize(@args[1]))

			case 'kit':
				if(!array_index_exists(@arena, 'kit'), @arena['kit'] = array(array(), array()))
				@inv = pinv()
				foreach(array_keys(@inv), @slot) {
					if(@inv[@slot] == null) {
						array_remove(@inv, @slot)
					}
				}
				if(!@args[0] || @args[0] == 1) {
					@arena['kit'][0] = @inv
					msg('Set kit to current inventory.')
				} else if(@args[0] == 2) {
					@arena['kit'][1] = @inv
					msg('Set kit to current inventory.')
				} else {
					die('Only accepts values 1 or 2 for teams, or blank for when there are no teams.')
				}
			
			case 'captain':
				@arena['captain'][0] = @args[0]
				@arena['captain'][1] = @args[1]
				msg('Captain classes set to '.color(10).@args[0].color('r').' and '.color(10).@args[1])
				
			case 'respawntime':
				if(!is_numeric(@args[0]), die('Usage: /arena set <id> respawntime 10'))
				@arena['respawntime'] = @args[0]
				msg('Set respawn time to '.color(10).@args[0].color('r').' seconds.')

			case 'restore':
				if(!has_permission('group.engineers'), die('Only engineers, moderators and admins can do this.'))
				@regions = array()
				foreach(@args, @region) {
					if(@region != null) {
						array_push(@regions, @region)
					}
				}
				@arena['restore'] = @regions
				msg('Restore area set to '.color(10).@regions)

			case 'time':
				if(!@args[0], die('This a time value of 0 to 24000.'))
				@arena['time'] = @args[0]
				msg('Starting time set to '.color(10).@args[0])

			case 'min':
				if(!@args[0], die('This requires an integer for minimum players to start.'))
				@arena['min'] = @args[0]
				msg('Set minimum players to '.color(10).@args[0])

			case 'max':
				if(!@args[0], die('This requires an integer for maximum players before it starts automatically.'))
				@arena['max'] = @args[0]
				msg('Set maximum players to '.color(10).@args[0])

			case 'ff':
				if(!@args[0], die('This requires true or false.'))
				if(@args[0] == 'true') {
					try(array_remove(@arena, 'ff'), die('Already set to true by default.'))
					msg('Set friendly-fire '.color(10).'on'.color('r').'. (default)')
				} else if(@args[0] == 'false') {
					@arena['ff'] = false
					msg('Set friendly-fire '.color(10).'off'.color('r').'.')
				} else {
					die('Only accepts values: true or false (defaults to true)')
				}

			case 'itemspawn':
				if(!array_index_exists(@arena, 'itemspawn'), @arena['itemspawn'] = array())
				if(!@args[0] || is_numeric(@args[0])) {
					if(!@args[0], @cooldown = 60, @cooldown = @args[0])
					if(!@args[1], @start = true, @start = @args[1])
					array_push(@arena['itemspawn'], array(
						'start': @start,
						'cooldown': @cooldown,
						'loc': array(round(ploc()[0], 1), ploc()[1] + 1, round(ploc()[2], 1), ploc()[3]),
						'item': pinv(player(), null)
					))
					msg('Set current item to spawn here.')
				} else {
					die('The first value can only be an integer for the number of seconds in the cooldown (default: 30). The second can be true or false for if the item spawns at match start (default: true).')
				}

			case 'chestgroup':
				if(!array_index_exists(@arena, 'chestgroup'), @arena['chestgroup'] = associative_array())
				if(!@args[0], die('Arguments: <chestGroupName>'))
				@loc = pcursor()
				if(split(':', get_block_at(@loc))[0] != '54', die('You must look at a chest you want to spawn.'))
				if(!array_index_exists(@arena['chestgroup'], @args[0]), array_set(@arena['chestgroup'], @args[0], array()))
				foreach(@arena['chestgroup'][@args[0]], @key, @chestloc) {
					if(@chestloc == @loc) {
						array_remove(@arena['chestgroup'][@args[0]], @key)
						break()
					}
				}
				array_push(@arena['chestgroup'][@args[0]], @loc)
				msg('Added chest to '.color(10).@args[0].color('r').' group. The items in this chest will spawn in chestspawns that specify '.color(10).@args[0].color('r').' as their chestgroup. Do not remove this chest.')
				
			case 'chestspawn':
				if(!array_index_exists(@arena, 'chestspawn'), @arena['chestspawn'] = array())
				if(!@args[0], die('Arguments: <chestGroupName> | <cooldownSecs> <spawnStart>'))
				@loc = pcursor()
				if(split(':', get_block_at(@loc))[0] != '54', die('You must look at a chest.'))
				foreach(@arena['chestspawn'], @key, @chest) {
					if(@chest['loc'] == @loc) {
						array_remove(@arena['chestspawn'], @key)
						break()
					}
				}
				if(is_numeric(@args[0])) {
					if(!@args[1], @start = 'true', @start = @args[1])
					@items = array()
					for(@i = 0, @i < 27, @i++) {
						if(get_inventory_item(@loc, @i) == null, break())
						array_push(@items, get_inventory_item(@loc, @i))
					}
					array_push(@arena['chestspawn'], array(
						'start': @start,
						'cooldown': @args[0],
						'loc': @loc,
						'items': @items
					))
					msg('Set items in chest to respawn here.')
					set_block_at(@loc, '54:0')
				} else {
					array_push(@arena['chestspawn'], array(
						'loc': @loc,
						'group': @args[0]
					))
					msg('Set items in that chest group to spawn here at start.')
				}

			case 'rsoutput':
				@loc = pcursor()
				if(get_block_at(@loc) == '69:6' || get_block_at(@loc) == '69:5') {
					@arena['rsoutput'] = @loc
					msg('Set arena\'s start/end lever. It is recommended that you not use the block it\'s on to transmit power.')
				} else {
					die('You must be looking at a lever placed on top of a block.')
				}

			case 'rsoutputscore':
				if(!@args[0], die('This requires a team #.'))
				@team = @args[0] - 1
				@arena['rsoutputscore'][@team] = pcursor()
				msg('Set this block to turn into a redstone torch when team '.color(10).@args[0].color('r').' scores.')

			case 'effect':
				@effects = _get_effects()
				if(!array_contains(array_keys(@effects), @args[1]), die('Unknown potion effect. '.array_keys(@effects)))
				@effect = @effects[@args[1]]
				if(!array_index_exists(@arena, 'effect'), @arena['effect'] = array(associative_array(), associative_array(), associative_array()))
				if(@args[0] == 'all', @args[0] = 0)
				if(@args[2] == 0 || @args[3] == 0) {
					array_remove(@arena['effect'][@args[0]], @effect)
					if(array_size(@arena['effect'][0]) == 0
					&& array_size(@arena['effect'][1]) == 0
					&& array_size(@arena['effect'][2]) == 0) {
						array_remove(@arena, 'effect')
					}
					msg('Removed potion effect '.@args[1].'.')
				} else {
					@arena['effect'][@args[0]][@effect] = associative_array('strength': @args[2] - 1, 'length': @args[3])
					msg('Set '.color(10).@args[1].color('r').' with a strength of '.color(10).@args[2].color('r').' and a length of '.color(10).@args[3].color('r').' seconds for '.color(10).if(@args[0] != 0, 'team ').@args[0])
				}

			case 'denydrop':
				if(!@args[0] || @args[1], die('You need to specify a comma separated list of item IDs. (no spaces)'))
				if(to_lower(@args[0]) == 'all') {
					@arena['denydrop'] = 'all'
				} else {
					@arena['denydrop'] = split(',', @args[0])
				}
				msg('Set '.color(10).@args[0].color('r').' item IDs to not drop on player death.')

			case 'mobspawn':
				if(array_size(@args) < 4, die('Arguments: <type> <quantity> <respawnSecs> <spawnStart>'))
				if(!array_index_exists(@arena, 'mobspawn'), @arena['mobspawn'] = array())
				if(!_get_mob(@args[0]), die('Unknown mob type.'))
				if(!is_numeric(@args[1]), die('Qty must be a number.'))
				if(!is_numeric(@args[2]), die('Respawn time must be a number in seconds.'))
				array_push(@arena['mobspawn'], array(
					'loc': array(round(ploc()[0], 1), ploc()[1] + 1, round(ploc()[2], 1)),
					'type': @args[0],
					'qty': @args[1],
					'respawn': @args[2],
					'start': if(@args[3], 1, 0)
				))
				msg('Set '.color(10).@args[1].' '.@args[0].color('r').' to spawn here every '.color(10).@args[2].color('r').' seconds'.if(@args[3], ' and at '.color(10).'start.', '.'))

			case 'timer':
				if(!@args[0] || !@args[1] || !is_numeric(@args[0]) || !is_numeric(@args[1]), die('Requires a winning team # and time in minutes.'))
				@arena['timer'] = array(@args[0] - 1, @args[1])
				msg('Set timer for team '.@args[0].' to '.color(10).@args[1].color('r').' minutes.')
				
			case 'delay':
				if(!is_numeric(@args[0])) {
					die('Requires a number in seconds.')
				}
				@arena['delay'] = @args[0]
				msg('Set start delay to '.color(10).@args[0].color('r').' seconds.')
				
			case 'stats':
				if(@args[0] == 'true') {
					@arena['stats'] = true
					msg('Set arena to display stats at the end of the match.')
				} else {
					@arena['stats'] = false
					msg('Set arena to NOT display stats at the end of the match.')
				}
			
			case 'weapons':
				@weapons = array('endernades', 'skullrockets',  'shotgunballs', 'primedtnt', 'pistoltears', 'firefire', 'railgun', 'fireball', 'firebreath')
				if(!@args[0] || @args[1], die('You need to specify a comma separated list of pre-defined weapons. (no spaces) Current available weapons: '.@weapons))
				@arena['weapons'] = split(',', @args[0])
				foreach(@arena['weapons'], @weapon) {
					if(!array_contains(@weapons, @weapon), die('Unknown flag: '.@weapon))
				}
				msg('Activated these weapons: '.color(10).@arena['weapons'])
			
			case 'flags':
				@flags = array('noinventory', 'stackedpickup', 'debug', 'keepinventory', 'rallycall', 'build', 'infinitedispensers', 'effects', 'noxp')
				if(!@args[0] || @args[1], die('You need to specify a comma separated list of pre-defined flags. (no spaces) Current available flags: '.@flags))
				@arena['flags'] = split(',', @args[0])
				foreach(@arena['flags'], @flag) {
					if(!array_contains(@flags, @flag), die('Unknown flag: '.@flag))
				}
				msg('Activated these flags: '.color(10).@arena['flags'])

			default:
				die('This requires a valid setting. Type "/arena set" to see settings.')
		}
		store_value('arena.'.$id, @arena)

	case 'load':
		if((pworld() != 'custom' && pworld() != 'dev') || !has_permission('group.builders'), die('You do not have permission.'))
		if(!$id || !$setting) {
			die('Loads a setting where applicable. This currently only applies to kit and chestspawn. Chestspawn requires to you look at a chest at a previously defined chestspawn location.')
		}
		@arena = get_value('arena.'.$id)
		switch($setting) {
			case 'kit':
				_clear_pinv()
				if(@args[0]) {
					set_pinv(player(), @arena['kit'][@args[0] - 1])
				} else {
					set_pinv(player(), @arena['kit'][0])
				}
				die('After editing, you can save this kit by using "/arena set '.$id.' kit '.if(array_size(@args) > 0, @args[0]).'"')

			case 'chestspawn':
				@loc = array(round(pcursor()[0]), round(pcursor()[1]), round(pcursor()[2]), pcursor()[3])
				if(split(':', get_block_at(@loc))[0] != '54', die('This is not a chest'))
				foreach(@arena['chestspawn'], @chest) {
					if(@chest['loc'] == @loc) {
						if(array_index_exists(@chest, 'items')) {
							foreach(@chest['items'], @index, @item) {
								set_inventory_item(@loc, @index, @item)
							}
							die('After editing, you can save this chestspawn by using "/arena set '.$id.' chestspawn '.@chest['cooldown'].' '.@chest['start'].'"')
						} else {
							die('This chest spawns with items from the chestgroup '.@chest['chestgroup'])
						}
					}
				}
				die('No chestspawn found for that location.')

			default:
				die('Unsupported setting for loading.')
		}
	
	case 'rename':
		if(!has_permission('group.builders'), die('You do not have permission.'))
		if(!$id, die('This command renames one arena ID to another ID. Usage: /arena rename oldName newName'))
		if(!$setting, die('This command requires a new arena ID.'))
		if(reg_count('^[a-z0-9]+$', $id) < 1, die('You can only use lowercase alphanumeric characters for the arena ID'))
		@arena = get_value('arena.'.$id)
		if(!@arena, die('There is no defined arena by that name.'))
		store_value($setting, @arena)
		clear_value($id)
		msg('Renamed '.$id.' to '.$setting.'.')

	case 'delete':
		if(!has_permission('group.builders'), die('You do not have permission.'))
		if(!$id, die('Permanently deletes a setting\'s contents, or if no setting is provided, it will delete the whole arena.'))
		@arena = get_value('arena.'.$id)
		if(!@arena, die('There is no defined arena by that name.'))
		if($setting) {
			@loc = pcursor()
			if(split(':', get_block_at(@loc))[0] == '54'
			&& ($setting == 'chestspawn' || $setting == 'chestgroup')) {
				foreach(@arena[$setting], @key, @chest) {
					if(@chest['loc'][0] == @loc[0]
					&& @chest['loc'][1] == @loc[1]
					&& @chest['loc'][2] == @loc[2]) {
						set_block_at(@loc, 0)
						array_remove(@arena[$setting], @key)
						msg('Removed this '.$setting.' location.')
						break()
					}
				}
			} else {
				array_remove(@arena, $setting)
				msg('Deleted "'.$setting.'" setting for '.$id.'.')
			}
			store_value('arena.'.$id, @arena)
		} else {
			clear_value('arena.'.$id)
			msg('Deleted '.$id.' arena permanently.')
		}
		
	case 'info':
		if(!$id, die('Displays settings for specified arena. Certain settings [...] require that setting to be provided to get detailed information.'))
		@arena = get_value('arena.'.$id)
		if(!@arena, die('There is no defined arena by that name.'))
		msg(color('gray').'-------------------------------------')
		if($setting) {
			if(!array_index_exists(@arena, $setting), die('That setting is not defined for this arena.'))
			msg($setting.' '.color('gray').@arena[$setting])
		} else {
			msg(color('l').':: '.to_upper($id).' :: '.if(array_index_exists(@arena, 'team'),
				color(@arena['team'][0]['color']).@arena['team'][0]['name'].color('gray').' vs '.color(@arena['team'][1]['color']).@arena['team'][1]['name']))
			# always required settings
			if(!array_index_exists(@arena, 'lobby'), msg(color('red').'lobby '.color(7).'(required)'))
			if(!array_index_exists(@arena, 'spawn'), msg(color('red').'spawn '.color(7).'(required)'))
			if(!array_index_exists(@arena, 'region'), msg(color('red').'region '.color(7).'(required)'))
			# dependent settings
			if(array_index_exists(@arena, 'captain') && !array_index_exists(@arena, 'classes'), msg(color('gold').'classes '.color(7).'(required for setting "captain")'))
			if(array_index_exists(@arena, 'captain') && !array_index_exists(@arena, 'respawntime'), msg(color('gold').'respawntime '.color(7).'(required for setting "captain")'))
			if(array_index_exists(@arena, 'ctfflag') && !array_index_exists(@arena, 'mode'), msg(color('gold').'mode '.color(7).'("ctf" required for setting "ctfflag")'))
			if(array_index_exists(@arena, 'score') && !array_index_exists(@arena, 'mode'), msg(color('gold').'mode '.color(7).'("koth" or "ctf" required for setting "score")'))
			if(array_index_exists(@arena, 'kothregion') && !array_index_exists(@arena, 'mode'), msg(color('gold').'mode '.color(7).'("koth" required for setting "kothregion")'))
			if(array_index_exists(@arena, 'rsoutputscore') && !array_index_exists(@arena, 'mode'), msg(color('gold').'mode '.color(7).'("ctf" required for setting "rsoutputscore")'))
			if(array_index_exists(@arena, 'team') && !array_index_exists(@arena, 'mode'), msg(color('gold').'mode '.color(7).'(team mode required for "team")'))
			if(array_index_exists(@arena, 'teamratio') && !array_index_exists(@arena, 'mode'), msg(color('gold').'mode '.color(7).'(team mode required for "teamratio")'))
			# 
			foreach(@arena, @setting, @value) {
				if(array_contains(array('spawn', 'kit', 'itemspawn', 'chestspawn', 'mobspawn', 'classes'), @setting)) {
					msg(@setting.' '.color('gray').'[...]')
				} else if(array_contains(array('team'), @setting)) {
					continue()
				} else if(is_array(@value)) {
					msg(@setting.' '.color('gray').array_implode(@value, ', '))
                } else {
					msg(@setting.' '.color('gray').@value)
				}
			}
		}
		msg(color('gray').'-------------------------------------')
		
	case 'list':
		@arenas = get_values('arena')
		@list = ''
		foreach(array_keys(@arenas), @arena) {
			@list .= split('.', @arena)[1].' '
		}
		msg(color('gray').'PVP ARENAS: '.color('r').@list)

	default:
		msg('/arena set [id] [setting] [value(s)] '.color('gray').'Creates/overwrites settings')
		msg('/arena load <id> <setting> '.color('gray').'Loads kits & chestspawns')
		msg('/arena delete <id> [setting] '.color('gray').'Delete arenas, settings, or chests')
		msg('/arena rename <old-id> <new-id> '.color('gray').'Rename the arena.')
		msg('/arena info [id] [setting] '.color('gray').'View arenas and their settings')
		msg('/arena list '.color('gray').'List all arenas')
	}
<<<
