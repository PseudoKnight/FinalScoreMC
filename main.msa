*:/transfer = >>>
	msg('Transfers ownership of a mob to another online player.\n'
		.'Usage: /transfer <mob> <player>\n'
		.'Example: /transfer horse PseudoKnight');
<<<

*:/transfer $ = >>>
	@args = parse_args($);
	@player = '';
	@thing = '';
	foreach(@arg in @args) {
		if(ponline(@arg)) {
			@player = @arg;
		} else{
			switch(@arg) {
			case 'donkey':
				@thing = 'DONKEY';
			case 'horse':
				@thing = 'HORSE';
			case 'mule':
				@thing = 'MULE';
			case 'skeletonhorse':
				@thing = 'SKELETON_HORSE';
			case 'zombiehorse':
				@thing = 'ZOMBIE_HORSE';
			case 'wolf':
			case 'dog':
				@thing = 'WOLF';
			case 'cat':
			case 'kitten':
			case 'ocelot':
				@thing = 'OCELOT';
			}
		}
	}
	if(!@player) {
		die('Unknown player.');
	}
	if(!@thing) {
		die('Please specify "horse", "mule", "donkey", "zombiehorse", "skeletonhorse", "wolf", or "cat".');
	}
	bind(player_interact_entity, array('id': 'transfer'.player().@player), array('clicked': @thing), @e, @player, @owner = player()) {
		if(player() != @owner) {
			die();
		}
		cancel();
		unbind();
		if(get_mob_owner(@e['id']) != player() && !has_permission('group.moderator')) {
			die(color('red').'This '.entity_type(@e['id']).' belongs to '.get_mob_owner(@e['id']).'.');
		}
		tame_mob(@player, @e['id']);
		msg(color('green').'The '.entity_type(@e['id']).' now belongs to '.@player.'.');
		if(ponline(@player)) {
			tmsg(@player, color('green').player().' gave a '.entity_type(@e['id']).' to you.');
		}
	}
	msg(color('yellow').'Right-click the '.@thing.' you wish to give to '.@player.'.');
<<<

*:/share = >>>
	msg('Share horses with friends you trust.\n'
		.'Usage: /share horses <player>\n'
		.'Example: /share horses PseudoKnight');
<<<

*:/share $player $ = >>>
	@shareables = array('horses')
	@types = parse_args($)
	foreach(@type in @types) {
		if(!array_contains(@shareables, @type)) {
			die(color('red').'Unknown type: '.@type.'\nShareable: '.@shareables)
		}
	}
	@player = _find_player($player);
	export('share'.@player, array(
		'player': player(),
		'types': @types
	))
	msg(color('yellow').'Requested '.@player.' to share '.array_implode(@types, ' and ').'.')
	tmsg(@player, color('yellow').player().' requested to share '.array_implode(@types, ' and ').'. Type "/share confirm".')
<<<

*:/share confirm = >>>
	@share = import('share'.player())
	if(!@share, die('No shares to confirm.'))

	@pdata = _pdata(@share['player'])
	if(!array_index_exists(@pdata, 'shared'), @pdata['shared'] = associative_array())
	if(!array_index_exists(@pdata['shared'], player()), @pdata['shared'][player()] = array())
	foreach(@type in @share['types']) {
		array_push(@pdata['shared'][player()], @type)
	}
	_store_pdata(@share['player'], @pdata)
	tmsg(@share['player'], color('green').'Now sharing '.array_implode(@share['types'], ' and ').' with '.player().'.')

	@pdata = _pdata(player())
	if(!array_index_exists(@pdata, 'shared'), @pdata['shared'] = associative_array())
	if(!array_index_exists(@pdata['shared'], @share['player']), @pdata['shared'][@share['player']] = array())
	foreach(@type in @share['types']) {
		array_push(@pdata['shared'][@share['player']], @type)
	}
	_store_pdata(player(), @pdata)
	msg(color('green').'Now sharing '.array_implode(@share['types'], ' and ').' with '.@share['player'].'.')

	export('share'.player(), null)
<<<

*:/unshare = >>>
	msg('Undo previous shares.\n'
		.'Usage: /unshare horses <player>\n'
		.'Example: /unshare horses PseudoKnight');
<<<

*:/unshare $player $ = >>>
	@shareables = array('horses')
	@types = parse_args($)
	foreach(@type in @types) {
		if(!array_contains(@shareables, @type)) {
			die(color('red').'Unknown type: '.@type.'\nShareable: '.@shareables)
		}
	}
	try {
		@player = player($player);
	} catch(PlayerOfflineException @ex) {
		if(get_value('players', to_lower($player))) {
			@player = $player;
		} else {
			die('Unknown player.');
		}
	}

	@pdata = _pdata(player())
	if(!array_index_exists(@pdata, 'shared') || !array_index_exists(@pdata['shared'], @player)) {
		die(color('gold').'You are not sharing anything with this player.')
	}
	foreach(@type in @types) {
		if(!array_contains(@pdata['shared'][@player], @type)) {
			die(color('gold').'You are not sharing '.@type.' with '.@player)
		} else {
			array_remove_values(@pdata['shared'][@player], @type)
			if(array_size(@pdata['shared'][@player]) < 1) {
				array_remove(@pdata['shared'], @player)
				if(array_size(@pdata['shared']) < 1) {
					array_remove(@pdata, 'shared')
				}
			}
		}
	}
	_store_pdata(player(), @pdata)
	msg(color('green').'You are no longer sharing '.array_implode(@types, ' and ').' with '.@player.'.')

	@pdata = _pdata(@player)
	if(!array_index_exists(@pdata, 'shared') || !array_index_exists(@pdata['shared'], player())) {
		die(color('gold').'They are not sharing anything with you.')
	}
	foreach(@type in @types) {
		if(!array_contains(@pdata['shared'][player()], @type)) {
			die(color('gold').'They are not sharing '.@type.' with you.')
		} else {
			array_remove_values(@pdata['shared'][player()], @type)
			if(array_size(@pdata['shared'][player()]) < 1) {
				array_remove(@pdata['shared'], player())
				if(array_size(@pdata['shared']) < 1) {
					array_remove(@pdata, 'shared')
				}
			}
		}
	}
	_store_pdata(@player, @pdata)
	if(ponline(@player)) {
		tmsg(@player, color('green').player().' is no longer sharing '.array_implode(@types, ' and ').' with you.')
	}
<<<

*:/compass = >>>
	msg('Set your compass target to a specific location.\n'
		.'Available targets: here, spawn, home (yours or others), players, or coordinates.\n'
		.'Usage: /compass [here|spawn|home [player]|playerName|x z]\n'
		.'Example: /compass home PseudoKnight\n'
		.'Example: /compass -100 150');
<<<

*:/compass $target [$arg] = >>>
	switch($target) {
		case 'spawn':
			set_compass_target(get_spawn());
			msg('Compass is now pointing to '._worldname(pworld()).'\'s spawn.');

		case 'home':
			if($arg) {
				@pdata = _pdata($arg);
			} else {
				@pdata = _pdata(player());
			}
			if(!array_index_exists(@pdata, 'homes'), die('No home to target.'));
			if(!array_index_exists(@pdata['homes'], pworld()), die('No home in this world to target.'));
			set_compass_target(@pdata['homes'][pworld()]);
			msg('Compass is now pointing to '.if($arg, $arg.'\'s', 'your').' home.');

		case 'here':
			set_compass_target(ploc());
			msg('Compass is now pointing to this location.');

		default:
			try {
				@player = player($target);
				if(pworld(@player) != pworld(), die('Player is not in this world.'));
				set_compass_target(ploc(@player));
				msg('Compass is now pointing to '.@player.'\'s last location.');
			} catch(PlayerOfflineException @ex) {
				if(is_numeric($target) && is_numeric($arg)) {
					set_compass_target(array($target, 0, $arg, pworld()));
					msg('Compass is now pointing to x:'.$target.' z:'.$arg);
				}
			}
	}
<<<

#Runs the help procedure to list or display entries
*:/help [$selection='help'] = >>>
	@help = array(
		'rules':
			'- Do NOT break or take anything belonging to another player, unless otherwise specified.\n'.
			'- Do NOT harass, spam, or swear in chat.\n'.
			'- Do NOT actively use mods for the purpose of cheating.\n',
		'commands':
			'Get a list and description of useful commands at >>> http://finalscoremc.com/commands <<<',
		'homes':
			'You can have one home per world. Set them by typing "/sethome", then "/home" to teleport to them. '.
			'You can teleport to your homes on other worlds with "/home worldname", homes of other players with '.
			'"/home playername", or both wtih "/home worldname playername".',
		'privatemessages': 'messages',
		'messages':
			'Send a private message to another player with "/msg playername message" or "@playername message". '.
			'You can use "/r <message>" for a reply.',
		'spawns':
			'There is one central spawn on each world, including nethers. Type "/spawn" to teleport to the spawn of '.
			'the world you are in or follow it with a world name to teleport there.',
		'portal': 'startgates',
		'gates': 'stargates',
		'stargates':
			'Stargates are special portals you build to teleport within a network of locations. There is a more '.
			'detailed guide on the website. But to make one, first build the gate as seen (without sign or button), '.
			'place a sign on the correct location, then type the gate name on line one and the gate network name on '.
			'line three.',
		'privatechests': 'privatesigns',
		'privatedoors': 'privatesigns',
		'private': 'privatesigns',
		'privatesigns':
			'You can put a [private] sign on a chest, furnace, and the block above/below doors. The following lines '.
			'after [private] should contain the players you want to give access. Optionally "[Everyone]" provides '.
			'access to everyone, and "[Timer:4]" will close a door 4 seconds after it was opened.',
		'shops':
			'Chest shops allow players to buy and sell different items using currency. (g: gold, d: diamond, i: iron, '.
			'e: emerald) Right click the SIGN with the currency in hand to BUY. Shop owners can edit shop '.
			'rates with the "/shop edit <transaction line>" command. Players can search for available items with '.
			'"/shop list <item>". There\'s a detailed guide on the website.',
		'website':
			'The website is at >>> http://finalscoremc.com <<< There you can find a command reference, guides, '.
			'videos, live maps, and more.',
		'map': 'livemap',
		'livemap':
			'>>> http://mc.finalscoremc.com:25966 <<< The website has a handy live map that shows the '.
			'location of players and their homes, among other things.',
		'staff':
			'You can get help from anyone with a blue name. Orange players are Frog Park staff and can help there.',
		'owner':
			'Scottyd_Utah currently owns the domain name and Minecraft server hosting. PseudoKnight owns the '.
			'custom software, provides the website, and primarily runs the server.',
		'plugins':
			'Type "/plugins" for a full list of plugins installed. Most server functionality is written in '.
			'MethodScript using the CommandHelper plugin. You can find those scripts at '.
			'http://github.com/PseudoKnight/FinalScoreMC',
		'groups': 'permissions',
		'ranks': 'permissions',
		'permissions':
			'We currently have 8 permission groups: '.
			'default (white names; new un-added players), '.
			'member (yellow names; most players are in this group; minor restrictions), '.
			'regular (like member, but long time or otherwise trusted players), '.
			'donor (green names or diamonds; minor cosmetic bonuses), '.
			'builder (orange names; Frog Park staff; builds things for the park), '.
			'engineer (like builder, but with protected region override), '.
			'moderator (blue names; server staff), '.
			'and admin (like moderator, but has access to everything; aka op).',
		'mumble': 'voice',
		'discord': 'voice',
		'voice':
			'Everyone is welcome to use our voice chat servers. Our mumble server is at mum.finalscoremc.com '.
			'with port 64758. You can get Mumble @ \n>>> http://mumble.sourceforge.net <<<\n Also, we have a Discord '.
			'server @ \n>>> https://discordapp.com/invite/0aBtE3n1P6GixDwO <<<',
		'worldguard': 'regions',
		'regions':
			'Regions are protected zones where only owners and members can build or access chests. You can create '.
			'your own region by using a golden axe (or commands), left and right clicking to select a cuboid for '.
			'the region, then use "/rg claim <regionid>". More details are on the website.',
		'whitelist':
			'You can get on the whitelist by asking a staff member, or a friend who is a regular can do it using the '.
			'"/approve playername" command.',
		'survival': 'worlds',
		'worlds':
			'There are four primary worlds: Alpha (Plaza at spawn), Delta (Final City at spawn), Gamma (Gamma City '.
			'at spawn), and Omega. In addition, there are four respective nether dimensions and one End dimension. '.
			'You can type "/mv who" to see which worlds players are on.',
		'seeds': 'worldseeds',
		'worldseeds':
			'These are the seeds for the four main worlds -- Alpha: -621778714517541268, Delta: '.
			'-8443156782283251243, Gamma: -754633420005903009, Omega: 950483747. Outworld seeds are not provided.'
	);
	if($selection === 'help') {
		msg(color('a').'Get help on any of these topics:');
		@topics = array_filter(@help, closure(@key, @value){
			return(length(@value) > 16);
		});
		msg(color('6').array_implode(array_keys(@topics), ' '));
	} else {
		try {
			@title = to_lower($selection);
			@text = array_get(@help, @title, '');
			if(!@text) {
				@text = @help[@title.'s'];
			}
			if(length(@text) < 17) {
				@title = @text;
				@text = @help[@text];
			}
			msg(to_upper(@title).': '.color('a').@text);
		} catch(IndexOverflowException @ex) {
			msg(color('c').'Unknown entry. Type "/help" to find available entries.');
		}
	}
<<<
*:/rules = call_alias('/help rules')

# Put whatever they have in their hand onto their head. This shouldn't dupe.
*:/hat = >>>
	if(!is_null(pinv(player(), 103))) {
		die(color('gold').'You already have something on your head.');
	}
	@item = pinv(player(), null);
	if(is_null(@item)) {
		die(color('gold').'You need to hold something before you can put it on your head.');
	}
	@excluded = array('SHIELD', 'MONSTER_EGG', 'FIREWORK');
	if(array_contains(@excluded, @item['name'])) {
		die(color('gold').'That item cannot be put on your head without losing data tags.');
	}
	if(@item['qty'] == 1) {
		set_pinv(player(), array(null: null, 103: @item));
	} else {
		@item['qty'] -= 1;
		@hat = @item[];
		@hat['qty'] = 1;
		set_pinv(player(), array(null: @item, 103: @hat));
	}
	@loc = ploc();
	play_sound(@loc, array('sound': 'CHICKEN_EGG_POP'));
	play_effect(_relative(@loc, 'up', 2.7), 'CLOUD', array(
		'particleCount': 10,
		'offsetX': 0.5,
		'offsetY': 0.5,
		'offsetZ': 0.5,
		'speed': 0)
	);
	@messages = array('Fancy!', 'Stylin\'!', 'Groovy!', 'Lookin\' good!', 'Tasteful!', 'Awesome!', 'Rad!', 'Cool!');
	title_msg(null, color(6).array_rand(@messages, 1, false)[0], 10, 40, 10);
<<<

# PLAYER LISTS #
*:/who = >>>
	@list = array(array('admin', 'b', ''), array('moderator', 'b', ''), array('engineer', '6', ''), array('builder', '6', ''), array('donor', 'a', ''), array('regular', 'e', ''), array('member', 'e', ''), array('default', 'f', ''))
	@allplayers = all_players()
	foreach(@player in @allplayers) {
		for(@i = 0, @i < array_size(@list), @i++) {
			if(array_contains_ic(pgroup(@player), @list[@i][0])) {
				@list[@i][2] = @list[@i][2].' '.pinfo(@player, 4)
				break()
			}
		}
	}
	for(@i = 0, @i < array_size(@list), @i++) {
		if(@list[@i][2] !== '') {
			msg(color(@list[@i][1]).@list[@i][0].color(7).': '.@list[@i][2])
		}
	}
<<<
*:/list = >>>
	if(player() !== '~console') {
		call_alias('/who')
	}
<<<

*:/where = run('/mv who');

# DICE ROLLING #
*:/roll [$sides=6] = >>>
	if($sides > 100, die(color('a').'[Dice] '.color('f').'There\'s a limit of 100 sides.'))
	if($sides < 2, die(color('a').'[Dice] '.color('f').'There\'s a minimum of 2 sides.'))
	if($sides == 2) {
		@message = color('a').'[Coin] '._colorname(player()).player().color('f').' flipped a coin and got '.if(rand(2) == 0, 'heads.', 'tails.')
	} else {
		@message = color('a').'[Dice] '._colorname(player()).player().color('f').' rolled a '.color('a').(rand($sides) + 1).' on a '.$sides.'-sided die.'
	}
	foreach(@p in all_players(pworld())) {
		if(!ponline(@p), continue())
		tmsg(@p, @message)
	}
<<<

# Colour codes
*:/colors = msg(colorize('&00&11&22&33&44&55&66&77&88&99&aa&bb&cc&dd&ee&ff &kk&r&ll&r&mm&r&nn&r&oo &rr'))

# Vanish
*:/v = >>>
	if(!has_permission('command.vanish')) {
		die('You do not have permission.');
	}
	if(pmode() == 'SPECTATOR') {
		@worlds = _worlds_config();
		set_pmode(@worlds[pworld()]['mode']);
		if(extension_exists('CHDynmap')) {
			dm_set_pvisible(true);
		}
	} else {
		set_pmode('SPECTATOR');
		if(extension_exists('CHDynmap')) {
			dm_set_pvisible(false);
		}
	}
<<<

# Custom join/leave messages
*:/enter [$] = >>>
	if(!$) {
		die('Enter a message to be displayed when entering the server.');
	}

	@pdata = _pdata(player());
	@pdata['enter'] = $;
	_store_pdata(player(), @pdata);
	msg(colorize('&7Set server enter message to: '._colorname().'&o'.player().' &e&o'.@pdata['enter']));
<<<

*:/exit [$] = >>>
	if(!$) {
		die('Enter a message to be displayed when exiting the server.');
	}

	@pdata = _pdata(player());
	@pdata['exit'] = $;
	_store_pdata(player(), @pdata);
	msg(colorize('&7Set server exit message to: '._colorname().'&o'.player().' &e&o'.@pdata['exit']));
<<<

*:/livemap [$player] = >>>
	@player = player();
	if($player) {
		@player = _find_player($player);
	}
	@loc = ploc(@player);
	@x = @loc['x'];
	@z = @loc['z'];
	@world = @loc['world'];
	@url = "http://mc.finalscoremc.com:25966/?worldname=@{world}&mapname=detailed&zoom=2&x=@{x}&y=64&z=@{z}";
	@msg = '["",{"text":"'.color('b').'[\u21D6 Go to Live Map]'.color('r').'","clickEvent":{"action":"open_url","value":"'.@url.'"}}]';
	runas('~console', '/tellraw '.player().' '.@msg);
<<<

*:/here = >>>
	@loc = ploc();
	@x = @loc['x'];
	@z = @loc['z'];
	@world = @loc['world'];
	@url = "http://mc.finalscoremc.com:25966/?worldname=@{world}&mapname=detailed&zoom=2&x=@{x}&y=64&z=@{z}";
	@msg = '["",{"text":"'.color('b').'[\u21D6 '.player().'\'s location on the Live Map]'.color('r').'","clickEvent":'
			.'{"action":"open_url","value":"'.@url.'"}}]';
	foreach(@player in all_players()) {
		runas('~console', "/tellraw @player @msg");
	}
<<<
