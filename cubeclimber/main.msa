*:/cc [$] = call_alias('/cubeclimber' $);
*:/cubeclimber [$action] [$player] = >>>
switch($action) {
	case 'start':
	
		if(!sk_region_exists(pworld(), 'cubeclimber')) { 
			die('Define the \'cubeclimber\' region first.');
		}
		
		if(!sk_region_exists(pworld(), 'cubeclimber_blocks')) { 
			die('Define the \'cubeclimber_blocks\' region first.');
		}
		
		@count = 0;
		foreach(@p in all_players()) {
			if(array_contains(sk_current_regions(@p), 'cubeclimber')
			&& pworld(@p) == pworld()) {
				@count++;
			}
		}
		
		if(@count < 2) {
			die('You need to have at least 2 players to start CubeClimber.');
		}
		
		@cc = import('cubeclimber');
		if(!@cc) {
			@cc = array(
				'players': array(),
				'highest': 0,
			);
			export('cubeclimber', @cc);
			
			foreach(@p in all_players()) {
				if(pworld(@p) == pworld()) {
					tmsg(@p, colorize(player().' queued up a game of &7[&6Cube&cClimber&7]'));
				}
			}
		} else {
			die('Already running.');
		}
		
		if(!array_contains(get_scoreboards(), 'cc')) {
			create_scoreboard('cc');
			create_objective('height', 'DUMMY', 'cc');
			set_objective_display('height', array('slot': 'SIDEBAR', 'displayname': 'Starting...'), 'cc');
			_add_activity('cubeclimber', 'CubeClimber');
		}
		
		include('includes.library/cubeclimber.ms');
		_cc_start();
		
	case 'reset':
		if(!has_permission('cubeclimber.reset'), die('You do not have permission.'));
		if(array_contains(get_scoreboards(), 'cc')) {
			remove_scoreboard('cc');
			_remove_activity('cubeclimber');
		}
		if(has_bind('cube-interact')) {
			unbind('cube-interact');
			unbind('cube-teleport');
		}
		export('cubeclimber', null);
		msg('CubeClimber reset.');
		
	case 'mystats':
	case 'stats':
		if($player) {
			@player = $player;
		} else {
			@player = player();
		}
		@pstats = get_value('cubeclimber.player', @player);
		if(!@pstats) { 
			die('No statistics recorded for player '.@player);
		}
		msg(color('red').color('bold').'[ PERFORMANCE ]');
		msg(color('red').'[ '.round((@pstats[0] / @pstats[1]) * (@pstats[3] / @pstats[1]), 2).' ] '.color('r').'Avg Players Defeated');
		msg(color('red').'[ '.round((@pstats[2] / @pstats[1]), 2).' ] '.color('r').'Avg Blocks Climbed');
		if(array_index_exists(@pstats, 4)) {
			msg(color('gold').color('bold').'[ PERSONAL RECORDS ]');
			msg(color('gold').'[ '.@pstats[4].' ] '.color('r').'Best Time');
		}
		msg(color('yellow').color('bold').'[ STATISTICS ]');
		msg(color('yellow').'[ '.@pstats[0].' ] '.color('r').'Total Games Won');
		msg(color('yellow').'[ '.@pstats[1].' ] '.color('r').'Total Games Played');
		msg(color('yellow').'[ '.@pstats[2].' ] '.color('r').'Total Blocks Climbed');
		msg(color('yellow').'[ '.@pstats[3].' ] '.color('r').'Total Opponents Played');
		
	case 'top':
	case 'top10':
	case 'toptimes':
		@toptimes = get_value('cubeclimber', 'toptimes');
		if(!@toptimes) { 
			die('No top times recorded.');
		}
		msg(color('gold').color('bold').'Top Times');
		@player = 0;
		@time = 1;
		foreach(@this in @toptimes) {
			msg(color('gold').'[ '.@this[@time].' ] '.color('r').@this[@player]);
		}
		
	case 'resetstats':
		if(!has_permission('cubeclimber.resetstats'), die('You do not have permission.'));
		@stats = get_values('cubeclimber');
		foreach(@key in array_keys(@stats)) {
			clear_value(@key);
		}
		msg('CubeClimber stats reset.');
		
	case 'resettimes':
		if(!has_permission('cubeclimber.resetstats'), die('You do not have permission.'));
		@players = get_values('cubeclimber.player');
		foreach(@key: @data in @players) {
			if(array_index_exists(@data, 4)) {
				array_remove(@data, 4);
				store_value(@key, @data);
			}
		}
		store_value('cubeclimber', 'toptimes', array());
		msg('CubeClimber times reset.');
		
	default: 
		msg(colorize('&7[&6Cube&cClimber&7] '
		.'is a minigame where the goal is to reach the top of the block tower first. '
		.'Blocks that you walk on will change to your randomly assigned color. You can '
		.'break blocks of that same color.'));
		msg('/cubeclimber start '.color(7).'Start the game.');
		msg('/cc stats '.color(7).'View your statistics.');
		msg('/cc toptimes '.color(7).'View the top 10 times.');
}
<<<