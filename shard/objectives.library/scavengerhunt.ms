// A list of reasonably obtainable items in the overworld.
// This means it can't depend on mobs spawned in the nether/end, or items in chests.
// DO include any blocks that may have been placed in the overworld.
// DO NOT include blocks that require silk touch.
// DO NOT include shiny items. (can be confused with obtained/locked items)
@items = array(
	'ACACIA_BOAT',
	'ACACIA_BUTTON',
	'ACACIA_DOOR',
	'ACACIA_FENCE',
	'ACACIA_FENCE_GATE',
	'ACACIA_LEAVES',
	'ACACIA_LOG',
	'ACACIA_PLANKS',
	'ACACIA_PRESSURE_PLATE',
	'ACACIA_SAPLING',
	'ACACIA_SLAB',
	'ACACIA_STAIRS',
	'ACACIA_TRAPDOOR',
	'ACACIA_WOOD',
	'ACTIVATOR_RAIL',
	'ALLIUM',
	'ANDESITE',
	'ANVIL',
	'APPLE',
	'ARMOR_STAND',
	'ARROW',
	'AZURE_BLUET',
	'BAKED_POTATO',
	'BEACON',
	'BEEF',
	'BEETROOT',
	'BEETROOT_SEEDS',
	'BEETROOT_SOUP',
	'BIRCH_BOAT',
	'BIRCH_BUTTON',
	'BIRCH_DOOR',
	'BIRCH_FENCE',
	'BIRCH_FENCE_GATE',
	'BIRCH_LEAVES',
	'BIRCH_LOG',
	'BIRCH_PLANKS',
	'BIRCH_PRESSURE_PLATE',
	'BIRCH_SAPLING',
	'BIRCH_SLAB',
	'BIRCH_STAIRS',
	'BIRCH_TRAPDOOR',
	'BIRCH_WOOD',
	'BLACK_BANNER',
	'BLACK_BED',
	'BLACK_CARPET',
	'BLACK_CONCRETE',
	'BLACK_CONCRETE_POWDER',
	'BLACK_GLAZED_TERRACOTTA',
	'BLACK_SHULKER_BOX',
	'BLACK_STAINED_GLASS',
	'BLACK_TERRACOTTA',
	'BLACK_WOOL',
	'BLAZE_POWDER',
	'BLUE_BANNER',
	'BLUE_BED',
	'BLUE_CARPET',
	'BLUE_CONCRETE',
	'BLUE_CONCRETE_POWDER',
	'BLUE_GLAZED_TERRACOTTA',
	'BLUE_ICE',
	'BLUE_ORCHID',
	'BLUE_SHULKER_BOX',
	'BLUE_STAINED_GLASS',
	'BLUE_TERRACOTTA',
	'BLUE_WOOL',
	'BONE',
	'BONE_BLOCK',
	'BONE_MEAL',
	'BOOK',
	'BOOKSHELF',
	'BOW',
	'BOWL',
	'BREAD',
	'BREWING_STAND',
	'BRICK',
	'BRICKS',
	'BRICK_SLAB',
	'BRICK_STAIRS',
	'BROWN_BANNER',
	'BROWN_BED',
	'BROWN_CARPET',
	'BROWN_CONCRETE',
	'BROWN_CONCRETE_POWDER',
	'BROWN_GLAZED_TERRACOTTA',
	'BROWN_MUSHROOM',
	'BROWN_SHULKER_BOX',
	'BROWN_STAINED_GLASS',
	'BROWN_TERRACOTTA',
	'BROWN_WOOL',
	'BUCKET',
	'CACTUS',
	'CACTUS_GREEN',
	'CAKE',
	'CARROT',
	'CARROT_ON_A_STICK',
	'CARVED_PUMPKIN',
	'CAULDRON',
	'CHARCOAL',
	'CHEST',
	'CHEST_MINECART',
	'CHICKEN',
	'CHIPPED_ANVIL',
	'CHISELED_QUARTZ_BLOCK',
	'CHISELED_RED_SANDSTONE',
	'CHISELED_SANDSTONE',
	'CHISELED_STONE_BRICKS',
	'CHORUS_FLOWER',
	'CHORUS_FRUIT',
	'CHORUS_PLANT',
	'CLAY',
	'CLAY_BALL',
	'CLOCK',
	'COAL',
	'COAL_BLOCK',
	'COARSE_DIRT',
	'COBBLESTONE',
	'COBBLESTONE_SLAB',
	'COBBLESTONE_STAIRS',
	'COBBLESTONE_WALL',
	'COBWEB',
	'COCOA_BEANS',
	'COD',
	'COD_BUCKET',
	'COMPARATOR',
	'COMPASS',
	'COOKED_BEEF',
	'COOKED_CHICKEN',
	'COOKED_COD',
	'COOKED_MUTTON',
	'COOKED_PORKCHOP',
	'COOKED_RABBIT',
	'COOKED_SALMON',
	'COOKIE',
	'CRACKED_STONE_BRICKS',
	'CRAFTING_TABLE',
	'CREEPER_HEAD',
	'CUT_RED_SANDSTONE',
	'CUT_SANDSTONE',
	'CYAN_BANNER',
	'CYAN_BED',
	'CYAN_CARPET',
	'CYAN_CONCRETE',
	'CYAN_CONCRETE_POWDER',
	'CYAN_DYE',
	'CYAN_GLAZED_TERRACOTTA',
	'CYAN_SHULKER_BOX',
	'CYAN_STAINED_GLASS',
	'CYAN_TERRACOTTA',
	'CYAN_WOOL',
	'DAMAGED_ANVIL',
	'DANDELION',
	'DANDELION_YELLOW',
	'DARK_OAK_BOAT',
	'DARK_OAK_BUTTON',
	'DARK_OAK_DOOR',
	'DARK_OAK_FENCE',
	'DARK_OAK_FENCE_GATE',
	'DARK_OAK_LEAVES',
	'DARK_OAK_LOG',
	'DARK_OAK_PLANKS',
	'DARK_OAK_PRESSURE_PLATE',
	'DARK_OAK_SAPLING',
	'DARK_OAK_SLAB',
	'DARK_OAK_STAIRS',
	'DARK_OAK_TRAPDOOR',
	'DARK_OAK_WOOD',
	'DARK_PRISMARINE',
	'DARK_PRISMARINE_SLAB',
	'DARK_PRISMARINE_STAIRS',
	'DAYLIGHT_DETECTOR',
	'DEAD_BRAIN_CORAL',
	'DEAD_BRAIN_CORAL_BLOCK',
	'DEAD_BRAIN_CORAL_FAN',
	'DEAD_BUBBLE_CORAL',
	'DEAD_BUBBLE_CORAL_BLOCK',
	'DEAD_BUBBLE_CORAL_FAN',
	'DEAD_BUSH',
	'DEAD_FIRE_CORAL',
	'DEAD_FIRE_CORAL_BLOCK',
	'DEAD_FIRE_CORAL_FAN',
	'DEAD_HORN_CORAL',
	'DEAD_HORN_CORAL_BLOCK',
	'DEAD_HORN_CORAL_FAN',
	'DEAD_TUBE_CORAL',
	'DEAD_TUBE_CORAL_BLOCK',
	'DEAD_TUBE_CORAL_FAN',
	'DETECTOR_RAIL',
	'DIAMOND',
	'DIAMOND_AXE',
	'DIAMOND_BLOCK',
	'DIAMOND_BOOTS',
	'DIAMOND_CHESTPLATE',
	'DIAMOND_HELMET',
	'DIAMOND_HOE',
	'DIAMOND_HORSE_ARMOR',
	'DIAMOND_LEGGINGS',
	'DIAMOND_PICKAXE',
	'DIAMOND_SHOVEL',
	'DIAMOND_SWORD',
	'DIORITE',
	'DIRT',
	'DISPENSER',
	'DRAGON_EGG',
	'DRAGON_HEAD',
	'DRIED_KELP',
	'DRIED_KELP_BLOCK',
	'DROPPER',
	'EGG',
	'EMERALD',
	'EMERALD_BLOCK',
	'ENCHANTING_TABLE',
	'ENDER_CHEST',
	'ENDER_PEARL',
	'END_ROD',
	'END_STONE',
	'END_STONE_BRICKS',
	'EXPERIENCE_BOTTLE',
	'FEATHER',
	'FERMENTED_SPIDER_EYE',
	'FERN',
	'FIREWORK_ROCKET',
	'FIREWORK_STAR',
	'FISHING_ROD',
	'FLINT',
	'FLINT_AND_STEEL',
	'FLOWER_POT',
	'FURNACE',
	'FURNACE_MINECART',
	'GLASS',
	'GLASS_BOTTLE',
	'GLASS_PANE',
	'GLISTERING_MELON_SLICE',
	'GLOWSTONE',
	'GLOWSTONE_DUST',
	'GOLDEN_APPLE',
	'GOLDEN_AXE',
	'GOLDEN_BOOTS',
	'GOLDEN_CARROT',
	'GOLDEN_CHESTPLATE',
	'GOLDEN_HELMET',
	'GOLDEN_HOE',
	'GOLDEN_HORSE_ARMOR',
	'GOLDEN_LEGGINGS',
	'GOLDEN_PICKAXE',
	'GOLDEN_SHOVEL',
	'GOLDEN_SWORD',
	'GOLD_BLOCK',
	'GOLD_INGOT',
	'GOLD_NUGGET',
	'GOLD_ORE',
	'GRANITE',
	'GRASS',
	'GRAVEL',
	'GRAY_BANNER',
	'GRAY_BED',
	'GRAY_CARPET',
	'GRAY_CONCRETE',
	'GRAY_CONCRETE_POWDER',
	'GRAY_DYE',
	'GRAY_GLAZED_TERRACOTTA',
	'GRAY_SHULKER_BOX',
	'GRAY_STAINED_GLASS',
	'GRAY_TERRACOTTA',
	'GRAY_WOOL',
	'GREEN_BANNER',
	'GREEN_BED',
	'GREEN_CARPET',
	'GREEN_CONCRETE',
	'GREEN_CONCRETE_POWDER',
	'GREEN_GLAZED_TERRACOTTA',
	'GREEN_SHULKER_BOX',
	'GREEN_STAINED_GLASS',
	'GREEN_TERRACOTTA',
	'GREEN_WOOL',
	'GUNPOWDER',
	'HAY_BLOCK',
	'HEAVY_WEIGHTED_PRESSURE_PLATE',
	'HOPPER',
	'HOPPER_MINECART',
	'INK_SAC',
	'IRON_AXE',
	'IRON_BARS',
	'IRON_BLOCK',
	'IRON_BOOTS',
	'IRON_CHESTPLATE',
	'IRON_DOOR',
	'IRON_HELMET',
	'IRON_HOE',
	'IRON_HORSE_ARMOR',
	'IRON_INGOT',
	'IRON_LEGGINGS',
	'IRON_NUGGET',
	'IRON_ORE',
	'IRON_PICKAXE',
	'IRON_SHOVEL',
	'IRON_SWORD',
	'IRON_TRAPDOOR',
	'ITEM_FRAME',
	'JACK_O_LANTERN',
	'JUKEBOX',
	'JUNGLE_BOAT',
	'JUNGLE_BUTTON',
	'JUNGLE_DOOR',
	'JUNGLE_FENCE',
	'JUNGLE_FENCE_GATE',
	'JUNGLE_LEAVES',
	'JUNGLE_LOG',
	'JUNGLE_PLANKS',
	'JUNGLE_PRESSURE_PLATE',
	'JUNGLE_SAPLING',
	'JUNGLE_SLAB',
	'JUNGLE_STAIRS',
	'JUNGLE_TRAPDOOR',
	'JUNGLE_WOOD',
	'KELP',
	'KELP_PLANT',
	'LADDER',
	'LAPIS_BLOCK',
	'LAPIS_LAZULI',
	'LAVA_BUCKET',
	'LEAD',
	'LEATHER',
	'LEATHER_BOOTS',
	'LEATHER_CHESTPLATE',
	'LEATHER_HELMET',
	'LEATHER_LEGGINGS',
	'LEVER',
	'LIGHT_BLUE_BANNER',
	'LIGHT_BLUE_BED',
	'LIGHT_BLUE_CARPET',
	'LIGHT_BLUE_CONCRETE',
	'LIGHT_BLUE_CONCRETE_POWDER',
	'LIGHT_BLUE_DYE',
	'LIGHT_BLUE_GLAZED_TERRACOTTA',
	'LIGHT_BLUE_SHULKER_BOX',
	'LIGHT_BLUE_STAINED_GLASS',
	'LIGHT_BLUE_TERRACOTTA',
	'LIGHT_BLUE_WOOL',
	'LIGHT_GRAY_BANNER',
	'LIGHT_GRAY_BED',
	'LIGHT_GRAY_CARPET',
	'LIGHT_GRAY_CONCRETE',
	'LIGHT_GRAY_CONCRETE_POWDER',
	'LIGHT_GRAY_DYE',
	'LIGHT_GRAY_GLAZED_TERRACOTTA',
	'LIGHT_GRAY_SHULKER_BOX',
	'LIGHT_GRAY_STAINED_GLASS',
	'LIGHT_GRAY_TERRACOTTA',
	'LIGHT_GRAY_WOOL',
	'LIGHT_WEIGHTED_PRESSURE_PLATE',
	'LILAC',
	'LILY_PAD',
	'LIME_BANNER',
	'LIME_BED',
	'LIME_CARPET',
	'LIME_CONCRETE',
	'LIME_CONCRETE_POWDER',
	'LIME_DYE',
	'LIME_GLAZED_TERRACOTTA',
	'LIME_SHULKER_BOX',
	'LIME_STAINED_GLASS',
	'LIME_TERRACOTTA',
	'LIME_WOOL',
	'MAGENTA_BANNER',
	'MAGENTA_BED',
	'MAGENTA_CARPET',
	'MAGENTA_CONCRETE',
	'MAGENTA_CONCRETE_POWDER',
	'MAGENTA_DYE',
	'MAGENTA_GLAZED_TERRACOTTA',
	'MAGENTA_SHULKER_BOX',
	'MAGENTA_STAINED_GLASS',
	'MAGENTA_TERRACOTTA',
	'MAGENTA_WOOL',
	'MAGMA_BLOCK',
	'MELON',
	'MELON_SEEDS',
	'MELON_SLICE',
	'MILK_BUCKET',
	'MINECART',
	'MOSSY_COBBLESTONE',
	'MOSSY_STONE_BRICKS',
	'MUSHROOM_STEW',
	'MUTTON',
	'MYCELIUM',
	'NAUTILUS_SHELL',
	'NETHERRACK',
	'NETHER_BRICK',
	'NETHER_BRICKS',
	'NETHER_BRICK_FENCE',
	'NETHER_BRICK_SLAB',
	'NETHER_BRICK_STAIRS',
	'NETHER_WART',
	'NOTE_BLOCK',
	'OAK_BOAT',
	'OAK_BUTTON',
	'OAK_DOOR',
	'OAK_FENCE',
	'OAK_FENCE_GATE',
	'OAK_LEAVES',
	'OAK_LOG',
	'OAK_PLANKS',
	'OAK_PRESSURE_PLATE',
	'OAK_SAPLING',
	'OAK_SLAB',
	'OAK_STAIRS',
	'OAK_TRAPDOOR',
	'OAK_WOOD',
	'OBSERVER',
	'OBSIDIAN',
	'ORANGE_BANNER',
	'ORANGE_BED',
	'ORANGE_CARPET',
	'ORANGE_CONCRETE',
	'ORANGE_CONCRETE_POWDER',
	'ORANGE_DYE',
	'ORANGE_GLAZED_TERRACOTTA',
	'ORANGE_SHULKER_BOX',
	'ORANGE_STAINED_GLASS',
	'ORANGE_TERRACOTTA',
	'ORANGE_TULIP',
	'ORANGE_WOOL',
	'OXEYE_DAISY',
	'PACKED_ICE',
	'PAINTING',
	'PAPER',
	'PEONY',
	'PETRIFIED_OAK_SLAB',
	'PHANTOM_MEMBRANE',
	'PINK_BANNER',
	'PINK_BED',
	'PINK_CARPET',
	'PINK_CONCRETE',
	'PINK_CONCRETE_POWDER',
	'PINK_DYE',
	'PINK_GLAZED_TERRACOTTA',
	'PINK_SHULKER_BOX',
	'PINK_STAINED_GLASS',
	'PINK_TERRACOTTA',
	'PINK_TULIP',
	'PINK_WOOL',
	'PISTON',
	'PLAYER_HEAD',
	'PODZOL',
	'POISONOUS_POTATO',
	'POLISHED_ANDESITE',
	'POLISHED_DIORITE',
	'POLISHED_GRANITE',
	'POPPED_CHORUS_FRUIT',
	'POPPY',
	'PORKCHOP',
	'POTATO',
	'POTION',
	'POWERED_RAIL',
	'PRISMARINE',
	'PRISMARINE_BRICKS',
	'PRISMARINE_BRICK_SLAB',
	'PRISMARINE_BRICK_STAIRS',
	'PRISMARINE_CRYSTALS',
	'PRISMARINE_SHARD',
	'PRISMARINE_SLAB',
	'PRISMARINE_STAIRS',
	'PUFFERFISH',
	'PUFFERFISH_BUCKET',
	'PUMPKIN',
	'PUMPKIN_PIE',
	'PUMPKIN_SEEDS',
	'PURPLE_BANNER',
	'PURPLE_BED',
	'PURPLE_CARPET',
	'PURPLE_CONCRETE',
	'PURPLE_CONCRETE_POWDER',
	'PURPLE_DYE',
	'PURPLE_GLAZED_TERRACOTTA',
	'PURPLE_SHULKER_BOX',
	'PURPLE_STAINED_GLASS',
	'PURPLE_TERRACOTTA',
	'PURPLE_WOOL',
	'PURPUR_BLOCK',
	'PURPUR_PILLAR',
	'PURPUR_SLAB',
	'PURPUR_STAIRS',
	'QUARTZ',
	'QUARTZ_BLOCK',
	'QUARTZ_PILLAR',
	'QUARTZ_SLAB',
	'QUARTZ_STAIRS',
	'RABBIT',
	'RABBIT_FOOT',
	'RABBIT_HIDE',
	'RABBIT_STEW',
	'RAIL',
	'REDSTONE',
	'REDSTONE_BLOCK',
	'REDSTONE_LAMP',
	'REDSTONE_TORCH',
	'RED_BANNER',
	'RED_BED',
	'RED_CARPET',
	'RED_CONCRETE',
	'RED_CONCRETE_POWDER',
	'RED_GLAZED_TERRACOTTA',
	'RED_MUSHROOM',
	'RED_NETHER_BRICKS',
	'RED_SAND',
	'RED_SANDSTONE',
	'RED_SANDSTONE_SLAB',
	'RED_SANDSTONE_STAIRS',
	'RED_SHULKER_BOX',
	'RED_STAINED_GLASS',
	'RED_TERRACOTTA',
	'RED_TULIP',
	'RED_WOOL',
	'REPEATER',
	'ROSE_BUSH',
	'ROSE_RED',
	'ROTTEN_FLESH',
	'SADDLE',
	'SALMON',
	'SALMON_BUCKET',
	'SAND',
	'SANDSTONE',
	'SANDSTONE_SLAB',
	'SANDSTONE_STAIRS',
	'SCUTE',
	'SEAGRASS',
	'SEA_LANTERN',
	'SEA_PICKLE',
	'SHEARS',
	'SHIELD',
	'SHULKER_BOX',
	'SIGN',
	'SKELETON_SKULL',
	'SLIME_BALL',
	'SLIME_BLOCK',
	'SNOW',
	'SNOWBALL',
	'SNOW_BLOCK',
	'SOUL_SAND',
	'SPECTRAL_ARROW',
	'SPIDER_EYE',
	'SPLASH_POTION',
	'SPONGE',
	'SPRUCE_BOAT',
	'SPRUCE_BUTTON',
	'SPRUCE_DOOR',
	'SPRUCE_FENCE',
	'SPRUCE_FENCE_GATE',
	'SPRUCE_LEAVES',
	'SPRUCE_LOG',
	'SPRUCE_PLANKS',
	'SPRUCE_PRESSURE_PLATE',
	'SPRUCE_SAPLING',
	'SPRUCE_SLAB',
	'SPRUCE_STAIRS',
	'SPRUCE_TRAPDOOR',
	'SPRUCE_WOOD',
	'STICK',
	'STICKY_PISTON',
	'STONE',
	'STONE_AXE',
	'STONE_BRICKS',
	'STONE_BRICK_SLAB',
	'STONE_BRICK_STAIRS',
	'STONE_BUTTON',
	'STONE_HOE',
	'STONE_PICKAXE',
	'STONE_PRESSURE_PLATE',
	'STONE_SHOVEL',
	'STONE_SLAB',
	'STONE_SWORD',
	'STRING',
	'STRIPPED_ACACIA_LOG',
	'STRIPPED_ACACIA_WOOD',
	'STRIPPED_BIRCH_LOG',
	'STRIPPED_BIRCH_WOOD',
	'STRIPPED_DARK_OAK_LOG',
	'STRIPPED_DARK_OAK_WOOD',
	'STRIPPED_JUNGLE_LOG',
	'STRIPPED_JUNGLE_WOOD',
	'STRIPPED_OAK_LOG',
	'STRIPPED_OAK_WOOD',
	'STRIPPED_SPRUCE_LOG',
	'STRIPPED_SPRUCE_WOOD',
	'SUGAR',
	'SUGAR_CANE',
	'SUNFLOWER',
	'TERRACOTTA',
	'TIPPED_ARROW',
	'TNT',
	'TNT_MINECART',
	'TORCH',
	'TRAPPED_CHEST',
	'TRIDENT',
	'TRIPWIRE',
	'TRIPWIRE_HOOK',
	'TROPICAL_FISH',
	'TROPICAL_FISH_BUCKET',
	'TURTLE_HELMET',
	'VINE',
	'WATER_BUCKET',
	'WET_SPONGE',
	'WHEAT',
	'WHEAT_SEEDS',
	'WHITE_BANNER',
	'WHITE_BED',
	'WHITE_CARPET',
	'WHITE_CONCRETE',
	'WHITE_CONCRETE_POWDER',
	'WHITE_GLAZED_TERRACOTTA',
	'WHITE_SHULKER_BOX',
	'WHITE_STAINED_GLASS',
	'WHITE_TERRACOTTA',
	'WHITE_TULIP',
	'WHITE_WOOL',
	'WITHER_SKELETON_SKULL',
	'WOODEN_AXE',
	'WOODEN_HOE',
	'WOODEN_PICKAXE',
	'WOODEN_SHOVEL',
	'WOODEN_SWORD',
	'WRITABLE_BOOK',
	'WRITTEN_BOOK',
	'YELLOW_BANNER',
	'YELLOW_BED',
	'YELLOW_CARPET',
	'YELLOW_CONCRETE',
	'YELLOW_CONCRETE_POWDER',
	'YELLOW_GLAZED_TERRACOTTA',
	'YELLOW_SHULKER_BOX',
	'YELLOW_STAINED_GLASS',
	'YELLOW_TERRACOTTA',
	'YELLOW_WOOL',
	'ZOMBIE_HEAD',
);

// grid of random items
@card = array();
@size = @rules['cardsize'];
@width = if(@size, @size, 9);
@height = if(@size, @size, 6);
for(@i = 0, @i < @height, @i++) {
	@card[@i] = array();
	for(@j = 0, @j < @width, @j++) {
		@index = array_rand(@items, 1)[0];
		@card[@i][@j] = array('players': array(), 'material': @items[@index]);
		array_remove(@items, @index);
	}
}
export('shard.card', @card);

// Scoreboard
create_objective('inarow', 'DUMMY', 'shard');
create_objective('reroll', 'DUMMY', 'shard');
create_objective('total', 'DUMMY', 'shard');
if(@size) {
	set_objective_display('inarow', array('slot': 'SIDEBAR', 'displayname': 'In a Row ('.@size.')'), 'shard');
} else {
	set_objective_display('total', array('slot': 'SIDEBAR', 'displayname': 'In a Row (4)'), 'shard');
}

// Player colors
@colors = array(
	array('ORANGE_STAINED_GLASS_PANE', 'GOLD'),
	array('MAGENTA_STAINED_GLASS_PANE', 'LIGHT_PURPLE'),
	array('LIGHT_BLUE_STAINED_GLASS_PANE', 'BLUE'),
	array('YELLOW_STAINED_GLASS_PANE', 'YELLOW'),
	array('LIME_STAINED_GLASS_PANE', 'GREEN'),
	array('PINK_STAINED_GLASS_PANE', 'RED'),
	array('CYAN_STAINED_GLASS_PANE', 'AQUA'),
	array('BLUE_STAINED_GLASS_PANE', 'DARK_BLUE'),
	array('GREEN_STAINED_GLASS_PANE', 'DARK_GREEN'),
	array('RED_STAINED_GLASS_PANE', 'DARK_RED'),
);
@colorMap = associative_array();
export('shard.colors', @colorMap);

// Procedures
proc _scavengerhunt_win(@player) {
	_worldmsg('shard', color('green').@player.' wins!');
	launch_firework(ploc(@player), array('strength': 3, 'type': 'BALL_LARGE', 'flicker': true));
	set_timeout(20000, closure(){
		_unload_shard();
	});
}

if(@size) {
	proc _refresh_card(@create = false, @cardSize = @size) {
		@card = import('shard.card');
		@chest = associative_array();
		@size = 54;
		@offset = 2;
		@chestWidth = 9;
		if(@cardSize == 3) {
			@size = 'DROPPER';
			@offset = 0;
			@chestWidth = 3;
		} else {
			@size = 9 * @cardSize;
		}
		// Personalize virtual chest per player
		foreach(@p in all_players('shard')) {
			for(@i = 0, @i < @cardSize, @i++) {
				for(@j = 0, @j < @cardSize, @j++) {
					@item = @card[@i][@j];
					if(array_contains(@item['players'], @p)) {
						@chest[@offset + @j + @i * @chestWidth] = array('name': 'RED_STAINED_GLASS_PANE');
					} else if(array_size(@item['players'])) {
						@chest[@offset + @j + @i * @chestWidth] = array('name': @item['material'], 'meta': array('enchants':
								array('sharpness': 1), 'flags': array('HIDE_ENCHANTS')));
					} else {
						@chest[@offset + @j + @i * @chestWidth] = array('name': @item['material'], 'meta': array('lore':
								array('Click to re-roll this item.')));
					}
				}
			}
			if(@create && player() == @p) {
				create_virtual_inventory(@p.'card', @size, @p.'\'s Card', @chest);
			} else {
				set_inventory(@p.'card', @chest);
			}
		}
	}
	
	proc _check_card(@player, @row, @column, @cardSize = @size) {
		@card = import('shard.card');
		@range = range(@cardSize);
		// Check horizontal/vertical
		@foundRow = 0;
		foreach(@i in @range) {
			if(array_contains(@card[@row][@i]['players'], @player)) {
				@foundRow++;
			}
		}
		@foundColumn = 0;
		foreach(@i in @range) {
			if(array_contains(@card[@i][@column]['players'], @player)) {
				@foundColumn++;
			}
		}
		// Check diagonal
		@foundDiagDown = 0;
		foreach(@i in @range) {
			if(array_contains(@card[@i][@i]['players'], @player)) {
				@foundDiagDown++;
			}
		}
		@foundDiagUp = 0;
		foreach(@i in @range) {
			if(array_contains(@card[@i][@cardSize - 1 - @i]['players'], @player)) {
				@foundDiagUp++;
			}
		}
		@score = max(@foundRow, @foundColumn, @foundDiagDown, @foundDiagUp);
		set_pscore('inarow', @player, @score, 'shard');
		if(@score == @cardSize) {
			_scavengerhunt_win(@player);
		}
	}
	
} else {
	proc _refresh_card(@create = false) {
		@card = import('shard.card');
		@colors = import('shard.colors');
		@chest = associative_array();
		@offset = 2;
		@chestWidth = 9;
		for(@i = 0, @i < 6, @i++) {
			for(@j = 0, @j < 9, @j++) {
				@item = @card[@i][@j];
				if(string_ends_with(@item['material'], '_STAINED_GLASS_PANE')) {
					continue();
				}
				if(@item['players']) {
					@chest[@j + @i * @chestWidth] = array('name': @colors[@item['players'][0]][0],
							'meta': array('display': @item['players'][0]));
					@item['material'] = 'WHITE_STAINED_GLASS_PANE';
				} else {
					@chest[@j + @i * @chestWidth] = array('name': @item['material'], 'meta': array('lore':
							array('Click to re-roll this item.')));
				}
			}
		}
		if(@create) {
			create_virtual_inventory('shardcard', 54, 'Get 4 In A Row', @chest);
		} else {
			set_inventory('shardcard', @chest);
		}
	}
	_refresh_card(true);
	
	proc _check_card(@player, @row, @column) {
		@card = import('shard.card');
		@range = range(4);
		// Check horizontal/vertical
		@maxRow = min(6, @row + 4) - 3;
		@contiguous = 0;
		for(@i = max(0, @row - 3), @i < @maxRow + @contiguous, @i++) {
			if(array_contains(@card[@i][@column]['players'], @player)) {
				@contiguous++;
				if(@contiguous == 4) {
					_scavengerhunt_win(@player);
					return();
				}
			} else {
				@contiguous = 0;
			}
		}
		@maxColumn = min(9, @column + 4) - 3;
		@contiguous = 0;
		for(@i = max(0, @column - 3), @i < @maxColumn + @contiguous, @i++) {
			if(array_contains(@card[@row][@i]['players'], @player)) {
				@contiguous++;
				if(@contiguous == 4) {
					_scavengerhunt_win(@player);
					return();
				}
			} else {
				@contiguous = 0;
			}
		}
		// Check diagonal
		if(@column - @row < 6 && @row - @column < 4) {
			@offset = @column - @row;
			@contiguous = 0;
			for(@i = @row - 3, @i < @row + 1 + @contiguous, @i++) {
				@j = @i + @offset;
				if(@i > -1 && @j > -1
				&& @i < 6 && @j < 9
				&& array_contains(@card[@i][@j]['players'], @player)) {
					@contiguous++;
					if(@contiguous == 4) {
						_scavengerhunt_win(@player);
						return();
					}
				} else {
					@contiguous = 0;
				}
			}
		}
		@total = @column + @row;
		if(@total > 2 && @total < 11) {
			@offset = 8 - @column - @row;
			@contiguous = 0;
			for(@i = @row - 3, @i < @row + 1 + @contiguous, @i++) {
				@j = 8 - @i - @offset;
				if(@i > -1 && @j > -1
				&& @i < 6 && @j < 9
				&& array_contains(@card[@i][8 - @i - @offset]['players'], @player)) {
					@contiguous++;
					if(@contiguous == 4) {
						_scavengerhunt_win(@player);
						return();
					}
				} else {
					@contiguous = 0;
				}
			}
		}
	}
}



// Events
@binds[] = 'shard-scavenger-worldchanged';
bind('world_changed', array('id': 'shard-scavenger-worldchanged', 'priority': 'LOW'), array('to': 'shard'), @event, @size, @colors, @colorMap) {
	queue_push(closure(){
		try {
			@index = array_rand(@colors, 1)[0];
			@colorMap[player()] = @colors[@index];
			array_remove(@colors, @index);
			create_team(player(), 'shard');
			team_add_player(player(), player(), 'shard');
			set_team_display(player(), array('color': @colorMap[player()][1]), 'shard');
			pgive_item(player(), array('name': 'MAP', 'meta': array('display': 'Scavenger Hunt Card')));
			if(@size) {
				_refresh_card(true);
			}
		} catch(IndexOverflowException @ex) {
			set_pmode('SPECTATOR');
		}
	}, 'shard');
}

@binds[] = 'shard-scavenger-playerinteract';
bind('player_interact', array('id': 'shard-scavenger-playerinteract'), array('itemname': 'MAP', 'button': 'right'), @event, @size) {
	if(pworld() == 'shard') {
		cancel();
		if(@size) {
			popen_inventory(player().'card');
		} else {
			popen_inventory('shardcard');
		}
	}
}

@binds[] = 'shard-scavenger-inventoryclick';
bind('inventory_click', array('id': 'shard-scavenger-inventoryclick'), array('clicktype': 'LEFT', 'virtual': true), @event,
	@card, @items, @width, @height) {
		
	if(@event['slotitem'] && @event['rawslot'] < @event['inventorysize']) {
		@menu = pinventory_holder();
		if(@menu == 'shardcard' || @menu == player().'card') {
		 	if(get_pscore('reroll', player(), 'shard')) {
				die('You\'ve re-rolled an item already.');
			}
			@material = @event['slotitem']['name'];
			if(string_ends_with(@material, '_STAINED_GLASS_PANE')) {
				die();
			}
			for(@i = 0, @i < @height, @i++) {
				for(@j = 0, @j < @width, @j++) {
					@item = @card[@i][@j];
					if(@item['material'] == @material && !@item['players']) {
						@newmaterial = array_rand(@items, 1, false)[0];
						@card[@i][@j] = array('players': array(), 'material': @newmaterial);
						set_pscore('reroll', player(), 1, 'shard');
						_refresh_card();
						_worldmsg('shard', player().' re-rolled '.@material.' and got '.@newmaterial.'.');
						die();
					}
				}
			}
			msg('Someone already got that item!');
		}
	}
}

@binds[] = 'shard-scavenger-itempickup';
bind('item_pickup', array('id': 'shard-scavenger-itempickup'), null, @event, @card, @size, @width, @height) {
	if(pworld() == 'shard') {
		@thisMaterial = @event['item']['name'];
		if(string_ends_with(@thisMaterial, '_STAINED_GLASS_PANE')) {
			die();
		} else if(@thisMaterial == 'MAP') {
			modify_event('item', array('name': 'MAP', 'meta': array('display': 'Scavenger Hunt Card')));
			die();
		}
		for(@i = 0, @i < @height, @i++) {
			for(@j = 0, @j < @width, @j++) {
				@item = @card[@i][@j];
				if(@item['material'] == @thisMaterial && !array_contains(@item['players'], player())) {
					if(@event['item']['qty'] > 1) {
						@event['item']['qty']--;
						modify_event('item', @event['item']);
					} else {
						modify_event('item', null);
					}
					@item['players'][] = player();
					set_pscore('total', player(), get_pscore('total', player(), 'shard') + 1, 'shard');
					launch_firework(ploc());
					_worldmsg('shard', player().' found '.color('green').'['.@event['item']['name'].']');
					_refresh_card();
					_check_card(player(), @i, @j);
					break(2);
				}
			}
		}
	}
}
