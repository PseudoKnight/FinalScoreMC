/recompile [$args] [$] = >>>
	@clearGlobal = false; # -g clear all but protected exported global vars
	@clearProtected = false; # -p clear protected global vars
	@force = false; # -f force recompile even if games are running
	@message = '';
	if($args) {
		if($args[0] === '-') {
			foreach(@i in range(1, length($args))) {
				switch($args[@i]) {
					case 'g':
						@clearGlobal = true;
					case 'p':
						@clearProtected = true;
					case 'f':
						@force = true;
				}
			}
		} else {
			@message = $args.' ';
		}
	}
	if($) {
		@message .= $;
	}

	# check if a game is running before recompiling
	@activities = import('activities');
	if(@activities) {
		msg(color('gold').'Currently in progress: '.array_implode(@activities, ', '));
		if(!@force) {
			die(color('red').'Halted recompile due to games in progress.');
		} else {
			foreach(@activity in array_keys(@activities)) {
				export(string(@activity), null);
			}
			# if forcing a recompiles despite games running, we have to clear scoreboards
			@scoreboards = get_scoreboards();
			foreach(@scoreboard in @scoreboards) {
				if(@scoreboard !== 'main') {
					remove_scoreboard(@scoreboard);
				}
			}
		}
	}

	# If we're clearing global variables, let's store and restore some
	if(@clearGlobal && !@clearProtected) {
		@requests = import('requests');
		if(is_array(@requests)) {
			store_value('session.requests', @requests);
		}

		@conv = import('conv');
		if(is_array(@conv)) {
			store_value('session.conv', @conv);
		}

		@ignorelist = import('ignorelist');
		if(is_array(@ignorelist)) {
			store_value('session.ignorelist', @ignorelist);
		}

		@timers = import('timers');
		if(is_array(@timers)) {
			store_value('session.timers', @timers);
		}
	}

	foreach(@world in get_worlds()) {
		if(all_players(@world)) {
			queue_push(closure(){
				save_world(@world);
			});
		}
	}
	queue_push(closure(){
		save_players();
		set_timeout(100, closure(){
			broadcast(color('yellow').'Recompiling scripts...');
			@start = time();
			run('/recompile -rf'.if(!@clearGlobal, 'g'));
			@stop = time();
			broadcast(color('green').'Done!'.if(@message, ' "'.@message.'"').' ('.round((@stop - @start) / 1000, 1).'s)');
		});
	});
<<<

/hologram $ = >>>
	@loc = ploc();
	@lines = split(',', $);
	for(@i = array_size(@lines) - 1, @i >= 0, @i--) {
		@armorstand = spawn_entity('ARMOR_STAND', 1, @loc)[0];
		set_entity_spec(@armorstand, array('gravity': false, 'visible': false));
		set_mob_name(@armorstand, colorize(@lines[@i]));
		set_name_visible(@armorstand, true);
		@loc['y'] += 0.28;
	}
<<<

/butcher [$] = call_alias('/remove '.$)
/remove [$] = >>>
	if(!$) {
		msg('Usage: /remove [radius] [entityType] [-n]');
		msg('This will preserve named mobs, except when given the -n flag.');
		msg('Special entityType groups: living, hostile, hologram');
	}
	@removenamed = false;
	@type = array('BLAZE', 'CAVE_SPIDER', 'CREEPER', 'ELDER_GUARDIAN', 'ENDER_DRAGON', 'ENDERMAN', 'ENDERMITE',
			'EVOKER', 'GUARDIAN', 'GHAST', 'GIANT', 'HUSK', 'MAGMA_CUBE', 'PIG_ZOMBIE', 'SHULKER', 'SILVERFISH',
			'SKELETON', 'SLIME', 'SPIDER', 'STRAY', 'WITCH', 'WITHER', 'WITHER_SKELETON', 'VEX', 'VINDICATOR', 'ZOMBIE',
			'ZOMBIE_VILLAGER');
	@radius = 64;
	@loc = get_command_block();
	if(is_null(@loc)) {
		@loc = ploc();
	}

	foreach(@arg in parse_args($)) {
		if(is_numeric(@arg)) {
			@radius = min(@arg, 128);
		} else if(@arg === '-n') {
			@removenamed = true;
		} else {
			switch(@arg) {
				case 'living':
					@type = array_merge(@type, array('BAT', 'CHICKEN', 'COW', 'DONKEY', 'HORSE', 'IRON_GOLEM', 'LLAMA',
							'MULE', 'MUSHROOM_COW', 'OCELOT', 'PIG', 'RABBIT', 'SHEEP', 'SKELETON_HORSE', 'SNOWMAN',
							'SQUID', 'VILLAGER', 'WOLF', 'ZOMBIE_HORSE'));
				case 'hostile':
					continue();
				case 'hologram':
					@type = 'ARMOR_STAND';
					@removenamed = true;
				default:
					@type = @arg;
			}
		}
	}
	@entities = entities_in_radius(@loc, @radius, @type);
	@count = 0;
	foreach(@e in @entities) {
		if(@removenamed || !is_entity_living(@e) || !get_mob_name(@e)) {
			entity_remove(@e);
			@count++;
		}
	}
	msg('Removed '.@count.' of '.array_size(@entities).' in a '.@radius.' radius.');
<<<

*:/ban [$player] [$] = >>>
	if(!has_permission('group.moderator'), die('You do not have permission.'))
	if(!$player, die('Usage: /ban <player> [-t 1d-8h-10m] [message]'))
	@pdata = _pdata($player)
	@bantime = null
	@message = null
	if($) {
		@args = parse_args($)
		if(@args[0] === '-t') {
			@times = split('-', @args[1])
			@bantime = time()
			foreach(@t in @times) {
				switch(substr(@t, length(@t) - 1, length(@t))) {
				case 'd':
					@bantime = @bantime + (86400000 * substr(@t, 0, length(@t) - 1))
				case 'h':
					@bantime = @bantime + (3600000 * substr(@t, 0, length(@t) - 1))
				case 'm':
					@bantime = @bantime + (60000 * substr(@t, 0, length(@t) - 1))
				}
			}
			if(array_size(@args) > 2) {
				@message = array_implode(@args[cslice(2, array_size(@args) - 1)], ' ')
			}
		} else {
			@message = $
		}
	}
	@pdata['ban'] = associative_array()
	if(@bantime, @pdata['ban']['time'] = @bantime)
	if(@message, @pdata['ban']['message'] = @message)
	if(player() !== '~console', @pdata['ban']['by'] = player())
	_store_pdata($player, @pdata)
	if(ponline($player), pkick($player, if(@message, @message, 'Banned. Appeal at FinalScoreMC.com')))
	msg($player.' is now banned.')
	console(player().' banned '.$player.'.'.if(@message, ' (Reason: "'.@message.'")'), false);
<<<
