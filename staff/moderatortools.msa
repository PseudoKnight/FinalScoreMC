/hologram $ = >>>
	@loc = location_shift(ploc(), 'up');
	@lines = split(',', $);
	for(@i = array_size(@lines) - 1, @i >= 0, @i--) {
		@armorstand = spawn_entity('ARMOR_STAND', 1, @loc)[0];
		set_entity_spec(@armorstand, array(marker: true, visible: false));
		set_mob_name(@armorstand, colorize(@lines[@i]));
		set_name_visible(@armorstand, true);
		@loc['y'] += 0.28;
	}
<<<

/remove [$] = >>>
	if(!$) {
		msg('Usage: /remove [radius] [entityType] [-n]');
		msg('This will preserve named mobs, except when given the -n flag.');
		msg('Special entityType groups: living, hostile, hologram');
	}
	@removenamed = false;
	@spawnEggs = false;
	@type = array('BLAZE', 'CAVE_SPIDER', 'CREEPER', 'DROWNED', 'ELDER_GUARDIAN', 'ENDER_DRAGON', 'ENDERMAN', 'ENDERMITE',
			'EVOKER', 'GUARDIAN', 'GHAST', 'GIANT', 'HOGLIN', 'HUSK', 'MAGMA_CUBE', 'PHANTOM', 'PIGLIN', 'PIGLIN_BRUTE', 
			'SHULKER', 'SILVERFISH', 'SKELETON', 'SLIME', 'SPIDER', 'STRAY', 'WITCH', 'WITHER', 'WITHER_SKELETON', 'VEX',
			'VINDICATOR', 'ZOGLIN', 'ZOMBIE', 'ZOMBIFIED_PIGLIN', 'ZOMBIE_VILLAGER');
	@radius = 64;
	@loc = get_command_block();
	if(is_null(@loc)) {
		@loc = ploc();
	}

	foreach(@arg in parse_args($)) {
		if(is_numeric(@arg)) {
			@radius = min(@arg, 128);
		} else if(@arg === '-n') {
			@removenamed = true;
		} else if(@arg === '-e') {
			@spawnEggs = true;
		} else {
			switch(@arg) {
				case 'living':
					@type = array_merge(@type, array('AXOLOTL', 'BAT', 'CHICKEN', 'COD', 'COW', 'DOLPHIN', 'DONKEY', 'GLOW_SQUID', 'GOAT',
							'HORSE', 'IRON_GOLEM', 'LLAMA', 'MULE', 'MUSHROOM_COW', 'OCELOT', 'PIG', 'PUFFERFISH', 'RABBIT', 'SALMON',
							'SHEEP', 'SKELETON_HORSE', 'SNOWMAN', 'SQUID', 'TROPICAL_FISH', 'TURTLE', 'VILLAGER', 'WOLF', 'ZOMBIE_HORSE'));
				case 'hostile':
					continue();
				case 'hologram':
					@type = 'ARMOR_STAND';
					@removenamed = true;
				default:
					@type = @arg;
			}
		}
	}
	@entities = entities_in_radius(@loc, @radius, @type);
	@count = 0;
	foreach(@e in @entities) {
		@living = is_entity_living(@e);
		if(@removenamed || !@living || !get_mob_name(@e)) {
			if(@spawnEggs && @living) {
				@entitytype = entity_type(@e);
				if(@entitytype == 'MUSHROOM_COW') {
					@entitytype = 'MOOSHROOM';
				}
				pgive_item(array('name': entity_type(@e).'_SPAWN_EGG', 'meta': array('display': get_mob_name(@e))));
			}
			entity_remove(@e);
			@count++;
		}
	}
	msg('Removed '.@count.' of '.array_size(@entities).' in a '.@radius.' radius.');
<<<

*:/ban [$player] [$] = >>>
	if(!has_permission('group.moderator'), die('You do not have permission.'))
	if(!$player, die('Usage: /ban <player> [-t 1d-8h-10m] [message]'))
	@pdata = _pdata($player)
	@bantime = null
	@message = null
	if($) {
		@args = parse_args($)
		if(@args[0] === '-t') {
			@times = split('-', @args[1])
			@bantime = time()
			foreach(@t in @times) {
				switch(substr(@t, length(@t) - 1, length(@t))) {
				case 'd':
					@bantime = @bantime + (86400000 * substr(@t, 0, length(@t) - 1))
				case 'h':
					@bantime = @bantime + (3600000 * substr(@t, 0, length(@t) - 1))
				case 'm':
					@bantime = @bantime + (60000 * substr(@t, 0, length(@t) - 1))
				}
			}
			if(array_size(@args) > 2) {
				@message = array_implode(@args[cslice(2, array_size(@args) - 1)], ' ')
			}
		} else {
			@message = $
		}
	}
	@pdata['ban'] = associative_array()
	if(@bantime, @pdata['ban']['time'] = @bantime)
	if(@message, @pdata['ban']['message'] = @message)
	if(player() !== '~console', @pdata['ban']['by'] = player())
	_store_pdata($player, @pdata)
	if(ponline($player), pkick($player, if(@message, @message, 'Banned. Appeal at FinalScoreMC.com')))
	msg($player.' is now banned.')
	console(player().' banned '.$player.'.'.if(@message, ' (Reason: "'.@message.'")'), false);
<<<
