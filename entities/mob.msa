*:/mob [$cmd] [$id] [$setting] [$] = >>>
	if(!has_permission('command.mob'), die('You do not have permission.'));
	switch($cmd) {
	case 'set':
		@mob = get_value('mob.'.$id);
		if(!@mob, @mob = array());
		switch($setting) {
		case 'type':
			if(!_get_mob($), die('Unknown mob type.'));
			@mob['type'] = $;
			msg('Type set.');

		case 'name':
			if(length($) > 64, die('Name is too long.'));
			@mob['name'] = colorize($);
			msg('Name set.');

		// Single integer values
		case 'age':
		case 'health':
		case 'lifetime':
		case 'onfire':
		case 'targetnear':
			if(!is_integral($)) {
				die('Must be an integer.');
			}
			@mob[$setting] = integer($);
			msg(to_upper($setting).' set to '.@mob[$setting]);

		// Single boolean
		case 'ai':
		case 'tame':
			@mob[$setting] = ($ == 'true');
			msg(to_upper($setting).' set to '.@mob[$setting]);

		case 'gear':
			@mob['gear'] = array(
				'WEAPON': pinv(player(), 0),
				'OFF_HAND': pinv(player(), -106),
				'HELMET': pinv(player(), 103),
				'CHESTPLATE': pinv(player(), 102),
				'LEGGINGS': pinv(player(), 101),
				'BOOTS': pinv(player(), 100)
			);
			msg('Gear set.');

		case 'droprate':
			@args = parse_args($);
			if(array_size(@args) == 1) {
				@mob['droprate'] = array(
					'WEAPON': @args[0],
					'OFF_HAND': @args[0],
					'BOOTS': @args[0],
					'LEGGINGS': @args[0],
					'CHESTPLATE': @args[0],
					'HELMET': @args[0]
				);
			} else {
				@mob['droprate'] = array(
					'WEAPON': @args[0],
					'OFF_HAND': @args[1],
					'BOOTS': @args[2],
					'LEGGINGS': @args[3],
					'CHESTPLATE': @args[4],
					'HELMET': @args[5],
				);
			}
			msg('Droprate set.');

		case 'effect':
			@args = parse_args($);
			if(!is_numeric(@args[0]), die('Must be numeric'));
			if(!array_index_exists(@mob, 'effects')) {
				@mob['effects'] = array();
			}
			if(@args[2] == 0) {
				foreach(@index: @effect in @mob['effects']) {
					if(@effect['id'] == @args[0]) {
						array_remove(@mob['effects'], @index);
						msg('Effect removed');
						break();
					}
				}
			} else {
				array_push(@mob['effects'], array(
					'id': @args[0],
					'strength': @args[1] - 1,
					'seconds': @args[2]
				));
				msg('Effect added');
			}

		case 'tags':
			@mob['tags'] = json_decode($);
			msg('Set the tags to '.$);

		case 'rider':
			@mob['rider'] = $;
			msg('Set mob rider to '.$);

		case 'explode':
			@args = parse_args($);
			if(array_size(@args) < 2, die('Must give two numbers: seconds till explode, explosion strength'));
			if(!is_numeric(@args[0]), die('Must give a number in seconds for the mob to explode.'));
			if(!is_numeric(@args[1]), die('Must give a number for the strength of explosion.'));
			if(@args[1] > 8, die('That explosion is too big.'));
			@mob['explode'] = @args;
			msg('Set mob to explode after '.@args[0].' seconds with strength of '.@args[1]);

		default:
			die('Available settings: type, name, gear, droprate, effect, health, tame, tags, rider, explode, onfire,'
					.' lifetime, targetnear');
		}
		store_value('mob.'.$id, @mob);

	case 'delete':
		if($setting) {
			@mob = get_value('mob.'.$id);
			if($setting === 'effect', @setting = 'effects', @setting = $setting);
			array_remove(@mob, @setting);
			store_value('mob.'.$id, @mob);
			msg(@setting.' deleted from '.$id);
		} else {
			clear_value('mob.'.$id);
			msg('Custom mob deleted.');
		}

	case 'info':
		@mob = get_value('mob.'.$id);
		foreach(@setting: @value in @mob) {
			msg(color('gray').@setting.' '.color('r').@value);
		}

	case 'spawn':
		@mobType = _get_mob($id);
		@mobCount = 1;
		if(is_integral($setting)) {
			@mobCount = integer($setting);
		}
		@loc = pcursor();
		@loc['x'] += 0.5;
		@loc['y'] += 1;
		@loc['z'] += 0.5;
		while(@mobCount > 0) {
			_spawn_mob(@mobType, @loc, player());
			@mobCount--;
		}

	case 'list':
		@mobs = get_values('mob');
		@list = '';
		foreach(@key in array_keys(@mobs)) {
			@list .= split('.', @key)[1].' ';
		}
		msg(color('gray').'CUSTOM MOBS: '.color('r').@list);
	default:
		msg('/mob set <mob> <setting> <value> '.color('gray').'Sets a value to the custom mob');
		msg('/mob delete <mob> [setting] '.color('gray').'Deletes mob or setting');
		msg('/mob info <mob> '.color('gray').'Displays information about custom mob');
		msg('/mob spawn <mob> '.color('gray').'Spawns mob where you\'re looking');
		msg('/mob list '.color('gray').'Lists all custom mobs');

	}
<<<

*:/summon $entity $x $y $z = >>>
	if(!@cmdBlock = get_command_block()) {
		die('This is for commandblocks only.');
	}
	@loc = _relative_coords(@cmdBlock, $x, $y, $z);
	@loc['x'] += 0.5;
	@loc['z'] += 0.5;
	_spawn_mob($entity, @loc);
<<<
