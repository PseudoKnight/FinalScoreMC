# Spawn player head
*:/skull $player = >>>
	if(pworld() == 'dev') {
		pgive_item(player(), '397:3', 1, array('owner': $player))
	}
<<<

# Set the display name for the item in-hand
*:/display [$] = >>>
	if(!has_permission('command.display'), die('You do not have permission.'))
	if(!$, die(color(gold).'Usage: /display <item display name> '.color(gray).'(supports &0 color codes)'))
	@meta = get_itemmeta(null)
	if(is_null(@meta), @meta = array())
	@meta[display] = colorize($)
	set_itemmeta(null, @meta)
<<<

# Set individual lines of lore for the item in-hand
*:/lore [$line] [$] = >>>
	if(!has_permission('command.lore'), die('You do not have permission.'))
	if(!$ || !is_numeric($line) || $line < 1) {
		die(color(gold).'Usage: /lore <line#> <lore string> '.color(gray).'(supports &0 color codes)')
	}
	@meta = get_itemmeta(null)
	if(is_null(@meta), @meta = array())
	if(is_null(@meta[lore])) {
		@meta[lore] = array()
	}
	@meta[lore][$line - 1] = colorize($)
	set_itemmeta(null, @meta)
<<<	

# Spawn an endercrystal at the targeted location.
*:/endercrystal = >>>
	if(!has_permission('command.endercrystal'), die('You do not have permission.'))
	@loc = _relative(pcursor(), 'up')
	set_block_at(@loc, '7:0')
	spawn_entity(ENDER_CRYSTAL, 1, array(@loc[0] + 0.5, @loc[1], @loc[2] + 0.5, @loc[3]))
<<<

# Set the command in the targeted command block (overwrites)
*:/scb [$] = >>>
	# Configure a set of allowed commands and aliases for non-ops
	@allowedcmds = array('/velocity', '/tp', '/sayas', '/testfor', '/playsound', '/setblock', 
	'/tempcart', '/bedspawn', '/give', '/effect', '/warp', '/tellraw', '/testforblock', '/time')
	
	if(!has_permission('command.cb'), die('You do not have permission.'))
	if(!$, die(color(gold).'Usage: /scb </command>'))
	if(!array_contains_ic(@allowedcmds, parse_args($)[0]), die('Allowed commands: '.array_implode(@allowedcmds)))
	@block = pcursor(array(0, 8, 9, 27, 28, 50, 55, 63, 64, 65, 66, 68, 69, 
		70, 71, 72, 75, 76, 77, 96, 131, 132, 143, 147, 148, 149, 150, 157))
	@blocktype = data_name(get_block_at(@block))
	if(@blocktype != 'Command Block', die("You are looking at @blocktype. That is not a command block."))
	@cmd = $
	if(is_alias(@cmd), @cmd = '/runalias '.@cmd)
	set_block_command(@block, @cmd)
	msg('Command set: '.color('green').@cmd)
	msg(color('gold').'You can add to this command with /acb')
<<<

# Add to the command in the targeted command block
*:/acb [$] = >>>
	# Configure a set of allowed commands and aliases for non-ops
	@allowedcmds = array('/velocity', '/tp', '/sayas', '/testfor', '/playsound', '/setblock', 
	'/tempcart', '/bedspawn', '/give', '/effect', '/warp', '/tellraw', '/testforblock', '/time')
	
	if(!has_permission('command.cb'), die('You do not have permission.'))
	if(!$, die(color(gold).'Usage: /acb <additional parameters>'))
	@block = pcursor(array(0, 8, 9, 27, 28, 50, 55, 63, 64, 65, 66, 68, 69, 
		70, 71, 72, 75, 76, 77, 96, 131, 132, 143, 147, 148, 149, 150, 157))
	try(
		@cmd = get_block_command(@block)
	, # catch
		die('You are looking at '.data_name(get_block_at(@block)).'. That is not a command block.')
	)
	@parts = parse_args(@cmd)
	if((@parts[0] == '/runalias' && array_contains_ic(@allowedcmds, @parts[1]))
	|| (array_size(@parts) > 1 && array_contains_ic(@allowedcmds, @parts[1]))) {
		set_block_command(@block, @cmd.' '.$)
		msg('Command set: '.color('green').@cmd.' '.$)
	} else {
		die('You are not allowed to add to this command.')
	}
<<<

# Add relative coordinates to the targeted command block.
# Uses WorldEdit selection position 1 (and 2 for when it's a /fill command)
*:/relcoords = >>>
	if(!has_permission('command.cb'), die('You do not have permission.'))
	@block = pcursor(array(0, 8, 9, 27, 28, 50, 55, 63, 64, 65, 66, 68, 69, 
		70, 71, 72, 75, 76, 77, 96, 131, 132, 143, 147, 148, 149, 150, 157))
	try(
		@cmd = get_block_command(@block)
	, # catch
		die('You are looking at '.data_name(get_block_at(@block)).'. That is not a command block.')
	)
	@loc1 = sk_pos1()
	@x1 = integer(@loc1[0] - @block['x'])
	@y1 = integer(@loc1[1] - @block['y'])
	@z1 = integer(@loc1[2] - @block['z'])
	@parts = parse_args(@cmd)
	if(array_contains_ic(@parts, '/fill')) {
		@loc2 = sk_pos2()
		@x2 = integer(@loc2[0] - @block['x'])
		@y2 = integer(@loc2[1] - @block['y'])
		@z2 = integer(@loc2[2] - @block['z'])
		set_block_command(@block, @cmd.' ~'.@x1.' ~'.@y1.' ~'.@z1.' ~'.@x2.' ~'.@y2.' ~'.@z2.' ')
	} else {
		set_block_command(@block, @cmd.' ~'.@x1.' ~'.@y1.' ~'.@z1.' ')
	}
<<<

# Dye leather armor in-hand with the specified R G B values (0 - 255)
*:/dye [$r] [$g] [$b] = >>>
	if(!has_permission('command.dye'), die('You do not have permission.'))
	if(!$b, die(color(gold).'Usage: /dye <red#> <green#> <blue#> '.color(gray).'(0 - 255)'))
	try(
		set_armor_color(pinfo(player(), 15), array(min(max($r, 0), 255), min(max($g, 0), 255), min(max($b, 0), 255)))
	, # catch
		die(color(gold).'Hold leather armor in your hand and type the command. eg. /dye 255 255 255')
	)
<<<

# Create potions or add potion effects to existing potions
*:/potion [$cmd] [$id] [$strength] [$seconds] = >>>
	if(!has_permission('command.potion'), die('You do not have permission.'))
	if(!$id, die('Usage: /potion <create|add> <potionEffect> <strength> <seconds>'))
	
	@effects = _get_effects()
	@id = $id
	if(!array_index_exists(@effects, @id), die('Available potion effects: '.@effects))
	if(!is_numeric(@id), @id = @effects[@id])
	
	# data affects the color of the potion
	@data = 16
	@effectdata = array(1: 2, 2: 10, 5: 9, 6: 5, 7: 12, 10: 1, 12: 3, 14: 14, 16: 6, 18: 8)
	if(array_index_exists(@effectdata, @id)) {
		@data = @effectdata[@id]
	}
	
	switch($cmd) {
		case 'add':
			@item = pinv(player(), null)
			if(@item[type] != 373, die('You can only add potion effects to potions.'))
			if(is_null(@item[meta]), @item[meta] = array())
			if(!array_index_exists(@item[meta], 'potions'), @item[meta][potions] = array())
			array_push(@item[meta][potions], array(id: @id, strength: $strength - 1, seconds: $seconds))
			set_pinv(array('null': @item))
			
		case 'create':
			set_pinv(array('null': array(type: 373, data: @data, meta: array(
				potions: array(array(id: @id, strength: $strength - 1, seconds: $seconds))
			))))
			
		default: 
			die('Usage: /potion <set|add> <potionEffect> <strength> <seconds>')
	}
<<<

# Enchant tool in hand with specified enchantment
*:/enchant [$type='list'] [$level=1] = >>>
	if(!has_permission('command.enchant'), die('You do not have permission.'))
	# enchantment aliases
	@enchants = array(
		'power': 'ARROW_DAMAGE',
		'flame': 'ARROW_FIRE',
		'infinity': 'ARROW_INFINITE',
		'punch': 'ARROW_KNOCKBACK',
		'sharpness': 'DAMAGE_ALL',
		'baneofarthropods': 'DAMAGE_ARTHROPODS',
		'smite': 'DAMAGE_UNDEAD',
		'efficiency': 'DIG_SPEED',
		'unbreaking': 'DURABILITY',
		'fireaspect': 'FIRE_ASPECT',
		'knockback': 'KNOCKBACK',
		'fortune': 'LOOT_BONUS_BLOCKS',
		'looting': 'LOOT_BONUS_MOBS',
		'respiration': 'OXYGEN',
		'protection': 'PROTECTION_ENVIRONMENTAL',
		'blastprotection': 'PROTECTION_EXPLOSIONS',
		'featherfalling': 'PROTECTION_FALL',
		'fireprotection': 'PROTECTION_FIRE',
		'projectileprotection': 'PROTECTION_PROJECTILE',
		'silktouch': 'SILK_TOUCH',
		'thorns': 'THORNS',
		'aquaaffinity': 'WATER_WORKER',
		'depthstrider': 'DEPTH_STRIDER',
	)
	if(!is_integral($level), die('Enchantment level must be an integer.'))
	if(array_index_exists(@enchants, to_lower($type))) {
		enchant_inv_unsafe(null, @enchants[to_lower($type)], $level)
	} else {
		msg(color('red').'Available enchantments: '.array_keys(@enchants))
	}
<<<

# Remove all enchantments from item in hand
*:/unenchant = >>>
	if(!has_permission('command.enchant'), die('You do not have permission.'))
	@item = pinv(player(), null)
	array_remove(@item, 'enchants')
	array_remove(@item[meta], 'enchants')
	set_pinv(array('null': @item))
<<<

# Overwrite a line on the sign you're looking at.
*:/sign $line [$=''] = >>>
	if(!has_permission('command.sign'), die('You do not have permission.'))
	@sign = pcursor()
	if(!is_sign_at(@sign), die('That is not a sign'))
	@lines = get_sign_text(@sign)
	array_set(@lines, $line - 1, colorize($))
	set_sign_text(@sign, @lines)
<<<

# Add an item into your inventory in the next available slot.
*:/i [$item=0] [$amount=1] = >>>
	if(!has_permission('command.i'), die('You do not have permission.'))
	if($item == 0, die('Usage: /i [id:data] [quantity] '.color(gray).'(supports item names)'))
	@item = split(':', $item)
	if(!is_numeric(@item[0]), @item[0] = data_values(@item[0]))
	if(is_null(@item[0]), die('Unknown item name'))
	if(array_size(@item) == 1, @item[1] = 0)
	if(!is_integral($amount) || $amount < 1, die('Amount must be a positive integer.'))
	try(
		pgive_item(@item[0].':'.@item[1], $amount)
		msg(color('yellow').'You\'ve been given '.$amount.' '.data_name(@item[0].':'.@item[1]).'.')
	, # catch
		msg(color('red').'That item doesn\'t appear to exist.')
	)
<<<

# Set fly mode for players
*:/fly $player $mode = >>>
	if(!has_permission('command.fly'), die('You do not have permission.'))
	try(@player = player($player), die('Who is that? Are they online?'))
	if(@player != player() && !has_permission('command.fly.others'), die('You do not have permission.'))
	if(pworld(@player) != pworld()) {
		die('You do not have permission to set a fly mode in another world.')
	}
	switch(to_lower($mode)) {
		case '1':
		case 'on':
			set_pflight(@player, 1)
			msg('Turned on fly mode for '.@player.'.')
			tmsg(@player, player().' turned on fly mode on you.')
			
		case '0':
		case 'off':
			set_pflight(@player, 0)
			msg('Turned off fly mode for '.@player.'.')
			tmsg(@player, player().' turned off fly mode on you.')
			
		default:
			msg('Usage: /fly <player> <1|0>')
	}
<<<

# Toggle fly mode for yourself
*:/fly = >>>
	if(!has_permission('command.fly'), die('You do not have permission.'))
	if(phas_flight()) {
		set_pflight(player(), 0)
		msg('Turned off flying.')
	} else {
		set_pflight(player(), 1)
		msg('Turned on flying.')
	}
<<<

# Set game mode for players
*:/gamemode [$] = call_alias('/gm '.$)
*:/gm [$] = >>>
	if(!has_permission('command.gm'), die('You do not have permission.'))
	
	@player = player()
	@mode = 'toggle'
	if($) {
		@args = parse_args($)
		try(@player = player(@args[0])
			if(@player != player() && !has_permission('command.gm.others')) {
				die('You do not have permission to set another\'s game mode.')
			} else if(pworld(@player) != pworld()) {
				die('You do not have permission to set another\'s game mode in another world.')
			}
			if(array_size(@args) >= 2) {
				@mode = @args[1]
			}
		
		, # catch
			if(is_numeric(@args[0])) {
				@mode = @args[0]
			} else {
				die('Who is that? Are they online?')
			}
		)
	}
	
	switch(to_lower(@mode)) {
		case '0':
		case 's':
			@mode = 'SURVIVAL'
			
		case '1':
		case 'c':
			@mode = 'CREATIVE'
			
		case '2':
		case 'a':
			@mode = 'ADVENTURE'
			
		case 'toggle':
			if(pmode(@player) == 'SURVIVAL') {
				@mode = 'CREATIVE'
			} else {
				@mode = 'SURVIVAL'
			}
			
		default: 
			die('Usage: /gm <player> [mode] OR /gm [mode]')
	}
	
	set_pmode(@player, @mode)
	if(@player != player(), msg('Set '.@player.'\'s game mode to '.@mode))
<<<

# Set the time of day for this world
*:/time $time = >>>
	if(!has_permission('command.time'), die('You do not have permission.'))
	try(
		set_world_time(pworld(), $time)
	, # catch
		msg('Usage: /time <day|night|sunrise|sunset|0-24000>')
	)
	msg('Set time to '.$time)
<<<

# Heal yourself or others
*:/heal [$player] = >>>
	if(!has_permission('command.heal'), die('You do not have permission.'))
	@player = player()
	if($player) {
		if(!has_permission('command.heal.others'), die('You do not have permission to heal others.'))
		try(@player = player($player), die('Unknown player.'))
		if(pworld(@player) != pworld()) {
			die('You do not have permission to heal a player in another world.')
		}
	}
	set_phunger(@player, 20)
	set_psaturation(@player, 5.0)
	set_phealth(@player, 20)
	tmsg(@player, color('green').'Healed!')
	if(@player != player(), msg(color('green').'Healed!'))
<<<