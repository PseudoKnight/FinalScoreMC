/recompile [$args] [$] = >>>
	@clearGlobal = false; # -g clear all but protected exported global vars
	@clearProtected = false; # -p clear protected global vars
	@force = false; # -f force recompile even if games are running
	@message = '';
	if($args) {
		if($args[0] === '-') {
			foreach(@i in range(1, length($args))) {
				switch($args[@i]) {
					case 'g':
						@clearGlobal = true;
					case 'p':
						@clearProtected = true;
					case 'f':
						@force = true;
				}
			}
		} else {
			@message = $args.' ';
		}
	}
	if($) {
		@message .= $;
	}

	# check if a game is running before recompiling
	@activities = import('activities');
	if(@activities) {
		msg(color('gold').'Currently in progress: '.array_implode(@activities, ', '));
		if(!@force) {
			die(color('red').'Halted recompile due to games in progress.');
		} else {
			foreach(@activity in array_keys(@activities)) {
				export(string(@activity), null);
			}
			# if forcing a recompiles despite games running, we have to clear scoreboards
			@scoreboards = get_scoreboards();
			foreach(@scoreboard in @scoreboards) {
				if(@scoreboard !== 'main') {
					remove_scoreboard(@scoreboard);
				}
			}
		}
	}

	# If we're clearing global variables, let's store and restore some
	if(@clearGlobal && !@clearProtected) {
		@requests = import('requests');
		if(is_array(@requests)) {
			store_value('session.requests', @requests);
		}

		@conv = import('conv');
		if(is_array(@conv)) {
			store_value('session.conv', @conv);
		}

		@ignorelist = import('ignorelist');
		if(is_array(@ignorelist)) {
			store_value('session.ignorelist', @ignorelist);
		}

		@timers = import('timers');
		if(is_array(@timers)) {
			store_value('session.timers', @timers);
		}

		@staffchat = import('staffchat');
		if(is_array(@staffchat)) {
			store_value('session.staffchat', @staffchat);
		}
	}

	foreach(@world in get_worlds()) {
		queue_push(closure(){
			save_world(@world);
		});
	}
	queue_push(closure(){
		save_players();
		set_timeout(50, closure(){
			broadcast(color('yellow').'Recompiling scripts...');
			@start = time();
			run('/recompile -rf'.if(!@clearGlobal, 'g'));
			@stop = time();
			broadcast(color('green').'Done!'.if(@message, ' "'.@message.'"'));
			msg(color('yellow').'Completed in '.(@stop - @start).'ms');
			run('/timings reset');
		});
	});
<<<

/silentjoin [$state] = >>>
	@state = $state;
	if(!@state) {
		@state = if(get_value('silentjoin'), 0, 1);
	}
	switch(@state) {
		case 'on':
		case 'true':
		case 1:
			store_value('silentjoin', true);
			msg('Turned silent join on for admins.');

		case 'off':
		case 'false':
		case 0:
			store_value('silentjoin', false);
			msg('Turned silent join off for admins.');

	}
<<<

/hologram $ = >>>
	@loc = ploc();
	@lines = split(',', $);
	for(@i = array_size(@lines) - 1, @i >= 0, @i--) {
		@armorstand = spawn_entity('ARMOR_STAND', 1, @loc)[0];
		set_entity_spec(@armorstand, array('gravity': false, 'visible': false));
		set_mob_name(@armorstand, colorize(@lines[@i]));
		set_name_visible(@armorstand, true);
		@loc['y'] += 0.28;
	}
<<<


/butcher [$] = call_alias('/remove '.$)
/remove [$] = >>>
	if(!$) {
		msg('Usage: /remove [radius] [entityType] [-n]');
		msg('This will preserve named mobs, except when given the -n flag.');
		msg('entityType groups: living, hostile');
	}
	@removenamed = false;
	@type = array(WITHER, WITCH, CREEPER, SKELETON, SPIDER, GIANT, ZOMBIE, SLIME, GHAST, PIG_ZOMBIE, ENDERMAN,
		CAVE_SPIDER, SILVERFISH, BLAZE, MAGMA_CUBE, ENDER_DRAGON, GUARDIAN, ENDERMITE);
	@radius = 64;
	@loc = get_command_block();
	if(is_null(@loc)) {
		@loc = ploc();
	}

	foreach(@arg in parse_args($)) {
		if(is_numeric(@arg)) {
			@radius = min(@arg, 128);
		} else if(@arg === '-n') {
			@removenamed = true;
		} else {
			switch(@arg) {
				case 'living':
					@type = array(WITHER, BAT, WITCH, CREEPER, SKELETON, SPIDER, GIANT, ZOMBIE, SLIME, GHAST, PIG_ZOMBIE,
					ENDERMAN, CAVE_SPIDER, SILVERFISH, BLAZE, MAGMA_CUBE, ENDER_DRAGON, PIG, SHEEP, COW, CHICKEN, SQUID,
					WOLF, MUSHROOM_COW, SNOWMAN, OCELOT, IRON_GOLEM, VILLAGER, HORSE, RABBIT, GUARDIAN, ENDERMITE);
				case 'hostile':
					continue();
				case 'hologram':
					@type = ARMOR_STAND;
					@removenamed = true;
				default:
					@type = @arg;
			}
		}
	}
	@entities = entities_in_radius(@loc, @radius, @type);
	@count = 0;
	foreach(@e in @entities) {
		if(@removenamed || !is_entity_living(@e) || !get_mob_name(@e)) {
			entity_remove(@e);
			@count++;
		}
	}
	msg('Removed '.@count.' of '.array_size(@entities).' in a '.@radius.' radius.');
<<<

*:/ban [$player] [$] = >>>
	if(!has_permission('group.moderator'), die('You do not have permission.'))
	if(!$player, die('Usage: /ban <player> [-t 1d-8h-10m] [message]'))
	@pdata = _pdata($player)
	@bantime = null
	@message = null
	if($) {
		@args = parse_args($)
		if(@args[0] === '-t') {
			@times = split('-', @args[1])
			@bantime = time()
			foreach(@t in @times) {
				switch(substr(@t, length(@t) - 1, length(@t))) {
				case 'd':
					@bantime = @bantime + (86400000 * substr(@t, 0, length(@t) - 1))
				case 'h':
					@bantime = @bantime + (3600000 * substr(@t, 0, length(@t) - 1))
				case 'm':
					@bantime = @bantime + (60000 * substr(@t, 0, length(@t) - 1))
				}
			}
			if(array_size(@args) > 2) {
				@message = array_implode(@args[cslice(2, array_size(@args) - 1)], ' ')
			}
		} else {
			@message = $
		}
	}
	@pdata['ban'] = associative_array()
	if(@bantime, @pdata['ban']['time'] = @bantime)
	if(@message, @pdata['ban']['message'] = @message)
	if(player() !== '~console', @pdata['ban']['by'] = player())
	_store_pdata($player, @pdata)
	if(ponline($player), pkick($player, if(@message, @message, 'Banned. Appeal at FinalScoreMC.com')))
	msg($player.' is now banned.')
	console(player().' banned '.$player.'.'.if(@message, ' (Reason: "'.@message.'")'))
<<<

*:/unban [$player] = >>>
	if(!has_permission('group.moderator'), die('You do not have permission.'))
	if(!$player, die('Usage: /unban <player>'))
	@pdata = _pdata($player)
	if(!array_index_exists(@pdata, 'ban'), die('That player is not banned.'))
	array_remove(@pdata, 'ban')
	_store_pdata($player, @pdata)
	msg($player.' is now unbanned.')
	console(player().' unbanned '.$player)
<<<

*:/kick [$player] [$='Kicked.'] = >>>
	if(!$player, die('Usage: /kick <player> <reason>'))
	if(!has_permission('group.moderator'), die('You do not have permission.'))
	try(@player = player($player), die('Unknown player.'))
	pkick(@player, $)
	console(player().' kicked '.@player.'. (Reason: "'.$.'")')
<<<

/clearchat = >>>
	for(@i = 0, @i < 20, @i++) {
		broadcast('')
	}
<<<

*:/donation [$] = call_alias('/contribution '. $);
*:/support [$] = call_alias('/contribution ' . $);
*:/contribution $player $amount = >>>
	if(!has_permission('group.admin'), die('You do not have permission to use this command.'))
	@pdata = _pdata($player)
	if(array_index_exists(@pdata, 'support')) {
		@pdata['support'] += $amount
		msg('Added $'.$amount.' to '.$player.'\'s contributions; Total: $'.@pdata['support'].'.')
	} else {
		@pdata['support'] = $amount
		msg('Set '.@pdata['name'].'\'s contribution amount to $'.$amount.'.')
	}
	if(@pdata['group'] === 'member' || @pdata['group'] === 'regular') {
		@pdata['group'] = 'donor';
	}
	_store_pdata($player, @pdata);
<<<

#Set or reset the MOTD
*:/setmotd [$=''] = >>>
	if(!has_permission('group.moderator'), die('You do not have permission to use this command.'))
	store_value('motd', colorize($))
	msg('MOTD set to: '.colorize($))
<<<

#Run commands as other players and show them which command it was
*:/runas $player $ = >>>
	if(!get_command_block() && !has_permission('group.admin'), die('You do not have permission for this command'))
	try(@player = player($player), die('No player found.'))
	if(substr($, 0, 2) === '-s') {
		@cmd = substr($, 3)
	} else {
		@cmd = $
		tmsg(@player, color('a').player().' ran this command for you:')
		tmsg(@player, color('6').@cmd)
	}
	console('\''.@cmd.'\' was run on '.@player)
	scriptas(@player,
		if(!call_alias(@cmd)) {
			sudo(@cmd)
		}
	)
<<<

*:/player $player = >>>
	if(!has_permission('group.moderator'), die('You do not have permission to use this command.'))
	try(
		# ONLINE INFO
		@player = player($player)
		@pdata = _pdata(@player)
		@onlineinfo = pinfo(@player)
		msg(color('gray').'--[ '.color('l').@player.color('gray').' ]-------------------------')
		msg(color('gray').'UUID: '.color('r').puuid(@player));
		msg(color('gray').'Location: '.color('r')._worldname(@onlineinfo[7]).'('.@onlineinfo[7].') '.round(@onlineinfo[1][0]).','.round(@onlineinfo[1][1]).','.round(@onlineinfo[1][2]))
		if(pmode(@player) === 'CREATIVE') {
			msg(color('gray').'Gamemode: '.color('r').'CREATIVE')
		}
		msg(color('gray').'IP: '.color('r').@onlineinfo[3])
		msg(color('gray').'Hostname: '.color('r').@onlineinfo[10])
		@ignorelist = import('ignorelist')
		if(array_index_exists(@ignorelist, @player)) {
			if(array_contains(@ignorelist[@player], 'all')) {
				msg(color('r').'MUTED')
			} else {
				msg(color('gray').'Ignored by: '.color('r').array_implode(@ignorelist[@player], ', '))
			}
		}

	,
		# OFFLINE INFO
		@uuid = _get_uuid(to_lower($player), true, false);
		@pdata = _pdata_by_uuid(replace(@uuid, '-', ''));
		@minutes = (time() - plast_played(@pdata['name'])) / 60000;
		@hours = @minutes / 60
		@days = @hours / 24
		msg(color('gray').'--[ '.color('l').@pdata['name'].color('gray').' ]-------------------------')
		msg(color('gray').'UUID: '.color('r').@uuid);

		if(array_index_exists(@pdata, 'ban'), msg(color('red').'Banned '.color('r')
			.if(array_index_exists(@pdata['ban'], 'by'), 'by '.@pdata['ban']['by'].' ')
			.if(array_index_exists(@pdata['ban'], 'time'), 'temporarily ')
			.if(array_index_exists(@pdata['ban'], 'message'), '- "'.@pdata['ban']['message'].'"')))
		msg(color('gray').'Last Played: '.color('r').
		if(@days >= 3) {
			'Over '.floor(@days).' days ago'
		} else if(@hours >= 2) {
			'Over '.floor(@hours).' hours ago'
		} else {
			floor(@minutes).' minutes ago'
		})
		if(array_index_exists(@pdata, 'homeless'), msg(color('gray').'Homeless: '.color('r').'TRUE'))
		if(array_index_exists(@pdata, 'ips'), msg(color('gray').'IPs: '.color('r').array_implode(@pdata['ips'], ' ')))
		if(array_index_exists(@pdata, 'world'), msg(color('gray').'World: '.color('r').@pdata['world']))
	)
	msg(color('gray').'Group: '.color('r').array_get(@pdata, 'group', 'default'));
	if(array_index_exists(@pdata, 'names'), msg(color('gray').'Aliases: '.color('r').array_implode(@pdata['names'], ', ')))
	if(array_index_exists(@pdata, 'joined'), msg(color('gray').'Joined: '.color('r').@pdata['joined']))
	if(array_index_exists(@pdata, 'approval'), msg(color('gray').'Approved by: '.color('r').@pdata['approval']))
	if(array_index_exists(@pdata, 'coins'), msg(color('gray').'Coins: '.color('r').@pdata['coins']))
	if(array_index_exists(@pdata, 'support'), msg(color('gray').'Support: '.color('r').'$'.@pdata['support']))
<<<

*:/matchip $ip = >>>
	if(!has_permission('group.moderator')) {
		die('You do not have permission.');
	}
	x_new_thread('ip_match', closure(){
		@players = get_values('uuids');
		@msg = 'Matched players for '.$ip.': ';
		foreach(@player in @players) {
			if(array_index_exists(@player, 'ips') && array_contains(@player['ips'], $ip)) {
				@msg .= @player['name'].' ';
			}
		}
		msg(@msg);
	});
<<<

*:/coins [$action] [$player] [$amount] = >>>
	if(!$action) {
		msg(color('gold').round(_acc_balance(player())).' coins')
	} else {
		if(!has_permission('group.moderator'), die('You do not have permission.'))
		if(!$player, die('Usage: /coins <add|sub|info> <player> <amount>'))
		switch($action) {
		case 'add':
		case 'give':
			if(!$amount, die('Usage: /coins <add|sub|info> <player> <amount>'))
			if(_acc_add($player, $amount)) {
				msg('Gave '.$player.' '.$amount.' coins.')
			} else {
				msg('Can\'t find player.')
			}
		case 'sub':
		case 'subtract':
		case 'remove':
			if(!$amount, die('Usage: /coins <add|sub|info> <player> <amount>'))
			if(_acc_subtract($player, $amount)) {
				msg('Subtracted '.$amount.' coins from '.$player)
			} else {
				msg('Can\'t find player.')
			}
		case 'info':
			if(@coins = _acc_balance($player)) {
				msg(color('gold').round(_acc_balance($player)).' coins')
			} else {
				msg('Can\'t find player.')
			}
		}
	}
<<<

*:/mem = >>>
	@maxMem = get_server_info(14);;
	@barMem = round(@maxMem / 77);
	@allocMem = get_server_info(15);
	@freeMem = get_server_info(16);
	@bar = array();
	array_resize(@bar, round((@allocMem - @freeMem) / @barMem), '\u258D');
	@bar[] = color(7);
	array_resize(@bar, array_size(@bar) + round(@freeMem / @barMem), '\u258D');
	@bar[] = color(8);
	array_resize(@bar, array_size(@bar) + round((@maxMem - @allocMem) / @barMem), '\u258D');
	@color = 'green';
	if(@allocMem == @maxMem && @freeMem < @maxMem / 10) {
		@color = 'red';
	} else if(@allocMem - @freeMem > @maxMem / 2) {
		@color = 'yellow';
	}
	msg(round((@allocMem - @freeMem) / 1000000).'MB Used - '
	.round(@allocMem / 1000000).'MB Allocated - '
	.round(@maxMem / 1000000).'MB Max');
	msg(color(@color).array_implode(@bar, ''));
<<<

*:/setrider $player $player2 = >>>
	if(!has_permission('group.moderator')) {
		die('You do not have permission.');
	}
	set_entity_rider(puuid(player($player)), puuid(player($player2)));
<<<
