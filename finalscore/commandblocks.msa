/*
	Send a formatted server message to player from given name.
	Usage Example: runalias /sayas Server @p Welcome to the server.
*/
/sayas $from $to $ = >>>
	tmsg($to, color('gray').$from.': '.color('r').colorize($))
<<<

/* 
	Spawns a temporary minecart that gets removed when the player exits or quits
	Usage Example: runalias /tempcart @p
*/
/tempcart $player = >>>
	if(is_null(@loc = get_command_block()), die())
	@loc = array(@loc[0] + 0.5, @loc[1] + 2, @loc[2] + 0.5, @loc[3])
	@rider = puuid($player)
	@cart = spawn_entity('minecart', 1, @loc)[0]
	set_entity_rider(@cart, @rider)
	if(has_bind($player.'vehicle_leave'), die())
	bind(vehicle_leave, array(id: $player.'vehicle_leave'), array('vehicletype': 'MINECART', 'passengertype': 'PLAYER'), @e, @player = $player) {
		if(@e['player'] == @player) {
			unbind()
			unbind(@player.'quit')
			try(entity_remove(@e['vehicle']))
		}
	}
	bind(player_quit, array(id: $player.'quit'), array('player': $player), @e, @cart = @cart) {
		unbind()
		unbind(player().'vehicle_leave')
		try(entity_remove(@cart))
	}
<<<

/*
	Sets the players respawn location. Similar to the now /spawnpoint command.
	Usage Example: runalias /bedspawn @p ~-1 ~ ~1
*/
/bedspawn $player [$x] [$y] [$z] = >>>
	@cmdblk = get_command_block()
	if($x == '') {
		set_pbed_location($player, ploc($player))
	} else {
		set_pbed_location($player, _relative_coords(@cmdblk, $x, $y, $z))
	}
<<<

*:/give [$player=''] [$item=0] [$amount=1] = >>>
	if(!get_command_block() && !has_permission('group.moderators'), die('You do not have permission to use this command.'))
	if($player == '', die('Usage: /give [player] [id:data] [quantity]'))
	try(@player = player($player), die('Unknown player.'))
	if($item == 0, die('You need to specify an item id or name.'))
	@item = split(':', $item)
	if(!is_numeric(@item[0]), @item[0] = data_values(@item[0]))
	if(is_null(@item[0]), die('Unknown item name'))
	if(!array_index_exists(@item, 1), @item[1] = 0)
	pgive_item(@player, @item[0].':'.@item[1], $amount)
	msg(color('yellow').'You gave '.@player.' '.$amount.' '.data_name(@item[0].':'.@item[1]).'.')
<<<

*:/effect $player $effect [$strength=0] [$length=30] = >>>
	if(get_command_block() || has_permission('command.effect')) {
		try(@player = player($player), @ex, die('Who is that? Are they online?'))
		@effects = _get_effects()
		if(!array_index_exists(@effects, $effect), die('These are the available effect names: '.array_keys(@effects)))
		set_peffect(@player, @effects[$effect], $strength, $length)
	}
<<<

/velocity $player $x $y $z [$double] = >>>
	set_timeout(50, closure(@player = $player){
		@loc = ploc($player);
		make_effect(@loc, 'MOBSPAWNER_FLAMES');
		play_sound(@loc, array('sound': 'GHAST_FIREBALL', 'volume': 2));
		set_pvelocity(@player, $x, $y, $z);
		for(@i = 0, @i < 3, @i++) {
			queue_delay(100, @player.'velocity');
			queue_push(closure(){
				make_effect(ploc(@player), 'MOBSPAWNER_FLAMES');
			}, @player.'velocity');
		}
		if($double) {
			set_timeout($double, closure() {
				set_pvelocity(@player, $x, $y, $z)
			});
		}
	});
<<<

*:/playsound [$sound='random'] [$pitch=1] [$volume=1] [$x] [$y] [$z] = >>>
	if(string_position($sound, '.') >= 0) {
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_named_sound(@loc, array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		} else if(has_permission('group.builders')) {
			play_named_sound(ploc(), array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		}
	} else {
		if($sound == 'random') {
			@sounds = reflect_pull('enum', 'Sound')
			@sound = @sounds[rand(array_size(@sounds))]
			@range = rand(101) / 100
			@pitch = 2 - (1.5 * @range)
		} else {
			@sound = $sound
			@pitch = $pitch
		}
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_sound(@loc, array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
		} else if(has_permission('group.builders')) {
			play_sound(ploc(), array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
			msg(@sound.' @ '.@pitch)
		}
	}
<<<

/setblock $x $y $z $id [$data=0] [$mode='replace'] = >>>
	if(@cmdblk = get_command_block()) {
		@loc = _relative_coords(@cmdblk, $x, $y, $z)
		
		if(!is_numeric(@id = $id)
		&& is_null(@id = data_values($id)), die())
		
		@id = split(':', @id)[0]
		
		switch($mode) {
		case 'replace':
			set_block_at(@loc, @id.':'.$data, false)
		case 'keep':
			if(get_block_at(@loc)[0] == '0') {
				set_block_at(@loc, @id.':'.$data, false)
			}
		case 'destroy':
			if(get_block_at(@loc, @cmdblk[3])[0] != '0') {
				make_effect(@loc, 'STEP_SOUND:'.@id)
			}
			set_block_at(@loc, @id.':'.$data, true)
		case 'fall':
			@block = get_block_at(@loc)
			if(@block[0] != '0') {
				set_block_at(@loc, '0:0')
				spawn_falling_block(@loc, @block)
			}
		}
	}
<<<

/fill $x1 $y1 $z1 $x2 $y2 $z2 $id [$data=0] [$mode='keep'] [$replaceid=''] [$replacedata='0'] = >>>
	if(@cmdblk = get_command_block()) {
		@loc1 = _relative_coords(@cmdblk, $x1, $y1, $z1)
		@loc2 = _relative_coords(@cmdblk, $x2, $y2, $z2)
		
		if(!is_numeric(@id = $id)
		&& is_null(@id = data_values($id))) {
			die()
		}	
		@id = split(':', @id)[0]
		
		if($replaceid != '') {
			if(!is_numeric(@replaceid = $replaceid)
			&& is_null(@replaceid = data_values($replaceid))) {
				die()
			}
			@replaceid = split(':', @replaceid)[0]
		}
		
		switch($mode) {
		case 'replace':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if($replaceid == '' || get_block_at(@x, @y, @z, @cmdblk['world']) == @replaceid.':'.$replacedata) {
							set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], false)
						}
					}
				}
			}
			
		case 'toggle':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						@block = get_block_at(@x, @y, @z, @cmdblk['world'])
						if(@block == @replaceid.':'.$replacedata) {
							set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], false)
						} else if(@block == @id.':'.$data) {
							set_block_at(@x, @y, @z, @replaceid.':'.$replacedata, @cmdblk['world'], false)
						}
					}
				}
			}
			
		case 'keep':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if(get_block_at(@x, @y, @z, @cmdblk['world'])[0] == '0') {
							set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], false)
						}
					}
				}
			}
			
		case 'destroy':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if(get_block_at(@x, @y, @z, @cmdblk['world'])[0] != '0') {
							make_effect(array(@x, @y, @z, @cmdblk['world']), 'STEP_SOUND:'.@id)
						}
						set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], true)
					}
				}
			}
			
		case 'fall':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						@block = get_block_at(@x, @y, @z, @cmdblk['world'])
						if(@block[0] != '0') {
							set_block_at(@x, @y, @z, '0:0', @cmdblk['world'], false)
							spawn_falling_block(array(@x, @y, @z, @cmdblk['world']), @block)
						}
					}
				}
			}
			
		case 'hollow':
		case 'outline':
			console('Hollow and outline modes for /fill are not yet supported.')
		}
	}
<<<