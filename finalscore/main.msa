*:/transfer horse $player = >>>
	try(@player = player($player), die(color('red').'Unknown player.'))
	@owner = player().''
	bind('player_interact_entity', array('id': 'transferhorse'.@owner.@player), array('clicked': 'HORSE'), @e, @player = @player, @owner = @owner,
		if(player() != @owner, die())
		cancel()
		unbind()
		if(get_mob_owner(@e['id']) != player(), die(color('red').'This horse belongs to '.get_mob_owner(@e['id']).'.'))
		tame_mob(@player, @e['id'])
		msg(color('green').'The horse now belongs to '.@player.'.')
		if(ponline(@player)) {
			tmsg(@player, color('green').player().' gave a horse to you.')
		}
	)
	msg(color('yellow').'Right-click the horse you wish to give to '.@player.'.')
<<<

*:/top = >>>
  if(!pisop(), die())
  @loc = ploc()
  @loc = get_highest_block_at(@loc)
  @loc = array(@loc[0], @loc[1], @loc[2], @loc[3]) # let's ignore x y z for safety
  while(@loc[1] > 0,
    if(get_block_info(@loc)['solid']) {
      set_ploc(array(@loc[0] + 0.5, @loc[1], @loc[2] + 0.5, @loc[3]))
      break()
    } else {
      @loc[1] = @loc[1] - 1
    }
  )
<<<

*:/share $player $ = >>>
	@shareables = array('horses')
	@types = parse_args($)
	foreach(@types, @type,
		if(!array_contains(@shareables, @type)) {
			die(color('red').'Unknown type: '.@type.'\nShareable: '.@shareables)
		}
	)
	try(@player = player($player).'', die('Unknown player.'))
	export('share'.@player, array(
		'player': player(),
		'types': @types
	))
	msg(color('yellow').'Requested '.@player.' to share '.array_implode(@types, ' and ').'.')
	tmsg(@player, color('yellow').player().' requested to share '.array_implode(@types, ' and ').'. Type "/share confirm".')
<<<

*:/share confirm = >>>
	@share = import('share'.player())
	if(!@share, die('No shares to confirm.'))
	
	@pdata = get_value('player.'.to_lower(@share['player']))
	if(!array_index_exists(@pdata, 'shared'), @pdata['shared'] = array())
	if(!array_index_exists(@pdata['shared'], player()), @pdata['shared'][player()] = array())
	foreach(@share['types'], @type,
		array_push(@pdata['shared'][player()], @type)
	)
	store_value('player.'.to_lower(@share['player']), @pdata)
	tmsg(@share['player'], color('green').'Now sharing '.array_implode(@share['types'], ' and ').' with '.player().'.')
	
	@pdata = get_value('player.'.to_lower(player()))
	if(!array_index_exists(@pdata, 'shared'), @pdata['shared'] = array())
	if(!array_index_exists(@pdata['shared'], @share['player']), @pdata['shared'][@share['player']] = array())
	foreach(@share['types'], @type,
		array_push(@pdata['shared'][@share['player']], @type)
	)
	store_value('player.'.to_lower(player()), @pdata)
	msg(color('green').'Now sharing '.array_implode(@share['types'], ' and ').' with '.@share['player'].'.')
	
	export('share'.player(), null)
<<<

*:/unshare $player $ = >>>
	@shareables = array('horses')
	@types = parse_args($)
	foreach(@types, @type,
		if(!array_contains(@shareables, @type)) {
			die(color('red').'Unknown type: '.@type.'\nShareable: '.@shareables)
		}
	)
	try(@player = player($player), 
		if(get_value('player.'.to_lower($player))) {
			@player = $player
		} else {
			die('Unknown player.')
		}
	)
	
	@pdata = get_value('player.'.to_lower(player()))
	if(!array_index_exists(@pdata, 'shared') || !array_index_exists(@pdata['shared'], @player), die(color('gold').'You are not sharing anything with this player.'))
	foreach(@types, @type,
		if(!array_contains(@pdata['shared'][@player], @type)) {
			die(color('gold').'You are not sharing '.@type.' with '.@player)
		} else {
			array_remove_values(@pdata['shared'][@player], @type)
			if(array_size(@pdata['shared'][@player]) < 1) {
				array_remove(@pdata['shared'], @player)
				if(array_size(@pdata['shared']) < 1) {
					array_remove(@pdata, 'shared')
				}
			}
		}
	)
	store_value('player.'.to_lower(player()), @pdata)
	msg(color('green').'You are no longer sharing '.array_implode(@types, ' and ').' with '.@player.'.')
	
	@pdata = get_value('player.'.to_lower(@player))
	if(!array_index_exists(@pdata, 'shared') || !array_index_exists(@pdata['shared'], player()), die(color('gold').'They are not sharing anything with you.'))
	foreach(@types, @type,
		if(!array_contains(@pdata['shared'][player()], @type)) {
			die(color('gold').'They are not sharing '.@type.' with you.')
		} else {
			array_remove_values(@pdata['shared'][player()], @type)
			if(array_size(@pdata['shared'][player()]) < 1) {
				array_remove(@pdata['shared'], player())
				if(array_size(@pdata['shared']) < 1) {
					array_remove(@pdata, 'shared')
				}
			}
		}
	)
	store_value('player.'.to_lower(@player), @pdata)
	if(ponline(@player)) {
		tmsg(@player, color('green').player().' is no longer sharing '.array_implode(@types, ' and ').' with you.')
	}
<<<

*:/kill $ = >>>
	@player = player()
	if($) {
		@message = parse_args($)
		if(ponline(@message[0])) {
			if(!has_permission('group.moderators'), die('You do not have permission.'))
			@player = @message[0]
			@message = array_implode(@message[cslice(1, array_size(@message) - 1)])
		} else {
			@message = $
		}
		bind('player_death', array('priority': 'highest'), array('player': @player), @e, @message = @message,
			modify_event('death_message', player().' '.@message)
			unbind()
		)
	}
	set_phealth(@player, 0)
<<<

*:/compass [$target] [$id] = >>>
	if(!$target) {
		die('Usage: /compass [here|spawn|home|player [playerName]]')
	}
	switch($target
	, 'spawn',
		set_compass_target(get_spawn())
		msg('Compass is now pointing to '._worldname(pworld()).'\'s spawn.')
		
	, 'player',
		if(!$id, die('You must specify a player to point to.'))
		try(@player = player($id), die('Unknown player.'))
		if(pworld(@player) != pworld(), die('Player is not in this world.'))
		set_compass_target(ploc(@player))
		msg('Compass is now pointing to '.@player.'\'s last location.')
	
	, 'home',
		if($id) {
			@pdata = get_value('player.'.to_lower($id))
			if(!@pdata, die('Unknown player.'))
		} else {
			@pdata = get_value('player.'.to_lower(player()))
		}
		if(!array_index_exists(@pdata, 'homes'), die('No home to target.'))
		if(!array_index_exists(@pdata['homes'], pworld()), die('No home in this world to target.'))
		set_compass_target(array(
			@pdata['homes'][pworld()][0],
			@pdata['homes'][pworld()][1],
			@pdata['homes'][pworld()][2],
			pworld()
		))
		msg('Compass is now pointing to '.if($id, $id.'\'s', 'your').' home.')
		
	, 'here',
		set_compass_target(ploc())
		msg('Compass is now pointing to this location.')

	)
<<<

#Runs the help procedure to list or display entries
*:/help [$selection='help'] = >>>
	@help = array(
		'rules':
		'- Do NOT break anything someone else placed unless otherwise specified.\n'.
		'- Do NOT take anything from a chest that you did not place there, unless otherwise specified or was generated in the world naturally.\n'.
		'- Do NOT harass, call others names, use hate speech, spam, or use excessive adult language in chat.\n'.
		'- Do NOT actively use cheat modifications to do things like fly or look through walls.\n'.
		'- DO respect other players and apologize if you make a mistake, as we have all made them.',
		'homes': 'You can have one home per world. Set them by typing "/sethome", then "/home" to teleport to them. You can teleport to your homes on other worlds with "/home worldname", or homes of other players with "/home playername".',
		'messages': 'Send a private message to another player with "/msg <playername> <message>" or "@playername <message>". You can use "/r <message>" for a reply.',
		'spawn': 'There is one central spawn on each world, including nethers. Type "/spawn" to teleport to the spawn of the world you are in or follow it with a world name to teleport there.',
		'stargate': 'Stargates are special portals you build to teleport within a network of locations. There is a more detailed guide on the website. But to make one, first build the gate as seen (without sign or button), place a sign on the correct location, then type the gate name on line one and the gate network name on line three.',
		'private-chests': 'You can put a [private] sign on a chest, furnace, and the block above/below doors. The following lines after [private] should contain the players you want to give access.',
		'shops': 'Chest shops allow players to buy and sell different items using currency. (g: gold, d: diamond, i: iron, e: emerald) Right click the SIGN with the currency in hand to BUY. Shop owners can edit shop transaction rates with the "/shop edit <transaction line>" command. Players can search for available items with "/shop list <item>". There\'s a detailed guide on the website.',
		'website': 'The website is at >>> http://finalscoremc.com <<< There you can find a command reference, guides, videos, live maps, and more.',
		'live-map': '>>> http://mc.finalscoremc.com:25966 <<< The website has a handy live map that shows the location of players and their homes, among other things.',
		'staff': 'You can get help from anyone with a blue name. Current staff members are: PseudoKnight, Scottyd_Utah, Nefyoni, asdialed, fredwaffles, Raymond_II, TrulyAnnoying',
		'plugins': 'Type "/plugins" for a full list of plugins installed, or check the website for more details.',
		'permissions': 'We currently have 7 groups: Everyone (new players with minor restrictions), Regulars, Donors (green names or diamonds), Builders (orange), Engineers (orange), Moderators (blue), and Administrators (blue). New players get bumped up to the Regulars group after some time, as long as they\'re not causing trouble.',
		'mumble': 'Everyone is welcome to use our voice chat server using Mumble. The server is at mum.finalscoremc.com with port 64758. You can get Mumble at >>> http://mumble.sourceforge.net <<<',
		'regions': 'Regions are protected zones where only owners and members can build or access chests. You can create your own region by using a golden axe (or commands), left and right clicking to select a cuboid for the region, then use "/rg claim <regionid>". More details are on the website.',
		'whitelist': 'You can get on the whitelist by asking a staff member, a friend who is already a regular, or requesting it on the http://myextralife.com whitelist forum thread.',
		'worlds': 'There are three primary worlds: Alpha (Plaza at spawn), Delta (Final City at spawn), and Gamma (Gamma City at spawn). In addition, there are three respective nether dimensions and one End dimension. You can type "/mv who" to see which worlds players are on.',
		'world-seeds': 'These are the seeds for the three main worlds -- Alpha: -621778714517541268, Delta: -8443156782283251243, Gamma: -754633420005903009.'
	)
	if($selection == 'help') {
		msg(color('a').'Get help on any of these topics:')
		msg(color('6').array_implode(array_keys(@help), ' ')),
		try(msg(to_upper($selection).': '.color('a').@help[to_lower($selection)]), @ex, msg(color('c').'Unknown entry. Type "/help" to find available entries.'))
	}
<<<
*:/rules = call_alias('/help rules')

# APPROVAL SYSTEM #
*:/approve [$player] = >>>
	if(!has_permission('group.regulars'), die('You do not have permission to use this command.'))
	try(@player = $player, die('Unknown player.'))
	if(!ponline($player), die('That player is not online. Did you misspell their name?'))
	if(array_contains_ic(pgroup($player), 'Everyone'), die('Player already exists in whitelist.'))
	sudo('/perm player setgroup '.$player.' Everyone')
	tmsg($player, 'You have been added to the whitelist by ', color('e'), player(), color('f'), '.')
	if(!has_permission('group.moderators')) {
		@pdata = get_value('player.'.to_lower(@player))
		@pdata['approval'] = player()
		store_value('player.'.to_lower(@player), @pdata)
	}
<<<

# Put whatever they have in their hand onto their head. This shouldn't dupe.
*:/hat = >>>
	if(pinv(player(), null) == null, die(color('gold').'You need to hold something before you can put it on your head.'))
	if(pinv(player(), 103) != null, die(color('gold').'You already have something on your head.'))
	@inv = pinv(player(), null)
	if(@inv['qty'] == 1) {
		set_pinv(player(), array(null: null))
		set_pinv(player(), array(103: @inv))
	} else {
		array_set(@inv, 'qty', @inv['qty'] - 1)
		set_pinv(player(), array(null: @inv, 103: array('type': @inv['type'], 'data': @inv['data'], 'qty': 1)))
	}
	msg(color('gold').'Fancy!')
<<<

# PLAYER LISTS #
*:/who = >>>
	@list = array(array('Administrators', 'b', ''), array('Moderators', 'b', ''), array('Engineers', '6', ''), array('Builders', '6', ''), array('Donors', 'a', ''), array('Regulars', 'e', ''), array('Everyone', 'e', ''), array('Default', 'f', ''))
	@allplayers = all_players()
	foreach(@allplayers, @player,
		for(@i = 0, @i < array_size(@list), @i++,
			if(array_contains_ic(pgroup(@player), @list[@i][0])) {
				@list[@i][2] = @list[@i][2].' '.pinfo(@player, 4)
				break()
			}
		)
	)
	for(@i = 0, @i < array_size(@list), @i++,
		if(@list[@i][2] != '') {
			msg(color(@list[@i][1]).@list[@i][0].color(7).': '.@list[@i][2])
		}
	)
<<<
*:/list = call_alias('/who')

# DICE ROLLING #
*:/roll [$sides=6] = >>>
	if($sides > 100, die(color('a').'[Dice] '.color('f').'There\'s a limit of 100 sides.'))
	if($sides < 2, die(color('a').'[Dice] '.color('f').'There\'s a minimum of 2 sides.'))
	if($sides == 2) {
		broadcast(color('a').'[Coin] '._colorname(player()).player().color('f').' flipped a coin and got '.if(rand(1) == 0, 'heads.', 'tails.'))
	} else {
		broadcast(color('a').'[Dice] '._colorname(player()).player().color('f').' rolled a '.color('a').(rand($sides) + 1).' on a '.$sides.'-sided die.')
	}
<<<

*:/rg flag $region $ = >>> 
	assign(@flag, parse_args($)) 
	if(has_permission('group.moderators') || @flag[0] != 'mob-spawning') {  
		run('/rg flag '.$region.' '.$) 
		die() 
	}
	try(assign(@region, sk_region_info($region, pworld())), die('That region doesn\'t exist.')) 
	if(!array_contains_ic(@region[1], player()), die('You do not own this region.')) 
	foreach(@region[3], @flagname, 
		if(@flagname[0] == 'mob-spawning') { 
			sudo('/rg flag '.$region.' mob-spawning') 
			break()
		} 
	)
	ifelse(!array_index_exists(@flag, 1) || @flag[1] == 'allow', 
		sudo('/rg flag '.$region.' deny-spawn')
	, @flag[1] == 'deny', 
		sudo('/rg flag '.$region.' deny-spawn CREEPER,ENDERMAN,SKELETON,SPIDER,ZOMBIE,SLIME') 
	)
<<<

*:/region flag $region [$] = >>>
	call_alias('/rg flag '.$region.' '.$)
<<<

# Rename your worldguard region
*:/rg rename $from $to = >>>
	try(@region = sk_region_info($from, pworld()), die('That region doesn\'t exist.'))
	if(!has_permission('group.moderators') && not(array_contains_ic(@region[1], player())), die('You do not own this region.'))
	try(@to = reg_match('[a-zA-Z0-9-]{1,32}', $to)[0], die('You can only use alphanumeric and dash symbols.'))
	if(array_contains_ic(sk_all_regions(pworld()), @to), die('A region by that name already exists.'))
	sudo('/rg select '.$from)
	sudo('/rg define '.@to.' '.array_implode(@region[1]))
	sudo('/rg pri '.@to.' '.@region[4])
	foreach(@region[3], @flag,
		sudo('/rg flag '.@to.' '.@flag[0].' '.@flag[1])
	)
	if(gt(array_size(@region[2]), 0), sudo('/rg addmember '.@to.' '.array_implode(@region[2])))
	sudo('//sel')
	sudo('/rg remove '.$from)
<<<

# Colour codes
*:/colors = msg(colorize('&00&11&22&33&44&55&66&77&88&99&aa&bb&cc&dd&ee&ff'))
*:/colours = call_alias('/colors')

# COIN COMMANDS #

*:/weather $type = >>>
	if(_acc_balance(player()) < 1, die('You do not have any coins.'))
	if(pworld() == 'outworld', die('You cannot do this in the outworld.'))
	switch($type
	, 'stormy',
		storm(true)
		_acc_subtract(player(), 1)
		msg(color('gold').'-1 coin')
		msg(color('aqua').'You summoned a storm.')
	, 'sunny',
		storm(false)
		_acc_subtract(player(), 1)
		msg(color('gold').'-1 coin')
		msg(color('aqua').'You calmed the storm.')
	, #else 
		msg('Accepts \'stormy\' or \'sunny\'')
	)
<<<