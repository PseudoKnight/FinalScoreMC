*:/build [$] = >>>
	@args = parse_args($);
	@region = '';
	@state = 'toggle';
	if(array_size(@args) == 2) {
		if(sk_region_exists(pworld(), @args[0])) {
			@region = @args[0];
			@state = @args[1];
		} else if(sk_region_exists(pworld(), @args[1])) {
			@region = @args[1];
			@state = @args[0];
		} else {
			die(color('gold').'Unknown region.');
		}
	} else if(array_size(@args) == 1) {
		if(sk_region_exists(pworld(), @args[0])) {
			@region = @args[0];
		} else {
			@region = array_get(sk_current_regions(), -1, '');
			@state = @args[0];
		}
	} else {
		@region = array_get(sk_current_regions(), -1, '');
	}

	if(!@region) {
		die(color('gold').'Unknown region.');
	} else if((!array_contains(sk_region_owners(@region, pworld())['players'], puuid())
	&& !has_permission('group.moderator'))) {
		die(color('gold').'You do not own this region.');
	}

	if(@state === 'toggle') {
		foreach(@flag in sk_region_info(@region, pworld(), 3)) {
			if(@flag[0] === 'block-break') {
				@state = if(@flag[1] === 'DENY', 'allow', 'deny');
				break();
			}
		}
		if(@state === 'toggle') {
			@state = 'deny';
		}
	}

	switch(@state) {
		case 'on':
		case 'allow':
		case 'true':
			sk_region_flag(pworld(), @region, 'block-break', 'ALLOW', 'members');
			sk_region_flag(pworld(), @region, 'block-place', 'ALLOW', 'members');
			msg('Members are now allowed to build in '.@region);

		case 'off':
		case 'deny':
		case 'false':
			sk_region_flag(pworld(), @region, 'block-break', 'DENY', 'nonowners');
			sk_region_flag(pworld(), @region, 'block-place', 'DENY', 'nonowners');
			msg('Members are now prohibited from building in '.@region);

		default:
			die(color('gold').'Unknown state.');
	}
<<<

*:/rg $ = run_cmd('/region '.$);

*:/region $ = >>>
	@args = parse_args($);
	if(array_size(@args) < 2) {
		run('/region '.$);
		die();
	}
	switch(@args[0]) {
		case 'flag':
		case 'f':
			try {
				@region = @args[1];
				@setting = @args[2];
				@value = @args[3];
				if(has_permission('group.moderator') && @setting !== 'infinite-dispensers') {
					run('/region '.$);
					die();
				}
				try {
					@flags = sk_region_info(@region, pworld(), 3);
				} catch(PluginInternalException @ex) {
					die(color('GOLD').'That region doesn\'t exist.');
				}
				try {
					@owners = sk_region_owners(@region, pworld());
				} catch(PluginInternalException @ex) {
					die(color('GOLD').'That region doesn\'t exist.');
				}
				switch(@setting) {
					case 'mob-spawning':
						foreach(@flagname in @flags) {
							if(@flagname[0] === 'mob-spawning') {
								sudo('/region flag '.@region.' mob-spawning');
								break();
							}
						}
						if(@value === 'allow') {
							sudo('/region flag '.@region.' deny-spawn');
						} else if(@value === 'deny') {
							sudo('/region flag '.@region.' deny-spawn CREEPER,ENDERMAN,SKELETON,SPIDER,ZOMBIE,SLIME,WITCH');
						}

					case 'infinite-dispensers':
						if(_is_survival_world(pworld())) {
							die(color('GOLD').'You cannot toggle infinite dispensers in this world.');
						}
						@commands = '';
						foreach(@flag in @flags) {
							if(@flag[0] == 'blocked-cmds') {
								@commands = @flag[1];
								break();
							}
						}
						@commandArray = split(', ', substr(@commands, 1, length(@commands) - 1));
						if(@value == 'allow') {
							if(array_contains(@commandArray, '/finitedispensers')) {
								array_remove_values(@commandArray, '/finitedispensers');
								msg('Set dispensers to infinite.');
							} else {
								die();
							}
						} else if(@value == 'deny') {
							if(!array_contains(@commandArray, '/finitedispensers')) {
								@commandArray[] = '/finitedispensers';
								msg('Set dispensers to finite.');
							} else {
								die();
							}
						} else {
							die();
						}
						sk_region_flag(pworld(), @region, 'blocked-cmds', array_implode(@commandArray, ', '));

					default:
						run('/region '.$);
				}
			} catch(Exception @ex) {
				// All else fails, run the original command
				run('/region '.$);
			}

		case 'rename':
			@from = @args[1];
			@to = @args[2];
			if(!sk_region_exists(pworld(), @from)) {
				die(color('GOLD').'That region doesn\'t exist.');
			}
			if(!has_permission('group.moderator')
			&& !array_contains(sk_region_owners(@from, pworld())['players'], puuid())) {
				die(color('GOLD').'No permission.');
			}
			if(!reg_match('^[a-zA-Z0-9-_]{1,32}$', @to)[0]) {
				die(color('GOLD').'You can only use alphanumeric characters and underscores/dashes.');
			}
			if(sk_region_exists(pworld(), @to)) {
				 die(color('GOLD').'A region by that name already exists.');
			}
			sk_region_rename(pworld(), @from, @to);
			msg('Renamed '.@from.' to '.@to.'.');

		case 'redefine':
		case 'update':
		case 'move':
			if(has_permission('group.moderator') || array_size(@args) < 2) {
				run('/region '.$);
				die();
			}
			@region = @args[1];
			try {
				@owners = sk_region_owners(@region, pworld());
			} catch(PluginInternalException @ex) {
				die(color('GOLD').'That region doesn\'t exist.');
			}
			if(!array_contains(@owners['players'], puuid())) {
				die(color('GOLD').'You do not own this region.');
			}
			@p1 = sk_pos1();
			@p2 = sk_pos2();
			if(is_null(@p1) || is_null(@p2)) {
				die(color('GOLD').'Please make a selection.');
			}
			if(!has_permission('group.regular') && abs(@p1['x'] - @p2['x']) * abs(@p1['z'] - @p2['z']) > 10000) {
				die(color('GOLD').'Selection too large. (100m^2 limit) Ask staff if you need a larger region.');
			}

			if(pworld() == 'dev' && !has_permission('group.builder')
			&& (!array_contains(sk_regions_at(@p1), 'plots') || !array_contains(sk_regions_at(@p2), 'plots'))) {
				die(color('GOLD').'You may not expand your region outside of the "plots" region.');
			}

			sk_region_create(pworld(), @region.'-temp', array(@p1, @p2));
			@regions = sk_region_intersect(pworld(), @region.'-temp');
			sk_region_remove(pworld(), @region.'-temp');
			foreach(@rg in @regions) {
				if(@rg == 'plots') {
					continue();
				}
				@owners = sk_region_owners(@rg, pworld());
				if(!array_contains(@owners['players'], puuid())) {
					die(color('GOLD').'This selection overlaps a region you do not own.');
				}
			}
			sudo('/rg redefine '.@region);

		case 'claim':
			if(pworld() != 'dev') {
				run('/region '.$);
				die();
			}
			@p1 = sk_pos1();
			@p2 = sk_pos2();
			if(!@p1 || !@p2) {
				die(color('GOLD').'You must select two points to claim a region.');
			}
			@p1['y'] = 0;
			@p2['y'] = 255;
			if(!array_contains(sk_regions_at(@p1), 'plots')
			|| !array_contains(sk_regions_at(@p2), 'plots')) {
				die(color('GOLD').'You can only claim regions within the green "plots" region in the southeast.');
			}
			if(abs(@p1['x'] - @p2['x']) * abs(@p1['z'] - @p2['z']) > 10000) {
				die(color('GOLD').'Selection too large. (100m^2 limit) Ask staff if you need a larger region.');
			}
			@region = @args[1];
			if(sk_region_exists(pworld(), @region)) {
				 die(color('GOLD').'A region by that name already exists.');
			}
			sk_region_create(pworld(), @region, array(@p1, @p2));
			@regions = sk_region_intersect(pworld(), @region);
			if(array_size(@regions) != 1) {
				sk_region_remove(pworld(), @region);
				array_remove_values(@regions, 'plots');
				die(color('GOLD').'Selection is overlapping one or more regions. '.@regions);
			}

			// add walls
			@data = rand(0, 16);
			if(@data == 5) {
				@data == 14;
			}
			@block = '159:'.@data;
			@minX = min(@p1['x'], @p2['x']);
			@minZ = min(@p1['z'], @p2['z']);
			@maxX = max(@p1['x'], @p2['x']);
			@maxZ = max(@p1['z'], @p2['z']);
			for(@x = @minX, @x <= @maxX, @x++) {
				queue_push(closure(){
					set_block_at(@x, 63, @minZ, @block, 'dev');
					set_block_at(@x, 63, @maxZ, @block, 'dev');
				});
			}
			for(@z = @minZ, @z <= @maxZ, @z++) {
				queue_push(closure(){
					set_block_at(@minX, 63, @z, @block, 'dev');
					set_block_at(@maxX, 63, @z, @block, 'dev');
				});
			}

			sk_region_addowner(@region, pworld(), puuid());
			sk_region_setpriority(pworld(), @region, 1);
			msg(color('green').'Successfully created Dev plot by the name "'.@region.'" here.');

		default:
			run('/region '.$);
	}
<<<
