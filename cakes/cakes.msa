### CAKES ###

*:/cake [$cmd] [$] = >>>
	switch($cmd) {
	case 'list':
		@cakes = get_value('cakeinfo')
		@names = array('challenge': '', 'secret': '')
		@count = array('challenge': 0, 'secret': 0)
		@total = array('challenge': 0, 'secret': 0)
		if($) {
			@player = $
		} else {
			@player = player()
		}
		foreach(@id: @cake in @cakes) {
			@total[@cake['type']] += 1
			if(array_index_exists(@cake['players'], @player)) {
				@count[@cake['type']] += 1
				@names[@cake['type']] .= color('gray').@id.'('.array_size(@cake['players']).') '
			} else {
				@names[@cake['type']] .= color('r').@id.'('.array_size(@cake['players']).') '
			}
		}
		if($) {
			msg(color('gold').'CAKES ACHIEVED BY '.to_upper(@player).'. (#) of other players')
		} else {
			msg(color('gold').'CAKES YOU\'VE ACHIEVED. (#) of other players')
		}
		msg(color('green').color('l').'Challenge Cakes '.color('green').'('.@count['challenge'].'/'.@total['challenge'].') '.color('r').@names['challenge'])
		msg(color('green').color('l').'Secret Cakes '.color('green').'('.@count['secret'].'/'.@total['secret'].') '.color('r').@names['secret'])

	case 'info':
		if(!$) {
			@cakes = get_value('cakes')
			@cursorloc = pcursor()
			foreach(@key: @loc in @cakes) {
				if(@loc[0] == @cursorloc[0]
				&& @loc[1] == @cursorloc[1]
				&& @loc[2] == @cursorloc[2]) {
					@id = @key
					break()
				}
			}
			if(!@id) {
				die('No cake prize found.')
			}
		} else {
			@id = $
		}
		@cake = get_value('cakeinfo')[@id]
		msg('Cake info for "'.@id.'":')
		if(@cake['type'] == 'challenge') {
			msg(color('green').@cake['coins'].color('r').' coins.')
			@players = ''
			foreach(@player: @time in @cake['players']) {
				@players .= @player.' '
			}
			msg('Players: '.@players)
		} else if(@cake['type'] == 'secret') {
			msg(color('green').@cake['coins'].color('r').' coins.')
			@players = ''
			foreach(@player: @time in @cake['players']) {
				@players .= @player.' '
			}
			msg('Players: '.@players)
		} else {
			msg('Unknown cake type.')
		}

	case 'set':
		if(!array_contains(pgroup(), 'moderators'), die('You do not have permission to use cake commands.'))
		if(!$) {
			die('/cake set <id> <coins> [type]')
		}
		@loc = pcursor()
		@cakes = get_value('cakes')
		@args = parse_args($)
		@id = @args[0]
		
		if(!array_index_exists(@cakes, @id) && get_block_at(@loc) != '92:0') {
			die('That doesn\'t appear to be a cake. Is it obstructed by a sign or other partial block?')
		}
		
		if(!@cakes) {
			@cakes = associative_array()
		}
		
		if(array_size(@args) < 2) {
			die('Usage: /cake set <id> <coins> [type]')
		}
		
		if(!array_index_exists(@cakes, @id)) {
			@cakes[@id] = array(integer(@loc[0]), integer(@loc[1]), integer(@loc[2]), @loc[3])
		}
		
		@coins = @args[1]
		
		if(array_size(@args) == 3) {
			@type = to_lower(@args[2])
		} else {
			@type = 'challenge'
		}
		
		if(@type != 'secret' && @type != 'challenge') {
			die(color('red').'You can only have "secret" and "challenge" cake types.')
		}

		@cakeinfo = get_value('cakeinfo')
		if(array_index_exists(@cakeinfo, @id)) {
			@cake = @cakeinfo[@id]
		} else {
			@cake = associative_array()
			@cake['players'] = associative_array()
		}
		
		@cake['coins'] = @coins
		@cake['type'] = @type
		@cakeinfo[@id] = @cake
		store_value('cakes', @cakes)
		store_value('cakeinfo', @cakeinfo)
		msg('Set '.@type.' cake "'.@id.'" ('.@coins.' coins)')


	case 'move':
		if(!array_contains(pgroup(), 'moderators'), die('You do not have permission to use cake commands.'))
		if(!$, die('This needs an id.'))
		@loc = pcursor()
		if(get_block_at(@loc) != '92:0', die('That doesn\'t appear to be a cake. Is it obstructed by a sign or other partial block?'))

		@cakes = get_value('cakes')
		if(!array_index_exists(@cakes, $)) {
			die('There doesn\'t appaar to be a cake by that id.')
		}
		array_set(@cakes, $, array(integer(@loc[0]), integer(@loc[1]), integer(@loc[2]), @loc[3]))
		store_value('cakes', @cakes)
		msg('Set '.$.' cake to this new location.')

	case 'delete':
		if(!array_contains(pgroup(), 'moderators'), die('You do not have permission to use cake commands.'))
		@cakes = get_value('cakes')
		if(!$) {
			@cursorloc = pcursor()
			foreach(@key: @loc in @cakes) {
				if(@loc[0] == @cursorloc[0]
				&& @loc[1] == @cursorloc[1]
				&& @loc[2] == @cursorloc[2]) {
					@id = @key
					break()
				}
			}
			if(!@id) {
				die('No cake prize found.')
			}
		} else {
			@id = $
		}
		if(!array_index_exists(@cakes, @id)) {
			die('No cake by that ID found.')
		}
		array_remove(@cakes, @id)
		@cakeinfo = get_value('cakeinfo')
		array_remove(@cakeinfo, @id)
		store_value('cakes', @cakes)
		store_value('cakeinfo', @cakeinfo)
		msg('Deleted cake '.@id)

	case 'rename':
		if(!array_contains(pgroup(), 'moderators'), die('You do not have permission to use cake commands.'))
		@cakes = get_value('cakes')
		@args = parse_args($)
		if(array_size(@args) == 1) {
			@cursorloc = pcursor()
			foreach(@key: @loc in @cakes) {
				if(@loc[0] == @cursorloc[0]
				&& @loc[1] == @cursorloc[1]
				&& @loc[2] == @cursorloc[2]) {
					@old = @key
					break()
				}
			}
			if(!@old) {
				die('No cake prize found.')
			}
			@new = @args[0]
		} else if(array_size(@args) == 2) {
			@old = @args[0]
			@new = @args[1]
			if(!array_index_exists(@cakes, @old)) {
				die('No cake by that ID found.')
			}
		} else {
			die('Usage: /cake rename <oldname> <newname>')
		}
		@cakes[@new] = @cakes[@old]
		array_remove(@cakes, @old)
		@cakeinfo = get_value('cakeinfo')
		@cakeinfo[@new] = @cakeinfo[@old]
		array_remove(@cakeinfo, @old)
		store_value('cakeinfo', @cakeinfo)
		store_value('cakes', @cakes)
		msg('Changed '.@old.' to '.@new.'.')

	case 'tp':
		if(!array_contains(pgroup(), 'moderators'), die('You do not have permission to use cake commands.'))
		if(!$) {
			die('This needs an id.')
		}
		@cakes = get_value('cakes')
		if(!array_index_exists(@cakes, $)) {
			die('That cake ID doesn\'t exist')
		}
		set_ploc(array(@cakes[$][0] + 0.5, @cakes[$][1], @cakes[$][2] + 0.5, @cakes[$][3]))
		msg('Teleported.')
		
	case 'removeplayer':
		if(!array_contains(pgroup(), 'moderators'), die('You do not have permission to use cake commands.'))
		@args = parse_args($)
		if(!@args[0]) {
			@cakes = get_value('cakes')
			@cursorloc = pcursor()
			foreach(@key: @loc in @cakes) {
				if(@loc[0] == @cursorloc[0]
				&& @loc[1] == @cursorloc[1]
				&& @loc[2] == @cursorloc[2]) {
					@id = @key
					break()
				}
			}
			if(!@id) {
				die('No cake prize found.')
			}
		} else {
			@id = @args[0]
		}
		@cakeinfo = get_value('cakeinfo')
		if(!array_index_exists(@cakeinfo, @id)) {
			die('No cake by that ID found.')
		}
		@cakeinfo = get_value('cakeinfo')
		if(array_index_exists(@cakeinfo[@id]['players'], @args[1])) {
			array_remove(@cakeinfo[@id]['players'], @args[1])
			store_value('cakeinfo', @cakeinfo)
			msg('Deleted player from '.@id.' cake.')
		} else {
			msg('No player by that name for that cake.')
		}


	default:
		msg(color('green').'[CAKE] Commands to create, change and remove cake prizes.')
		msg('/cake list '.color('gray').'List the names of all cake prizes.')
		msg('/cake info [id] '.color('gray').'Shows cake info and current cooldowns')
		msg('/cake set [id] <coins> [type] '.color('gray').'Sets the cake you\'re looking at to give coins when clicked. Type can be "secret" or "challenge".')
		msg('/cake move <id> '.color('gray').'Moves the prize cake to a new location.')
		msg('/cake tp <id> '.color('gray').'Teleports you to a cake.')
		msg('/cake rename <old> <new> '.color('gray').'Renames a cake.')
		msg('/cake delete [id] '.color('gray').'Deletes the prize for the cake you\'re looking at.')
	}
<<<