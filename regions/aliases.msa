/**
 * Aliases for WorldGuard region commands
 * @command
 * @usage /plot <claim|clear|flag|move|rename|...> <regionId> [args...]
 */
*:/plot $ = call_alias('/region '.$);
*:/rg $ = call_alias('/region '.$);
*:/region $ = >>>
	@args = parse_args($);
	if(array_size(@args) < 2) {
		run('/region '.$);
		die();
	}
	switch(@args[0]) {
		case 'flag':
		case 'f':
			try {
				@region = @args[1];
				@setting = to_lower(@args[2]);
				@value = '';
				if(array_size(@args) > 3) {
					@value = @args[3];
				}
				if(has_permission('worldguard.region.*') && @setting !== 'infinite-dispensers') {
					run('/region '.$);
					die();
				}
				@flags = null;
				try {
					@flags = sk_region_info(@region, pworld(), 3);
				} catch(PluginInternalException @ex) {
					die(color('GOLD').'That region doesn\'t exist.');
				}
				try {
					@owners = sk_region_owners(@region, pworld());
				} catch(PluginInternalException @ex) {
					die(color('GOLD').'That region doesn\'t exist.');
				}
				switch(@setting) {
					case 'mob-spawning':
					case 'mob-spawns':
					case 'mobspawns':
					case 'mobspawning':
						if(!_is_survival_world(pworld())) {
							run('/region '.$);
							die();
						}
						foreach(@flagname in @flags) {
							if(@flagname[0] === 'mob-spawning') {
								sudo('/region flag '.@region.' mob-spawning');
								break();
							}
						}
						if(!@value) {
							sudo('/region flag '.@region.' deny-spawn');
						} else if(equals_ic(@value, 'allow')) {
							sudo('/region flag '.@region.' deny-spawn -e');
						} else if(equals_ic(@value, 'deny')) {
							sudo('/region flag '.@region.' deny-spawn CREEPER,ENDERMAN,HUSK,SKELETON,SLIME,SPIDER,STRAY,WITCH,ZOMBIE,ZOMBIE_VILLAGER,DROWNED,PILLAGER,PHANTOM');
						}

					case 'infdisp':
					case 'infinite-dispensers':
						if(_is_survival_world(pworld())) {
							die(color('GOLD').'You cannot toggle infinite dispensers in this world.');
						}
						@commands = '';
						foreach(@flag in @flags) {
							if(@flag[0] == 'blocked-cmds') {
								@commands = @flag[1];
								break();
							}
						}
						@commandArray = split(', ', substr(@commands, 1, length(@commands) - 1));
						if(!@value || equals_ic(@value, 'allow')) {
							if(array_contains(@commandArray, '/finitedispensers')) {
								array_remove_values(@commandArray, '/finitedispensers');
								msg('Set dispensers to infinite.');
							} else {
								die();
							}
						} else if(equals_ic(@value, 'deny')) {
							if(!array_contains(@commandArray, '/finitedispensers')) {
								@commandArray[] = '/finitedispensers';
								msg('Set dispensers to finite.');
							} else {
								die();
							}
						} else {
							die();
						}
						sk_region_flag(pworld(), @region, 'blocked-cmds', array_implode(@commandArray, ', '));

					default:
						run('/region '.$);
				}
			} catch(Exception @ex) {
				// All else fails, run the original command
				run('/region '.$);
			}

		case 'rename':
			@from = @args[1];
			@to = @args[2];
			if(!sk_region_exists(pworld(), @from)) {
				die(color('GOLD').'That region doesn\'t exist.');
			}
			if(!has_permission('group.moderator')
			&& !array_contains(sk_region_owners(@from, pworld())['players'], puuid())) {
				die(color('GOLD').'No permission.');
			}
			if(!reg_match('^[a-zA-Z0-9-_]{1,32}$', @to)) {
				die(color('GOLD').'You can only use alphanumeric characters and underscores/dashes.');
			}
			if(sk_region_exists(pworld(), @to)) {
				 die(color('GOLD').'A region by that name already exists.');
			}
			sk_region_rename(pworld(), @from, @to);
			msg(color('green').'Renamed '.@from.' to '.@to.'.');

		case 'clear':
			if(pworld() != 'dev') {
				die(color('GOLD').'You can only use this in dev plots');
			}
			@region = @args[1];
			if(!sk_region_exists('dev', @region)) {
				die(color('GOLD').'That region doesn\'t exist.');
			}
			if(!has_permission('group.moderator')
			&& !array_contains(sk_region_owners(@region, 'dev')['players'], puuid())) {
				die(color('GOLD').'No permission.');
			}
			@info = sk_region_info(@region, 'dev');
			if(!array_contains(sk_regions_at(@info[0][0]), 'plots')) {
				die(color('GOLD').'You can only use this in dev plots');
			}
			@pos1 = @info[0][0][0..2];
			@pos2 = @info[0][1][0..2];
			@pos2[1] = 64;
			sk_pos1(@pos1);
			sk_pos2(@pos2);
			msg(color('yellow').'Clearing plot...');
			sk_setblock('air');
			msg(color('green').'Done!');

		case 'redefine':
		case 'update':
		case 'move':
			@hasOverride = has_permission('worldguard.region.*');
			@region = @args[1];
			@owners = null;
			@world = pworld();
			try {
				@owners = sk_region_owners(@region, @world);
			} catch(PluginInternalException @ex) {
				die(color('GOLD').'That region doesn\'t exist.');
			}
			if(!@hasOverride && !array_contains(@owners['players'], puuid())) {
				die(color('GOLD').'You do not own this region.');
			}
			@p1 = null;
			@p2 = null;
			try {
				@p1 = sk_pos1();
				@p2 = sk_pos2();
			} catch(PluginInternalException @ex) {
				if(@hasOverride) {
					run('/region '.$);
					die();
				} else {
					die(color('GOLD').'You can only update cuboid regions, not polygonal regions.');
				}
			}
			if(is_null(@p1) || is_null(@p2)) {
				die(color('GOLD').'Please make a selection.');
			}
			if(!@hasOverride && !has_permission('group.regular') && abs(@p1['x'] - @p2['x']) * abs(@p1['z'] - @p2['z']) > 16384) {
				die(color('GOLD').'Selection too large. (128m^2 limit) Ask staff if you need a larger region.');
			}

			if(@world == 'dev' && !has_permission('group.builder')
			&& (!array_contains(sk_regions_at(@p1), 'plots') || !array_contains(sk_regions_at(@p2), 'plots'))) {
				die(color('GOLD').'You may not expand your region outside of the "plots" region.');
			}

			sk_region_create(@world, @region.'-temp', array(@p1, @p2));
			@regions = sk_region_intersect(@world, @region.'-temp');
			sk_region_remove(@world, @region.'-temp');
			foreach(@rg in @regions) {
				if(@rg == 'plots') {
					continue();
				}
				@owners = sk_region_owners(@rg, @world);
				if(!array_contains(@owners['players'], puuid())) {
					if(@hasOverride) {
						msg(color('YELLOW').'Note: New region boundaries overlap a region you do not own.');
					} else {
						die(color('GOLD').'This selection overlaps a region you do not own.');
					}
				}
			}
			sudo('/rg redefine '.@region);
			// Update region on live map right away
			if(function_exists('dm_set_marker_corners')) {
				try(dm_set_marker_corners('worldguard.markerset', @world.'_'.to_lower(@region), array(
					array(@p1['x'], 0, @p1['z'], @world),
					array(@p2['x'], 0, @p2['z'], @world),
				)))
			}

		case 'claim':
			@p1 = sk_pos1();
			@p2 = sk_pos2();
			if(!@p1 || !@p2) {
				die(color('GOLD').'You must select two points to claim a region.');
			}
			@size = abs(@p1['x'] - @p2['x']) * abs(@p1['z'] - @p2['z']);
			if(@size > 16384) {
				die(color('GOLD').'Selection too large. (128x128 upper limit) Ask staff if you need a larger region.');
			}

			if(pworld() != 'dev') {
				run('/region '.$);
				// Add region to live map right away
				if(sk_region_exists(pworld(), @args[1])) {
					if(function_exists('dm_set_marker_corners')) {
						try {
							dm_create_marker('worldguard.markerset', array(
								type: 'AREA',
								world: pworld(),
								label: _to_upper_camel_case(@args[1]),
								id: pworld().'_'.to_lower(@args[1]),
								corners: array(
									array(@p1['x'], 0, @p1['z'], pworld()),
									array(@p2['x'], 0, @p2['z'], pworld()),
								),
							));
						} catch(PluginInternalException @ex) {
							// probably already existed
						}
					}
				}
				die();
			}

			// The following only applies to the creative world
			@p1['y'] = -64;
			@p2['y'] = 319;
			if(!array_contains(sk_regions_at(@p1), 'plots')
			|| !array_contains(sk_regions_at(@p2), 'plots')) {
				die(color('GOLD').'You can only claim regions within the green "plots" region in the southeast.');
			}
			@region = @args[1];
			if(sk_region_exists(pworld(), @region)) {
				 die(color('GOLD').'A region by that name already exists.');
			}
			sk_region_create(pworld(), @region, array(@p1, @p2));
			@regions = sk_region_intersect(pworld(), @region);
			if(array_size(@regions) != 1) {
				sk_region_remove(pworld(), @region);
				array_remove_values(@regions, 'plots');
				die(color('GOLD').'Selection is overlapping one or more regions. '.@regions);
			}

			// add walls
			@block = array_get_rand(reflect_pull('enum', 'DyeColor')).'_TERRACOTTA';
			@minX = min(@p1['x'], @p2['x']);
			@minZ = min(@p1['z'], @p2['z']);
			@maxX = max(@p1['x'], @p2['x']);
			@maxZ = max(@p1['z'], @p2['z']);
			for(@x = @minX, @x <= @maxX, @x++) {
				queue_push(closure(){
					set_block(array(@x, 63, @minZ, 'dev'), @block);
					set_block(array(@x, 63, @maxZ, 'dev'), @block);
				});
			}
			for(@z = @minZ, @z <= @maxZ, @z++) {
				queue_push(closure(){
					set_block(array(@minX, 63, @z, 'dev'), @block);
					set_block(array(@maxX, 63, @z, 'dev'), @block);
				});
			}

			sk_region_addowner(@region, pworld(), puuid());
			sk_region_setpriority(pworld(), @region, 1);
			msg(color('green').'Successfully created Dev plot by the name "'.@region.'" here.');

		case 'remove':
		case 'rem':
		case 'delete':
		case 'del':
			run('/region '.$);
			// Remove from live map right away
			set_timeout(50, closure(){
				if(!sk_region_exists(pworld(), @args[1])) {
					if(function_exists('dm_delete_marker')) {
						try(dm_delete_marker('worldguard.markerset', pworld().'_'.to_lower(@args[1])))
					}
				}
			});

		default:
			run('/region '.$);
	}
<<<
