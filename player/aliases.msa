/**
 * Gets information from a list of help entries.
 * @command
 * @usage /help [topic]
 */
*:/help [$selection='help'] = >>>
	@help = array(
		'rules':
			'\n- Do NOT break or take anything belonging to another player, unless otherwise specified.\n'.
			'- Do NOT harass, spam, or swear at people in chat.\n'.
			'- Do NOT actively use mods for the purpose of cheating.\n',
		'commands':
			'Get a list and description of useful commands at >>> http://finalscoremc.com/commands <<<',
		'homes':
			'You can have one home per world. Set them by typing "/sethome", then "/home" to teleport to them. '.
			'You can teleport to your homes on other worlds with "/home worldname", homes of other players with '.
			'"/home playername", or both wtih "/home worldname playername".',
		'privatemessages': 'messages',
		'messages':
			'Send a private message to another player with "/msg playername message" or "@playername message". '.
			'You can use "/r <message>" for a reply.',
		'spawns':
			'There is one central spawn on each world, including nethers. Type "/spawn" to teleport to the spawn of '.
			'the world you are in or follow it with a world name to teleport there.',
		'portal': 'startgates',
		'gates': 'stargates',
		'stargates':
			'Stargates are special portals you build to teleport within a network of locations. There is a more '.
			'detailed guide on the website. But to make one, first build the gate as seen (without sign or button), '.
			'place a sign on the correct location, then type the gate name on line one and the gate network name on '.
			'line three.',
		'privatechests': 'privatesigns',
		'privatedoors': 'privatesigns',
		'private': 'privatesigns',
		'privatesigns':
			'You can put a [private] sign on a chest, furnace, and the block above/below doors. The following lines '.
			'after [private] should contain the players you want to give access. Optionally "[Everyone]" provides '.
			'access to everyone, and "[Timer:4]" will close a door 4 seconds after it was opened.',
		'shops':
			'Chest shops allow players to buy and sell different items using currency. (g: gold, d: diamond, i: iron, '.
			'e: emerald) Right click the SIGN with the currency in hand to BUY. Shop owners can edit shop '.
			'rates with the "/shop edit <transaction line>" command. Players can search for available items with '.
			'"/shop list <item>". There\'s a detailed guide on the website.',
		'website':
			'The website is at >>> http://finalscoremc.com <<< There you can find a command reference, guides, '.
			'videos, live maps, and more.',
		'map': 'livemap',
		'livemap':
			'>>> http://65.75.211.105:30027 <<< The website has a handy live map that shows the '.
			'location of players and their homes, among other things.',
		'staff':
			'You can get help from anyone with a blue name. Orange players are Frog Park staff and can help there.',
		'owner':
			'Scottyd_Utah currently owns the domain name and Minecraft server hosting. PseudoKnight owns the '.
			'custom software, provides the website, and primarily runs the server.',
		'plugins':
			'Type "/plugins" for a full list of plugins installed. Most server functionality is written in '.
			'MethodScript using the CommandHelper plugin. You can find those scripts at '.
			'http://github.com/PseudoKnight/FinalScoreMC',
		'groups': 'permissions',
		'ranks': 'permissions',
		'permissions':
			'We currently have 8 permission groups: '.
			'default (white names; new un-added players), '.
			'member (yellow names; most players are in this group; minor restrictions), '.
			'regular (like member, but long time or otherwise trusted players), '.
			'donor (green names or diamonds; minor cosmetic bonuses), '.
			'builder (orange names; Frog Park staff; builds things for the park), '.
			'engineer (like builder, but with protected region override), '.
			'moderator (blue names; server staff), '.
			'and admin (like moderator, but has access to everything; aka op).',
		'voice': 'discord',
		'mumble': 'discord',
		'discord':
			'We have a Discord server @ \n>>> https://discord.gg/XAJAdCXdwr <<<',
		'worldguard': 'regions',
		'regions':
			'Regions are protected zones where only owners and members can build or access chests. You can create '.
			'your own region by using a golden axe (or commands), left and right clicking to select a cuboid for '.
			'the region, then use "/rg claim <regionid>". More details are on the website.',
		'whitelist':
			'You can get on the whitelist by asking a staff member, or a friend who is a regular can do it using the '.
			'"/approve playername" command.',
		'survival': 'worlds',
		'worlds':
			'There are five primary worlds: Alpha (Plaza at spawn), Delta (Final City at spawn), Gamma (Gamma City '.
			'at spawn), Omega, and Psi. In addition, there are four respective nether dimensions and one End dimension. '.
			'You can type "/where" to see which worlds players are on.',
		'seeds': 'worldseeds',
		'worldseeds':
			'Alpha: -621778714517541268, Delta: -8443156782283251243, Gamma: -754633420005903009, Omega: 950483747. '.
			'Other seeds are not provided.'
	);
	if($selection === 'help') {
		msg(color('a').'Get help on any of these topics:');
		@topics = array_filter(@help, closure(@key, @value){
			return(length(@value) > 16);
		});
		msg(color('6').array_implode(array_keys(@topics), ' '));
	} else {
		try {
			@title = to_lower($selection);
			@text = array_get(@help, @title, '');
			if(!@text) {
				@text = @help[@title.'s'];
			}
			if(length(@text) < 17) {
				@title = @text;
				@text = @help[@text];
			}
			msg(to_upper(@title).': '.color('a').@text);
		} catch(IndexOverflowException @ex) {
			msg(color('c').'Unknown entry. Type "/help" to find available entries.');
		}
	}
<<<

/**
 * Prints all the rules for the server.
 * @command
 */
*:/rules = >>>
	broadcast(player().' read the rules.', 'group.moderator');
	call_alias('/help rules');
<<<

/**
 * Gets a list of all players on the server and their group.
 * @command
 * @alias list
 */
*:/who = >>>
	@list = array(
		array('admin', 'b', ''),
		array('moderator', 'b', ''),
		array('engineer', '6', ''),
		array('builder', '6', ''),
		array('donor', 'a', ''),
		array('regular', 'e', ''),
		array('member', 'e', ''),
		array('default', 'f', '')
	);
	@allplayers = all_players();
	foreach(@player in @allplayers) {
		for(@i = 0, @i < array_size(@list), @i++) {
			if(array_contains_ic(pgroup(@player), @list[@i][0])) {
				@list[@i][2] = @list[@i][2].' '.display_name(@player);
				break();
			}
		}
	}
	for(@i = 0, @i < array_size(@list), @i++) {
		if(@list[@i][2] !== '') {
			msg(color(@list[@i][1]).@list[@i][0].color(7).': '.@list[@i][2]);
		}
	}
<<<
*:/list = >>>
	if(player() !== '~console') { // MCMyAdmin spams this, so filter it
		call_alias('/who');
	}
<<<

/**
 * Sets the gamemode for yourself or another player. Toggles mode if not specified.
 * @command
 * @usage /gamemode [mode], /gamemode <player> [mode]
 * @alias gm
 * @permission command.gm
 */
*:/gamemode [$] = >>>
	if(!has_permission('command.gm')) {
		die(color('gold').'You do not have permission to change your gamemode here.');
	}
	@player = player();
	@mode = 'toggle';
	if($) {
		@args = parse_args($);
		if(array_size(@args) >= 2) {
			@mode = @args[1];
			@player = _find_player(@args[0]);
			if(@player != player() && !has_permission('command.gm.others')) {
				die('You do not have permission to set another\'s game mode.');
			} else if(pworld(@player) != pworld()) {
				die('You do not have permission to set another\'s game mode in another world.');
			}
		} else {
			@mode = @args[0];
		}
	}

	switch(to_lower(@mode)) {
		case '0':
		case 's':
		case 'survival':
			@mode = 'SURVIVAL';

		case '1':
		case 'c':
		case 'creative':
			@mode = 'CREATIVE';

		case '2':
		case 'a':
		case 'adventure':
			@mode = 'ADVENTURE';

		case '3':
		case 'sp':
		case 'spectator':
			@mode = 'SPECTATOR';

		case 't':
		case 'toggle':
			@world_mode = _worlds_config()[pworld()]['mode'];
			if(pmode(@player) == @world_mode) {
				if(@world_mode == 'CREATIVE'){
					@mode = 'SURVIVAL';
				} else {
					@mode = 'CREATIVE';
				}
			} else {
				@mode = @world_mode;
			}

		default:
			die(color('red').'Accepted modes: survival (0, s), creative (1, c), adventure (2, a), spectator (3, sp), toggle (t) [default]');
	}

	set_pmode(@player, @mode);
	if(@player != player()) {
		msg('Set '.@player.'\'s game mode to '.@mode);
	}
<<<
*:/gm [$] = call_alias('/gamemode '.$);

/**
 * Sets the time of day for the current world.
 * @command
 * @usage /time <day|night|sunrise|sunset|0-24000>
 */
*:/time set $time = call_alias('/time '.$time);
*:/time $time = >>>
	try {
		if(has_permission('command.time')) {
			set_world_time(pworld(), $time);
			msg('Set world time to '.$time);
		} else if(!_is_survival_world(pworld())){
			set_ptime(player(), $time);
			msg('Set your visible time to '.$time);
		} else {
			die(color('gold').'You do not have permission to set this world\'s time.');
		}
	} catch(FormatException @ex) {
		msg('Usage: /time <day|night|sunrise|sunset|0-24000>');
	}
<<<

/**
 * Moves you up the specified distance in meters and places a glass block below you. (requires creative mode)
 * @command
 * @usage /up <#num>
 */
*:/up [$amount=0] = >>>
	if(pmode() != 'CREATIVE') {
		die(color('gold').'You are not in CREATIVE mode.');
	}
	@loc = location_shift(ploc(), 'up', integer($amount));
	set_ploc(@loc);
	if(@loc['y'] > 255 || !sk_can_build(@loc)) {
		set_pflying(true);
	} else {
		set_block(@loc, 'GRAY_STAINED_GLASS');
	}
<<<

/**
 * Fully heals another player or self.
 * @command
 * @usage /heal [player]
 * @permission command.heal
 * @noPermMsg You do not have permission to heal.
 */
*:/heal [$player] = >>>
	if(!has_permission('command.heal')) {
		die(color('gold').'You do not have permission to heal here.');
	}
	@player = player();
	if($player) {
		if(!has_permission('command.heal.others')) {
			die(color('gold').'You do not have permission to heal others.');
		}
		@player = _find_player($player);
		if(pworld(@player) != pworld()) {
			die(color('gold').'You cannot heal a player in another world.');
		}
	}
	set_phunger(@player, 20);
	set_psaturation(@player, 5.0);
	set_phealth(@player, 20);
	clear_peffects(@player);
	tmsg(@player, color('green').'Healed!');
	if(@player != player()) {
		msg(color('green').'Healed!');
	}
<<<

/**
 * Teleports the player to the hub warp.
 * @command
 */
*:/hub [$] = run('/warp hub');

/**
 * Disguises yourself as another entity. (if plugin is installed)
 * @command
 * @usage /disguise <ENTITY_TYPE>
 * @alias d
 * @alias dis
 */
*:/disguise [$type] [$data] = >>>
	if(extension_exists('CHDisguises')) {
		if(!$type) {
			die('/disguise <type>');
		}
		@types = reflect_pull('enum', 'EntityType');
		@type = to_upper($type);
		if(!array_contains(@types, @type)) {
			die(color('red').'Invalid entity type.');
		}
		if($data) {
			disguise_entity(puuid(), @type, $data);
		} else {
			disguise_entity(puuid(), @type);
		}
		msg('You are now disguised as a '.@type);
	}
<<<
*:/d [$] = call_alias('/disguise '.$);
*:/dis [$] = call_alias('/disguise '.$);

/**
 * Removes your disguise, if you have one.
 * @command
 * @alias u
 * @alias undis
 */
*:/undisguise [$] = >>>
	if(extension_exists('CHDisguises')) {
		disguise_entity(puuid(), null);
		msg('You are now undisguised');
	}
<<<
*:/u [$] = call_alias('/undisguise');
*:/undis [$] = call_alias('/undisguise');