####################
# ARENA MANAGEMENT #
####################

*:/arena [$action] [$id] [$setting] [$] = >>>
if($, @args = parse_args($), @args = array())
array_resize(@args, 3)
switch($action
, 'set',
  if(!has_permission('group.builders'), die('You do not have permission to use this sub-command.'))
  if(!$id) {
    die(color('red').'[ARENA] Arena setting quick reference:\n'
    .color(r).'lobby '.color('gray').'Sets the exit spawn point (required)\n'
    .color(r).'spawn '.color('gray').'Adds a spawn point. (required)\n'
    .color(r).'region '.color('gray').'The combat region name. (required)\n'
    .color(r).'broadcast '.color('gray').'The region all messages are broadcasted.\n'
    .color(r).'mode '.color('gray').'Set the game mode (default: dm)\n'
    .color(r).'flag '.color('gray').'The flag spawn lcoation for CTF (1 is red, 2 is blue)\n'
    .color(r).'lives '.color('gray').'Number of lives until elimination\n'
    .color(r).'score '.color('gray').'The target score to win. (default: 5)\n'
    .color(r).'team '.color('gray').'Team name and color\n'
    .color(r).'kit '.color('gray').'Sets the respawn kits (accepts team # as value)\n'
    .color(r).'restore '.color('gray').'The optional restoration area name. (/prs)\n'
    .color(r).'time '.color('gray').'The starting time (0-24000)\n'
    .color(r).'ff '.color('gray').'Sets team friendly-fire (default: true)\n'
    .color(r).'itemspawn '.color('gray').'Set item drop. (default: 60 sec, no spawn @ start)\n'
    .color(r).'chestspawn '.color('gray').'Set chest respawn (default: 60 sec, no spawn @ start)\n'
    .color(r).'lever '.color('gray').'The lever that turns on at start and off at end.\n'
    .color(r).'scoretorch '.color('gray').'The redstone torch that appears when a team scores\n'
    .color(r).'min '.color('gray').'The minimum # of players to start a match. (default: 2)\n'
    .color(r).'max '.color('gray').'Start the match as soon as this number of players join.\n'
    .color(r).'effect '.color('gray').'The starting potion effect for all players.\n'
    .color(r).'denydrop '.color('gray').'Sets block IDs that cannot be dropped when players die.\n'
    .color(r).'modpickup '.color('gray').'If true, removes redundant pickups.\n'
    .color(r).'tools '.color('gray').'Special pre-defined item behavior. (comma separated)\n'
    .color(r).'debug '.color('gray').'Sets it in debug mode, which disallows normal starts.')
  }
  if(reg_count('^[a-z0-9]+$', $id) < 1, die('You can only use lowercase alphanumeric characters for the arena ID'))
  @arena = get_value('arena.'.$id)
  if(!@arena, @arena = array())
  switch($setting

    , 'lobby',
      if(pworld() != 'custom', die('You can only set spawns in the custom world.'))
      @arena['lobby'] = array(round(ploc()[0], 1), ploc()[1], round(ploc()[2], 1), ploc()[3])
      msg('Set lobby spawn to current location.')

    , 'spawn',
      if(pworld() != 'custom', die('You can only set spawns in the custom world.'))
      if(!array_index_exists(@arena, 'spawn'), @arena['spawn'] = array(array(), array()))
      if(@args[0] == '1' || @args[0] == '2') {
        array_push(@arena['spawn'][@args[0] - 1], array(round(ploc()[0], 1), round(ploc()[1], 1), round(ploc()[2], 1), ploc()[3]))
        msg('Set a spawn point to current location for team '.@args[0].'.')
      } else {
        array_push(@arena['spawn'][0], array(round(ploc()[0], 1), ploc()[1], round(ploc()[2], 1), ploc()[3]))
        msg('Set a spawn point to current location.')
      }

    , 'region',
      if(!@args[0], die('This requires a region name for the combat zone.'))
      @arena['region'] = @args[0]
      msg('Combat region set to '.@args[0].'.')

    , 'broadcast',
      if(!@args[0], die('This requires a region name for the chat broadcast zone.'))
      @arena['broadcast'] = @args[0]
      msg('Broadcast region set to '.@args[0].'.')

    , 'mode',
      if(!@args[0] || !array_contains_ic(array('dm', 'tdm', 'ctf'), @args[0]), die('Available modes: dm (default deathmatch), tdm (team deathmatch), ctf (capture the flag)'))
      @arena['mode'] = to_lower(@args[0])
      msg('Set arena game mode to '.@args[0].'.')

    , 'flag',
      if(!@args[0], die('This requires a team #.'))
      @team = @args[0] - 1
      @arena['flag'][@team] = array(round(ploc()[0], 1), round(ploc()[1], 1) + 1, round(ploc()[2], 1), ploc()[3])
      msg('Set flag for team '.@args[0].' to this location.')

    , 'lives',
      if(!@args[0], die('This setting requires an integer.'))
      @arena['lives'] = @args[0]
      msg('Set lives to '.@args[0].'.')

    , 'score',
      if(!@args[0], die('This setting requires an integer.'))
      @arena['score'] = @args[0]
      msg('Set score target to '.@args[0].'.')

    , 'team',
      if(!@args[1] || !@args[2], die('You need to specify three values for this setting.'))
      if(!array_index_exists(@arena, 'team'), @arena['team'] = array(array('name': '', 'color': 15), array('name': '', 'color': 15)))
      @team = @args[0] - 1
      @arena['team'][@team]['name'] = @args[1]
      @arena['team'][@team]['color'] = @args[2]
      msg('Set team name to '.@args[1].' with color '.color(@args[2]).@args[2])

    , 'kit',
      if(!array_index_exists(@arena, 'kit'), @arena['kit'] = array(array(), array()))
      @inv = pinv()
      foreach(array_keys(@inv), @slot,
        if(@inv[@slot] == null) {
          array_remove(@inv, @slot)
        }
      )
      if(!@args[0] || @args[0] == 1) {
        @arena['kit'][0] = @inv
        msg('Set kit to current inventory.')
      } else if(@args[0] == 2) {
        @arena['kit'][1] = @inv
        msg('Set kit to current inventory.')
      } else {
        die('Only accepts values 1 or 2 for teams, or blank for when there are no teams.')
      }

    , 'restore',
      if(!has_permission('group.administrators'), die('Only admins can do this.'))
      @arena['restore'] = @args[0]
      msg('Restore area set to '.@args[0].'.')

    , 'time',
      if(!@args[0], die('This a time value of 0 to 24000.'))
      @arena['time'] = @args[0]
      msg('Starting time set to '.@args[0].'.')

    , 'min',
      if(!@args[0], die('This requires an integer for minimum players to start.'))
      @arena['min'] = @args[0]
      msg('Set minimum players to '.@args[0])

    , 'max',
      if(!@args[0], die('This requires an integer for maximum players before it starts automatically.'))
      @arena['max'] = @args[0]
      msg('Set maximum players to '.@args[0])

    , 'ff',
      if(!@args[0], die('This requires true or false.'))
      if(@args[0] == 'true') {
        try(array_remove(@arena, 'ff'), die('Already set to true by default.'))
        msg('Set friendly-fire on. (default)')
      } else if(@args[0] == 'false') {
        @arena['ff'] = false
        msg('Set friendly-fire off.')
      } else {
        die('Only accepts values: true or false (defaults to true)')
      }

    , 'itemspawn',
      if(!array_index_exists(@arena, 'itemspawn'), @arena['itemspawn'] = array())
      if(!@args[0] || is_numeric(@args[0])) {
        if(!@args[0], @cooldown = 60, @cooldown = @args[0])
        if(!@args[1], @start = true, @start = @args[1])
        array_push(@arena['itemspawn'], array(
          'start': @start,
          'cooldown': @cooldown,
          'loc': array(round(ploc()[0], 1), ploc()[1] + 1, round(ploc()[2], 1), ploc()[3]),
          'item': pinv(player(), null)
        ))
        msg('Set current item to spawn here.')
      } else {
        die('The first value can only be an integer for the number of seconds in the cooldown (default: 30). The second can be true or false for if the item spawns at match start (default: true).')
      }

    , 'chestspawn',
      if(!array_index_exists(@arena, 'chestspawn'), @arena['chestspawn'] = array())
      if(!@args[0] || is_numeric(@args[0])) {
        if(!@args[0], @cooldown = 60, @cooldown = @args[0])
        if(!@args[1], @start = 'true', @start = @args[1])
        @loc = pcursor()
        if(split(':', get_block_at(@loc))[0] == '54') {
          @items = array()
          for(@i = 0, @i < 36, @i++,
            if(get_inventory_item(@loc, @i) == null, break())
            array_push(@items, get_inventory_item(@loc, @i))
          )
        } else {
          die('You must look at a chest you want to spawn.')
        }
        foreach(@arena['chestspawn'], @key, @chest,
          if(@chest['loc'] == @loc) {
            array_remove(@arena['chestspawn'], @key)
            break()
          }
        )
        array_push(@arena['chestspawn'], array(
          'start': @start,
          'cooldown': @cooldown,
          'loc': @loc,
          'items': @items
        ))
        msg('Set current chest to spawn here.')
        set_block_at(@loc, 0)
      } else {
        die('The first value can only be an integer for the number of seconds in the cooldown (default: 30). The second must be true or false for if the item spawns at match start (default: true).')
      }

    , 'lever',
      @loc = pcursor()
      if(get_block_at(@loc) == '69:6' || get_block_at(@loc) == '69:5') {
        @arena['lever'] = @loc
        msg('Set arena\'s start/end lever.')
      } else {
        die('You must be looking at a lever placed on top of a block.')
      }

    , 'scoretorch',
      if(!@args[0], die('This requires a team #.'))
      @team = @args[0] - 1
      @arena['scoretorch'][@team] = pcursor()
      msg('Set this block to turn into a redstone torch when team '.@args[0].' scores.')

    , 'redstonetorch',
      @loc = pcursor()
      if(get_block_at(@loc) == '76:5' || get_block_at(@loc) == '75:5') {
        @arena['redstonetorch'] = @loc
        msg('Set arena\'s win condition redstone torch. Game ends when this torch is turned off.')
      } else {
        die('You must be looking at a redstone torch placed on top of a block.')
      }

    , 'effect',
      assign(@effects, array('speed': '1', 'slowness': '2', 'haste': '3', 'fatique': '4', 'strength': '5', 'health': '6', 'damage': '7', 'jump': '8', 'nausea': '9', 'regen': '10', 'resistance': '11', 'fireresist': '12', 'waterbreathing': '13', 'invis': '14', 'blindness': '15', 'nightvision': '16', 'hunger': '17', 'weakness': '18', 'poison': '19'))
      if(!array_contains(array_keys(@effects), @args[0]), die('Unknown potion effect. (speed, slowness, haste, fatique, strength, health, damage, jump, nausea, regen, resistance, fireresist, waterbreathing, invis, blindness, nightvision, hunger, weakness, poison)'))
      @effect = @effects[@args[0]]
      if(!array_index_exists(@arena, 'effect'), @arena['effect'] = associative_array())
      if(@args[1] && @args[2]) {
        if(@args[1] == 0 || @args[2] == 0) {
          array_remove(@arena['effect'], @effect)
          if(array_size(@arena['effect']) == 0) {
            array_remove(@arena, 'effect')
          }
          msg('Removed potion effect '.@args[0].'.')
        } else {
          @arena['effect'][@effect] = associative_array('strength': @args[1] - 1, 'length': @args[2])
          msg('Set starting potion effect to '.@args[0].' with a strength of '.@args[1].' and a length of '.@args[2].'.')
        }
      } else {
        die('Requires a strength integer and a length integer in seconds.')
      }

    , 'denydrop',
      if(!@args[0] || @args[1], die('You need to specify a comma separated list of item IDs. (no spaces)'))
      @arena['denydrop'] = split(',', @args[0])
      msg('Set '.@args[0].' item IDs as denied drops on death.')    

    , 'modpickup',
      if(@args[0] == 'true') {
        @arena['modpickup'] = @args[0]
        msg('Set modified pick-up on.')
      } else if(@args[0] == 'false') {
        try(array_remove(@arena, 'modpickup'), die('Already set to false by default.'))
        msg('Set modified pick-up off.')
      } else {
        die('Only accepts values: true or false (defaults to false)')
      }  

    , 'tools',
      if(!@args[0] || @args[1], die('You need to specify a comma separated list of pre-defined special tools/weapons. (no spaces) Current available tools: endernades, skullrockets.'))
      @arena['tools'] = split(',', @args[0])
      foreach(@arena['tools'], @tool,
        if(!array_contains(array('endernades', 'skullrockets'), @tool), die('Unknown tool: '.@tool))
      )
      msg('Activated these tools: '.@arena['tools'])

    , 'debug',
      if(!@args[0], die('This requires true or false.'))
      if(@args[0] == 'true') {
        @arena['debug'] = true
        msg('Set debug to true.')
      } else if(@args[0] == 'false') {
        try(array_remove(@arena, 'debug'), die('This is already false.'))
        msg('Set debug to false.')
      } else {
        die('This only accepts true or false.')
      }

    , #else
    die('This requires a valid setting. Type "/arena set" to see settings.')
  )
  store_value('arena.'.$id, @arena)

, 'edit',
  if(pworld() != 'custom' && pworld() != 'dev', die('You can only edit kits in dev/custom'))
  @arena = get_value('arena.'.$id)
  switch($setting
    , 'kit',
      _clear_pinv()
      if(@args[0]) {
        set_pinv(player(), @arena['kit'][@args[0] - 1])
      } else {
        set_pinv(player(), @arena['kit'][0])
      }
      die('After editing, you can save this kit by using "/arena set '.$id.' kit '.@args[0].'"')

    , 'chestspawn',
      @loc = pcursor()
      if(split(':', get_block_at(@loc))[0] != '54', die('This is not a chest'))
      foreach(@arena['chestspawn'], @chest,
        if(@chest['loc'] == @loc) {
          foreach(@chest['items'], @index, @item,
            set_inventory_item(@loc, @index, @item)
          )
          die('After editing, you can save this chestspawn by using "/arena set '.$id.' chestspawn '.@chest['cooldown'].' '.@chest['start'].'"')
        }
      )

    , die('Unsupported setting for editing.')
  )

, 'delete',
  if(!has_permission('group.builders'), die('You do not have permission to use this function.'))
  if(!$id, die('This command requires an arena ID.'))
  @arena = get_value('arena.'.$id)
  if(!@arena, die('There is no defined arena by that name.'))
  clear_value('arena.'.$id)
  msg('Arena deleted.')

, 'info',
  if($id) {
    @arena = get_value('arena.'.$id)
    if(!@arena, die('There is no defined arena by that name.'))
    if($setting) {
      if(!array_index_exists(@arena, $setting), die('That setting is not defined for this arena.'))
      msg($setting.' '.color('gray').@arena[$setting])
    } else {
      foreach(array_keys(@arena), @key,
        if(array_contains(array('spawn', 'kit', 'itemspawn', 'chestspawn'), @key)) {
          msg(@key.' '.color('gray').'[...]')
        } else {
          msg(@key.' '.color('gray').@arena[@key])
        }
      )
    }
  } else {
    @arenas = get_values('arena')
    @list = ''
    foreach(array_keys(@arenas), @arena,
      @list .= split('.', @arena)[1].' '
    )
    msg(color('red').'[ARENA] These are the currently defined arenas. Use "/arena info <id>" to view details on each. For detailed settings, you can use "/arena info <id> <setting>".')
    msg(@list)
  }

, 'clear',
  if(!$id, die('This requires an arena id.'))
  if(!$setting, die('This requires a setting to clear.'))
  @arena = get_value('arena.'.$id)
  if(!@arena, die('There is no defined arena by that name.'))
  if(array_index_exists(@arena, $setting)) {
    array_remove(@arena, $setting)
  } else {
    die('Setting not recognized.')
  }
  store_value('arena.'.$id, @arena)
  msg('Setting cleared.')

, #else
msg(color('red').'[ARENA] Used to create, modify, view, and delete PVP arenas\n'
 .color(r).'/arena set [id] [setting] [value(s)]'.color('gray').' Set/change settings\n'
 .color(r).'/arena edit <id> <setting> [value(s)]'.color('gray').' Load it for editing\n'
 .color(r).'/arena clear <id> <setting>'.color('gray').' Clears all data for this setting\n'
 .color(r).'/arena info [id] [setting]'.color('gray').' View arenas and their settings\n'
 .color(r).'/arena delete <id> '.color('gray').'Delete the arena from database')
)
<<<

###############
# PVP MATCHES #
###############

*:/pvp = >>>
msg(color('gray').'[PVP] You can play PVP at any number of arenas. These commands support generic PVP matches\n'
 .color(r).'/pvp join <id> '.color('gray').'Join the match\n'
 .color(r).'/pvp start <id> '.color('gray').'Start the match\n'
 .color(r).'/pvp warp <id> '.color('gray').'Teleports you to the lobby')
<<<

*:/pvp $action $id = >>>
@id = $id
@pvp = import('pvp'.@id)
@arena = get_value('arena.'.@id)
if(!@arena, die('Can\'t find that arena.'))

switch($action

########
# JOIN #
########
, 'join',
if(!@pvp) {
 @pvp = array('players': associative_array(), 'running': false)
 @pvp['players'][player()] = array()
} else {
 if(array_index_exists(@pvp['players'], player()), die('You already joined.'))
 if(@pvp['running'] == true, die('Match already in progress.'))
 @pvp['players'][player()] = array()
}
_worldmsg('custom', color('gray').'[PVP] '.color(r).player().' has joined '.$id.'. ('.array_size(@pvp['players']).')')
export('pvp'.@id, @pvp)
if(array_index_exists(@arena, 'max')) {
  if(array_size(@pvp['players']) >= @arena['max']) {
    call_alias('/pvp start '.@id)
  }
}

#########
# WATCH #
#########
, 'warp',
if(array_contains_ic(array('outworld', 'outworld_nether', 'outworld_the_end'), pworld()), die('You cannot run this in the outworld.'))
if(array_index_exists(@arena, 'lobby')) {
  set_ploc(@arena['lobby'])
} else {
  msg('That arena isn\'t finished because it doesn\'t have a lobby set.')
}

#########
# START #
#########
, 'start',

#CHECK IF WE CAN START
if(array_index_exists(@arena, 'debug') && !array_contains(pgroup(), 'builders'), die('This arena can only be started by Builders.'))
if(!@pvp, die('There is no match to start.'))
if(@pvp['running'] == true, die('Match already in progress.'))
foreach(array_keys(@pvp['players']), @player,
  if(!ponline(@player) || pworld(@player) != 'custom') {
    array_remove(@pvp['players'], @player)
  }
)
if(!array_index_exists(@arena, 'min'), @arena['min'] = 2)
if(array_size(@pvp['players']) < @arena['min'], die('There aren\'t enough players. ('.array_size(@pvp['players']).')'))


#PREPARE DATA
# defaults
if(!array_index_exists(@arena, 'broadcast'), @arena['broadcast'] = @arena['region'])
if(!array_index_exists(@arena, 'mode'), @arena['mode'] = 'dm')
if(!array_index_exists(@arena, 'ff'), @arena['ff'] = true)
if(!array_index_exists(@arena, 'team'), @arena['team'] = array(array('name': 'Team 1', 'color': 15), array('name': 'Team 2', 'color': 15)))
if(!array_index_exists(@arena, 'score') && @arena['mode'] == 'ctf', @arena['score'] = 5)

# add data to @pvp
if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
  @team = 0
  @pvp['stats']['team'] = array(array(), array())
}
foreach(array_keys(@pvp['players']), @player,
  if(array_index_exists(@arena, 'lives')) {
    @pvp['players'][@player]['lives'] = @arena['lives']
    set_plevel(@player, @arena['lives'])
  }
  if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
    @pvp['players'][@player]['team'] = @team
    array_push(@pvp['stats']['team'][@team], @player)
    if(@team == 0, @team = 1, @team = 0)
  }
  @pvp['players'][@player]['limbotime'] = 0

  if(pmode(@player) == 'CREATIVE', set_pmode(@player, 'SURVIVAL'))
)

if(@arena['mode'] == 'ctf') {
  @pvp['team'][0]['score'] = 0
  @pvp['team'][1]['score'] = 0
}
if(array_index_exists(@arena, 'itemspawn')) {
  @pvp['itemspawn'] = array()
  for(@i = 0, @i < array_size(@arena['itemspawn']), @i++,
    if(@arena['itemspawn'][@i]['start'] == 'true', @time = 0, @time = time())
    array_set(@pvp['itemspawn'], @i, @time)
  )
}
if(array_index_exists(@arena, 'chestspawn')) {
  @pvp['chestspawn'] = array()
  for(@i = 0, @i < array_size(@arena['chestspawn']), @i++,
    if(@arena['chestspawn'][@i]['start'] == 'true', @time = 0, @time = time())
    array_set(@pvp['chestspawn'], @i, @time)
  )
}
@pvp['coins'] = array_size(@pvp['players']) - 2
@pvp['running'] = true

#ANNOUNCE
_worldmsg('custom', color('gray').'[PVP] '.color(r).'STARTING '.to_upper(@id).'...')
if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
  _regionmsg(@arena['broadcast'], 
    color(@arena['team'][0]['color']).'['.@arena['team'][0]['name'].'] '.array_implode(@pvp['stats']['team'][0], ' ').'\n'.color('r').color(@arena['team'][1]['color']).'['.@arena['team'][1]['name'].'] '.array_implode(@pvp['stats']['team'][1], ' '))
} else {
  _regionmsg(@arena['broadcast'],
    array_implode(array_keys(@pvp['players']), ' vs '))
}
if(@arena['mode'] == 'ctf', _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color('r').color('o').'PROTECT YOUR FLAG!'))

proc('_check_goals', assign(@id, @id), assign(@arena, @arena),
  @pvp = import('pvp'.@id)

  if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
    @count = array(0, 0)
    foreach(array_keys(@pvp['players']), @p,
      @count[@pvp['players'][@p]['team']]++
    )
  }

  # check win conditions
  if((@arena['mode'] == 'dm' && array_size(@pvp['players']) <= 1)
  || (array_contains(array('tdm', 'ctf'), @arena['mode']) && (@count[0] == 0 || @count[1] == 0))
  || (@arena['mode'] == 'ctf' && (@pvp['team'][0]['score'] >= @arena['score'] || @pvp['team'][1]['score'] >= @arena['score']))) {

    foreach(array_keys(@pvp['players']), @player,
      if(@pvp['coins'] >= 1) {
        acc_add(@p, @pvp['coins'])
        tmsg(@player, color('gold').'+ '.@pvp['coins'].if(@pvp['coins'] >= 2, ' coins', ' coin'))
      }
      if(array_index_exists(@pvp['players'][@player], 'limbo') && @pvp['players'][@player]['limbo'], clear_task(@pvp['players'][@player]['limbo']))

      set_timeout(3000, closure(
        if(ponline(@player)) {
          set_ploc(@player, @arena['lobby'])
          _clear_pinv(@player)
          _remove_peffects(@player)
        }
      ))
    )

    if(array_size(@pvp['players']) > 0) {
      if(array_contains(array('ctf', 'tdm'), @arena['mode'])) {
        _worldmsg('custom', color('gray').'[PVP] '.color(@arena['team'][@pvp['players'][@player]['team']]['color']).@arena['team'][@pvp['players'][@player]['team']]['name'].' win! ('.array_implode(@pvp['stats']['team'][@pvp['players'][@player]['team']], ' ').')')
      } else {
        _worldmsg('custom', color('gray').'[PVP] '.color(r).@player.' wins!')
      }
    } else {
      _worldmsg('custom', color('gray').'[PVP] '.color(r).'Nobody wins! Wait.. what?!')
    }

    if(array_index_exists(@arena, 'restore')) {
      set_timeout(8000, closure(
        runas(~console, '/prs restore '.@arena['restore'])
      ))
    }
    if(array_index_exists(@arena, 'lever'), set_block_at(@arena['lever'], '69:6'))

    unbind('pvp'.@id.'death')
    unbind('pvp'.@id.'spawn')
    unbind('pvp'.@id.'damage')
    unbind('pvp'.@id.'quit')
    if(array_index_exists(@arena, 'chestspawn') || array_index_exists(@arena, 'tools'), unbind('pvp'.@id.'interact'))
    if(array_index_exists(@arena, 'tools') && array_contains(@arena['tools'], 'endernades'), unbind('pvp'.@id.'teleport'))
    if(array_index_exists(@arena, 'modpickup') || @arena['mode'] == 'ctf', unbind('pvp'.@id.'pickup'))
    if(array_contains(array('ctf', 'tdm'), @arena['mode']), unbind('pvp'.@id.'tagged'))
    if(@arena['mode'] == 'ctf') {
      unbind('pvp'.@id.'inventory')
      if(@pvp['team'][0]['flagrespawn'], clear_task(@pvp['team'][0]['flagrespawn']))
      if(@pvp['team'][1]['flagrespawn'], clear_task(@pvp['team'][1]['flagrespawn']))
    }

    clear_task(@pvp['interval'])
    @pvp = array('players': associative_array(), 'running': false)
    export('pvp'.@id, @pvp)
  }
)

proc('_give_kit', @player, assign(@id, @id), assign(@arena, @arena),
if(array_index_exists(@arena, 'kit')) {
  @pvp = import('pvp'.@id)
  if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
    set_pinv(@player, @arena['kit'][@pvp['players'][@player]['team']])
  } else {
    set_pinv(@player, @arena['kit'][0])
  }
}
)

if(@arena['mode'] == 'ctf') {
proc('_flag_respawn', @team, assign(@id, @id), assign(@arena, @arena),
  @pvp = import('pvp'.@id)
  @pvp['team'][@team]['flagrespawn'] = set_interval(30000, 50, closure(
    @pvp = import('pvp'.@id)
    try(entity_type(@pvp['team'][@team]['flag']),
      @pvp['team'][@team]['flag'] = drop_item(@arena['flag'][@team], array('type': if(@team == 0, '10', '8')))
      set_entity_velocity(@pvp['team'][@team]['flag'], array())
      export('pvp'.@id, @pvp)
    )
  ))
  export('pvp'.@id, @pvp)
)
}

#START
set_timeout(3000, closure(
  if(array_index_exists(@arena, 'lever'), set_block_at(@arena['lever'], '69:14'))
  if(array_index_exists(@arena, 'time'), set_world_time(@arena['lobby'][3], @arena['time']))
  _remove_region_items(@arena['region'])

  @c = 0
  foreach(array_keys(@pvp['players']), @player,
    if(!ponline(@player), continue())
    if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
      set_ploc(@player, @arena['spawn'][@pvp['players'][@player]['team']][@c])
      if(@c == array_size(@arena['spawn'][0]) - 1 || @c == array_size(@arena['spawn'][1]), @c = 0, @c++)
    } else {
      set_ploc(@player, @arena['spawn'][0][@c])
      if(@c == array_size(@arena['spawn'][0]) - 1, @c = 0, @c++)
    }
    set_pbed_location(@player, @arena['lobby'])

    _clear_pinv(@player)
    _give_kit(@player)
    set_phunger(@player, 20)
    set_psaturation(@player, 5)
    set_phealth(@player, 20)
    if(array_index_exists(@arena, 'effect')) {
      foreach(@arena['effect'], @effect, @data,
        set_peffect(@player, @effect, @data['strength'], @data['length'])
      )
    }
  )

  if(@arena['mode'] == 'ctf') {
    _flag_respawn(0)
    _flag_respawn(1)
  }

  # The assign() functions in the event binds are required to keep the instances from interfering with each other
  # Just passing the variable (eg. ", @arena, @id,") did not work last I tested
  bind(player_death, array('priority': 'high', 'id': 'pvp'.@id.'death'), null, @event, assign(@arena, @arena), assign(@id, @id),
    @pvp = import('pvp'.@id)
    if(!array_index_exists(@pvp['players'], player()), die())

    if(array_index_exists(@arena, 'lives')) {
      @pvp['players'][player()]['lives'] = @pvp['players'][player()]['lives'] - 1
    }
    if(!array_index_exists(@arena, 'lives') || @pvp['players'][player()]['lives'] > 0) {
      @pvp['players'][player()]['limbo'] = set_timeout(10000, closure(
        @pvp = import('pvp'.@id)
        array_remove(@pvp['players'], player())
        export('pvp'.@id, @pvp)
        _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(r).player().' did not respawn in time.')
        _check_goals()
      ))
    }

    if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
      @parts = parse_args(@event['death_message'])
      @parts[0] = color(@arena['team'][@pvp['players'][player()]['team']]['color']).player().color('r')
      @deathmessage = array_implode(@parts)
    } else {
      @deathmessage = @event['death_message']
    }

    if(array_index_exists(@arena, 'lives')) {
      if(@pvp['players'][player()]['lives'] == 0) {
        _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(r).@deathmessage)
        array_remove(@pvp['players'], @player)
      } else if(@pvp['players'][player()]['lives'] == 1) {
        _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(r).@deathmessage.color('red').' (One life left!)')
      } else {
        _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(r).@deathmessage.' ('.@pvp['players'][player()]['lives'].' lives left)')
      }
    } else {
      _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(r).@deathmessage)
    }

    export('pvp'.@id, @pvp)

    @drops = array()
    foreach(@event['drops'], @drop,
      if(array_index_exists(@arena, 'denydrop') && !array_contains(@arena['denydrop'], @drop['type']) && !array_contains(array(8, 10), @drop['type'])) {
        array_push(@drops, @drop)
      }
      if(@arena['mode'] == 'ctf' && (@drop['type'] == 8 || @drop['type'] == 10)) {
        _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][@pvp['players'][player()]['team']]['color']).player().' dropped the flag')
        if(@event['cause'] == 'VOID' || @event['cause'] == 'LAVA') {
          @flag = drop_item(@arena['flag'][if(@drop['type'] == 10, 0, 1)], array('type': @drop['type']))
          set_entity_velocity(@flag, array())
        } else {
          @flag = drop_item(array(ploc()[0], ploc()[1] + 1, ploc()[2], ploc()[3]), array('type': @drop['type']))
          set_entity_velocity(@flag, array())
          @pvp['team'][if(@drop['type'] == 10, 0, 1)]['flagrespawn'] = set_timeout(30000, closure(
            @newflag = drop_item(@arena['flag'][if(@drop['type'] == 10, 0, 1)], array('type': @drop['type']))
            set_entity_velocity(@newflag, array())
            _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][if(@drop['type'] == 10, 0, 1)]['color']).'Flag respawned.')
            try(entity_remove(@flag), console('Failed to remove flag entity. Blown up?'))
          ))
        }
      }
    )
    if(array_index_exists(@arena, 'denydrop'), modify_event('drops', @drops))
    modify_event('xp', null)
    _check_goals()
  )

  bind(player_quit, array('id': 'pvp'.@id.'quit'), null, @event, assign(@arena, @arena), assign(@id, @id), assign(@host, player()),
    @pvp = import('pvp'.@id)
    if(!array_index_exists(@pvp['players'], player()), die())
    if(player() == @host) {
      console('Host ('.@host.') left the match in '.@id.'.')
    }

    if(@arena['mode'] == 'ctf' && (pinv(player(), 103)['type'] == 8 || pinv(player(), 103)['type'] == 10)) {
      _flag_respawn(if(pinv(player(), 103)['type'] == 10, 0, 1)) 
    }

    modify_event('message', color('gray').'[PVP] '.color(if(array_contains(array('ctf', 'tdm'), @arena['mode']), @arena['team'][@pvp['players'][player()]['team']]['color'], 'white')).@event['message'])
    array_remove(@pvp['players'], @player)
    export('pvp'.@id, @pvp)
    _check_goals()
    
    bind(player_join, null, array('player': @player), @event, assign(@arena, @arena),
      if(pworld() == 'custom') {
        set_ploc(@arena['lobby'])
        _clear_pinv()
      }
      unbind()
    )
  )


  bind(player_spawn, array('id': 'pvp'.@id.'spawn'), null, @event, assign(@arena, @arena), assign(@id, @id),
    @pvp = import('pvp'.@id)
    if(!array_index_exists(@pvp['players'], player()), die())

    clear_task(@pvp['players'][player()]['limbo'])
    @pvp['players'][player()]['limbo'] = null
    _give_kit(player())

    if(array_index_exists(@arena, 'score')) {
      set_plevel(@pvp['team'][@pvp['players'][player()]['team']]['score'])
    } else if(array_index_exists(@arena, 'lives')) {
      set_plevel(@pvp['players'][player()]['lives'])
    }

    if(array_contains(array('tdm', 'ctf'), @arena['mode'])) {
      @r = rand(0, array_size(@arena['spawn'][@pvp['players'][player()]['team']]))
      modify_event('location', @arena['spawn'][@pvp['players'][player()]['team']][@r])
    } else {
      @r = rand(0, array_size(@arena['spawn'][0]))
      modify_event('location', array_rand(@arena['spawn'][0], 1, false)[0])
    }

    if(array_index_exists(@arena, 'effect')) {
      set_timeout(50, closure(
      foreach(@arena['effect'], @effect, @data,
        set_peffect(@player, @effect, @data['strength'], @data['length'])
      )
      ))
    }

    export('pvp'.@id, @pvp)
  )


  if(array_index_exists(@arena, 'chestspawn') || array_index_exists(@arena, 'tools')) {
    bind(player_interact, array('id': 'pvp'.@id.'interact'), null, @event, assign(@arena, @arena), assign(@id, @id),

      # filter players
      @pvp = import('pvp'.@id)
      if(!array_index_exists(@pvp['players'], player()), die())

      # chest spawn breaking
      if(@event['block'] == '54' && array_index_exists(@arena, 'chestspawn')) {
        for(@i = 0, @i < array_size(@arena['chestspawn']), @i++,
          if(@arena['chestspawn'][@i]['loc'] == @event['location']) {
            cancel()
            set_block_at(@event['location'], 0)
            make_effect(@event['location'], 'STEP_SOUND:54')
            @pvp['chestspawn'][@i] = time()
          }
        )
      }

      # special tools
      if(array_index_exists(@arena, 'tools')) {
        switch(@event['item']
        , '397:1',
          if(array_contains(@arena['tools'], 'skullrockets')) {
            @skull = shoot_projectile(player(), 'wither_skull')
            set_timeout(100, closure(
              @velocity = entity_velocity(@skull)
              set_entity_velocity(@skull, array(@velocity['x'] * 3, @velocity['y'] * 3, @velocity['z'] * 3))
            ))
            ptake_item('397:1', 1)
            cancel()
          }
        )
      }

      export('pvp'.@id, @pvp)
    )
  }


  if(array_index_exists(@arena, 'tools') && array_contains(@arena['tools'], 'endernades')) {
    bind(player_teleport, array('id': 'pvp'.@id.'teleport'), null, @event, assign(@arena, @arena), assign(@id, @id),
      if(@event['type'] != 'ENDER_PEARL', die())
      @pvp = import('pvp'.@id)
      if(!array_index_exists(@pvp['players'], player()), die())
      if(array_contains(sk_regions_at(@event['to']), @arena['region'])) {
        explosion(@event['to'], 2)
      }
      cancel()
    )
  }


  bind(entity_damage_player, array('id': 'pvp'.@id.'damage'), null, @event, assign(@arena, @arena), assign(@id, @id),
    @pvp = import('pvp'.@id)
    if(!array_index_exists(@pvp['players'], player()), die())

    if(@event['damager'] == 'PLAYER' || @event['damager'] == 'ARROW' || @event['damager'] == 'WITHER_SKULL') {
      if(!@arena['ff']
        && array_index_exists(@pvp['players'], @event['data'])
        && (@arena['mode'] == 'dm' || @pvp['players'][player()]['team'] == @pvp['players'][@event['data']]['team'])) {
          cancel()
      } else if(@event['damager'] == 'WITHER_SKULL') {
        modify_event('amount', @event['amount'] * 6)
        set_timeout(100, closure(set_peffect(player(), 20, 0, 0)))
      }
      if(!array_index_exists(@pvp['players'], @event['data']) && ponline(@event['data'])) {
        set_ploc(@event['data'], @arena['lobby'])
      }
    }
  )

  if(@arena['mode'] == 'ctf') {
    bind(inventory_click, array('id': 'pvp'.@id.'inventory'), array('slottype': 'ARMOR'), @event, assign(@id, @id),
      @pvp = import('pvp'.@id)
      if(!array_index_exists(@pvp['players'], player()), die())
      
      if(@event['slot'] == 103, cancel())
    )
  }

  if(array_index_exists(@arena, 'modpickup') || @arena['mode'] == 'ctf') {
    bind(item_pickup, array('id': 'pvp'.@id.'pickup'), null, @event, assign(@arena, @arena), assign(@id, @id), 

      if(@event['item']['type'] == '10') {
        @pvp = import('pvp'.@id)
        if(@pvp['players'][player()]['team'] == 0) {
          if(_horizontal_distance(ploc(), @arena['flag'][0]) > 2) { 
            if(@pvp['team'][0]['flagrespawn']) {
              clear_task(@pvp['team'][0]['flagrespawn'])
              @pvp['team'][0]['flagrespawn'] = null
            }
            modify_event('item', null)
            _flag_respawn(0)
            _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][0]['color']).player().' returned the flag.')
            play_sound(ploc(), array('sound': 'ENDERDRAGON_WINGS', 'pitch': 0))
          } else {
            cancel()
            if(pinv(player(), 103) != null && pinv(player(), 103)['type'] == 8) {
              play_sound(@arena['flag'][0], array('sound': 'ZOMBIE_METAL'))
              @pvp['team'][0]['score']++
              set_pinv(player(), array(103: null))
              _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][0]['color']).player().' captured the flag! '.color('dark_gray').'[ '.color(@arena['team'][0]['color']).@pvp['team'][0]['score'].color('dark_gray').' | '.color(@arena['team'][1]['color']).@pvp['team'][1]['score'].color('dark_gray').' ]')
              foreach(array_keys(@pvp['players']), @player,
                if(@pvp['players'][@player]['team'] == 0) {
                  set_plevel(@player, @pvp['team'][0]['score'])
                }
              )
              if(array_index_exists(@arena, 'scoretorch')) {
                set_block_at(@arena['scoretorch'][0], '76:5')
                set_timeout(1000, closure(
                  set_block_at(@arena['scoretorch'][0], '50:5')
                ))
              }
              export('pvp'.@id, @pvp)
              _flag_respawn(1)
              _check_goals()
            }
          }
        } else {
          if(@pvp['team'][0]['flagrespawn']) {
            clear_task(@pvp['team'][0]['flagrespawn'])
            @pvp['team'][0]['flagrespawn'] = null
          }
          modify_event('item', null)
          set_pinv(player(), array(103: array('type': 10, 'qty': 1)))
          _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][1]['color']).player().' picked up the flag.')
          play_sound(ploc(), array('sound': 'ENDERDRAGON_WINGS'))
        }
      } else if(@event['item']['type'] == '8') {
        @pvp = import('pvp'.@id)
        if(@pvp['players'][player()]['team'] == 1) {
          if(_horizontal_distance(ploc(), @arena['flag'][1]) > 3) {
            if(@pvp['team'][1]['flagrespawn']) {
              clear_task(@pvp['team'][1]['flagrespawn'])
              @pvp['team'][1]['flagrespawn'] = null
            }
            modify_event('item', null)
            _flag_respawn(1)
            _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][1]['color']).player().' returned the flag.')
            play_sound(ploc(), array('sound': 'ENDERDRAGON_WINGS', 'pitch': 0))
          } else {
            cancel()
            if(pinv(player(), 103) != null && pinv(player(), 103)['type'] == 10) {
              set_pinv(player(), array(103: null))
              play_sound(@arena['flag'][1], array('sound': 'ZOMBIE_METAL'))
              @pvp['team'][1]['score']++
              _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][1]['color']).player().' captured the flag! '.color('dark_gray').'[ '.color(@arena['team'][0]['color']).@pvp['team'][0]['score'].color('dark_gray').' | '.color(@arena['team'][1]['color']).@pvp['team'][1]['score'].color('dark_gray').' ]')
              foreach(array_keys(@pvp['players']), @player,
                if(@pvp['players'][@player]['team'] == 1) {
                  set_plevel(@player, @pvp['team'][1]['score'])
                }
              )
              if(array_index_exists(@arena, 'scoretorch')) {
                set_block_at(@arena['scoretorch'][1], '76:5')
                set_timeout(1000, closure(
                  set_block_at(@arena['scoretorch'][1], '50:5')
                ))
              }
              export('pvp'.@id, @pvp)
              _flag_respawn(0)
              _check_goals()
            }
          }
        } else {
          if(@pvp['team'][1]['flagrespawn']) {
            clear_task(@pvp['team'][1]['flagrespawn'])
            @pvp['team'][1]['flagrespawn'] = null
          }
          modify_event('item', null)
          set_pinv(player(), array(103: array('type': 8, 'qty': 1)))
          _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][0]['color']).player().' picked up the flag.')
          play_sound(ploc(), array('sound': 'ENDERDRAGON_WINGS'))
        }

      } else if(array_index_exists(@arena, 'modpickup') && max_stack_size(@event['item']) == 1) {
        @pvp = import('pvp'.@id)
        if(!array_index_exists(@pvp['players'], player()), die())
        foreach(pinv(), @slot, @item,
          if(@item != null && @event['item']['type'] == @item['type'] && @event['item']['type'] != '373' && @event['item']['enchants'] == @item['enchants']) {
            if(@item['data'] > @event['item']['data']) {
              set_inventory_item(pinfo()[13], @slot, @event['item'])
            }
            modify_event('item', null)
            break()
          }
        )
      }

    )
  }

  if(array_contains(array('ctf', 'tdm'), @arena['mode'])) {
    bind(player_tagged, array('id': 'pvp'.@id.'tagged'), null, @event, assign(@arena, @arena), assign(@id, @id), 
      @pvp = import('pvp'.@id)
      if(!array_index_exists(@pvp['players'], @event['tagged']), die())
      modify_event('tag', color(@arena['team'][@pvp['players'][@event['tagged']]['team']]['color']).@event['tagged'])
    )
    foreach(array_keys(@pvp['players']), @player,
      tag_refresh(@player)
    )
  }


  assign(@pvp['interval'], set_interval(1000, closure(
    @pvp = import('pvp'.@id)
    @check = false

    foreach(array_keys(@pvp['players']), @player,
      if(!array_contains(sk_current_regions(@player), @arena['region'])
      && ploc(@player)[1] > 0) {
        if(array_contains(array('ctf', 'tdm'), @arena['mode'])) {
          _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(@arena['team'][@pvp['players'][@player]['team']]['color']).@player.color('r').' left the arena.')
        } else {
          _regionmsg(@arena['broadcast'], color('gray').'[PVP] '.color(r).@player.' left the arena.')
        }
        if(@arena['mode'] == 'ctf' && pinv(player(), 103) != null && (pinv(player(), 103)['type'] == 8 || pinv(player(), 103)['type'] == 10)) {
          @flag = drop_item(@arena['flag'][if(pinv(player(), 103)['type'] == 10, 0, 1)], array('type': pinv(player(), 103)['type']))
          set_entity_velocity(@flag, array())
        }
        array_remove(@pvp['players'], @player)
        @check = true
        _remove_peffects(@player)
        if(array_contains(sk_current_regions(@player), @arena['broadcast'])) {
          set_ploc(@player, @arena['lobby'])
        }
        if(pworld(@player) == 'custom') {
          _clear_pinv(@player)
        }
      }
    )
    if(array_index_exists(@arena, 'itemspawn')) {
      for(@i = 0, @i < array_size(@arena['itemspawn']), @i++,
        if((@pvp['itemspawn'][@i] + (@arena['itemspawn'][@i]['cooldown'] * 1000)) < time()) {
          @item = drop_item(@arena['itemspawn'][@i]['loc'], array('type': @arena['itemspawn'][@i]['item']['type'], 'data': @arena['itemspawn'][@i]['item']['data'], 'qty': @arena['itemspawn'][@i]['item']['qty']))
          set_entity_velocity(@item, array())
          @pvp['itemspawn'][@i] = time()
        }
      )
    }
    if(array_index_exists(@arena, 'chestspawn')) {
      for(@i = 0, @i < array_size(@arena['chestspawn']), @i++,
        if((@pvp['chestspawn'][@i] + (@arena['chestspawn'][@i]['cooldown'] * 1000)) < time()
        && get_block_at(@arena['chestspawn'][@i]['loc']) == '0:0') {
          set_block_at(@arena['chestspawn'][@i]['loc'], '54:0')
          for(@y = 0, @y < array_size(@arena['chestspawn'][@i]['items']), @y++,
            set_inventory_item(@arena['chestspawn'][@i]['loc'], @y, @arena['chestspawn'][@i]['items'][@y])
          )
          @pvp['chestspawn'][@i] = time()
        }
      )
    }

    export('pvp'.@id, @pvp)
    if(@check, _check_goals())
  )))

  export('pvp'.@id, @pvp)
))
)
<<<	