##########
# SPLEEF #
##########

*:/spleef [$cmd] = >>>

# configure the spleef arena
#-----------------------------
@world = 'custom'
@cfg = array(
  'region': array(
    'wrapper': 'spleef',
    'arena': 'spleef-arena',
    'floor': 'spleef-floor',
    'material': 'spleef-materials'
  ),
  'warp': array(
    'lobby': array(-482.5, 53, -646, @world),
    'material': array(-492, 53, -634, @world)
  ),
  'sign': array(
    array(-487, 56, -646, @world),
    array(-487, 55, -646, @world),
    array(-487, 56, -647, @world),
    array(-487, 55, -647, @world)
  ),
  'option': array(
    'soulsand': array(-488, 56, -656, @world),
    'platforming': array(-488, 56, -654, @world),
    'obstacles': array(-488, 56, -652, @world),
    'material': array(-488, 54, -642, @world)
  )
)
# ----------------------------

if(pworld() != @world, die('You can only run this on '.@world.'.'))

switch($cmd
, 'join',
  import(@nextspleef)
  if(@nextspleef == false, @nextspleef = array())
  if(array_index_exists(@nextspleef, player()), die(color(a).'[Spleef] '.color(r).'You are already in the next Spleef match.'))
  @nextspleef[player()] = 1
  export(@nextspleef)
  set_sign_text(@cfg['sign'][0], array_keys(@nextspleef))
  if(array_size(@nextspleef) > 4) {
    set_sign_text(@cfg['sign'][1], array_keys(@nextspleef)[cslice(4, array_size(@nextspleef) - 1)])
  }
  if(array_size(@nextspleef) > 8) {
    set_sign_text(@cfg['sign'][2], array_keys(@nextspleef)[cslice(8, array_size(@nextspleef) - 1)])
  }
  if(array_size(@nextspleef) > 12) {
    set_sign_text(@cfg['sign'][3], array_keys(@nextspleef)[cslice(12, array_size(@nextspleef) - 1)])
  }

, 'floor',
  set_ploc(@cfg['warp']['material'])
  msg('Pick a block.')
  bind(player_interact, null, array('player': player()), @event, @cfg,
    if(@event['block'] != 0 && array_contains(sk_regions_at(@event['location']), @cfg['region']['material'])) {
      @blocktype = get_block_at(@event['location'])
      set_block_at(@cfg['option']['material'], @blocktype)
      msg(color(a).'[Spleef] '.color(r).'You have selected '.color(6).data_name(@blocktype).'.')
      cancel()
      unbind()
      set_ploc(@cfg['warp']['lobby'])
    }
  )

, 'start',
import(@nextspleef)
import(@currentspleef)
if(@nextspleef == false, @nextspleef = array())
if(@currentspleef == false, @currentspleef = array())

#check if there's a match currently in progress
if(@currentspleef != array(), die(color(a).'[Spleef] '.color(r).'Match currently in progress.'))

#check for queued players not in arena before starting
foreach(array_keys(@nextspleef), @player,
  if(!ponline(@player) || !array_contains(sk_current_regions(@player), @cfg['region']['wrapper'])) {
    array_remove(@nextspleef, @player)
  }
)

#check if there's enough players to start
if(array_size(@nextspleef) < 2 && player() != 'PseudoKnight', die(color(a).'[Spleef] '.color(r).'There are not enough players in this match!'))

#now that the match is a go, set the new variables
@reward = array_size(@nextspleef) - 1
@currentspleef = @nextspleef
@nextspleef = array()
@spleefsettings = array('counter': 0)
export(@reward)
export(@nextspleef)
export(@currentspleef)
export(@spleefsettings)
set_sign_text(@cfg['sign'][0], array())
set_sign_text(@cfg['sign'][1], array())
set_sign_text(@cfg['sign'][2], array())
set_sign_text(@cfg['sign'][3], array())

#setup arena during countdown
_regionmsg(@cfg['region']['wrapper'], color(a).'[Spleef] '.color(r).'Match starting in 3 seconds...')
@region = sk_region_info(@cfg['region']['floor'], @world)[0]
@mat = get_block_at(@cfg['option']['material'])

set_timeout(1000, closure(
  #difficult terrain
  if(get_block_at(@cfg['option']['soulsand']) == '124:0' && get_block_at(@cfg['option']['platforming']) ==  '123:0') {
    proc(_setfloor, @x, @y, @z, assign(@floor, @mat),
      if(rand(10) < 6) {
        set_block_at(@x, @y, @z, @floor)
      } else {
        set_block_at(@x, @y, @z, 88)
      }
    )
  #platforming
  } else if(get_block_at(@cfg['option']['platforming']) ==  '124:0' && get_block_at(@cfg['option']['soulsand']) == '123:0') {
    proc(_setfloor, @x, @y, @z, assign(@floor, @mat),
      if(rand(10) < 3) {
        set_block_at(@x, @y, @z, @floor)
      } else {
        set_block_at(@x, @y, @z, 0)
      }
    )
  #difficult terrain + platforming
  } else if(get_block_at(@cfg['option']['soulsand']) == '124:0' && get_block_at(@cfg['option']['platforming']) == '124:0') {
    proc(_setfloor, @x, @y, @z, assign(@floor, @mat),
      if(assign(@rand, rand(10)) < 2) {
        set_block_at(@x, @y, @z, @floor)
      } else if(@rand < 9) {
        set_block_at(@x, @y, @z, 0)
      } else {
        set_block_at(@x, @y, @z, 88)
      }
    )
  #regular floor
  } else {
    proc(_setfloor, @x, @y, @z, assign(@floor, @mat),
      if(get_block_at(@x, @y, @z) != @floor) {
        set_block_at(@x, @y, @z, @floor)
      }
    )
  }
  _iterate_cuboid(@region[0], @region[1], '_setfloor')
))

set_timeout(2000, closure(
  #random obstacles
  if(get_block_at(@cfg['option']['obstacles']) ==  '124:0') {
    proc(_setwalls, @x, @y, @z,
      if(assign(@rand, rand(100)) < 5) {
        set_block_at(array(@x, @y, @z), '98:0')
        set_block_at(array(@x, @y + 1, @z), '98:0')
      } else if(@rand < 6) {
        set_block_at(array(@x, @y, @z), '98:1')
        set_block_at(array(@x, @y + 1, @z), '98:1')
      } else if(@rand < 7) {
        set_block_at(array(@x, @y, @z), '98:2')
        set_block_at(array(@x, @y + 1, @z), '98:2')
      } else {
        if(get_block_at(@x, @y, @z) != '0:0') {
          set_block_at(array(@x, @y, @z), 0)
          set_block_at(array(@x, @y + 1, @z), 0)
        }
      }
    )
  #clear walls if random obstacles is turned off
  } else {
    proc(_setwalls, @x, @y, @z,
      if(get_block_at(@x, @y, @z) != '0:0') {
        set_block_at(array(@x, @y, @z), '0:0')
        set_block_at(array(@x, @y + 1, @z), '0:0')
      }
    )
  }
  _iterate_cuboid(array(@region[0][0], @region[0][1] + 1, @region[0][2]), array(@region[1][0], @region[1][1] + 1, @region[1][2]), '_setwalls')


  foreach(array_keys(@currentspleef), @player,
    if(pmode(@player) == 'CREATIVE', set_pmode(@player, 'SURVIVAL'))
  )
))

set_timeout(3000, closure(

#teleport players into arena and let them break blocks
foreach(array_keys(@currentspleef), @player,
  if(!ponline(@player) || !array_contains(sk_current_regions(@player), @cfg['region']['wrapper'])) {
    array_remove(@currentspleef, @player)
    continue()
  }
  @location = array(@region[0][0] - rand(sqrt((@region[0][0] - @region[1][0]) ** 2)), @region[0][1], @region[0][2] - rand(sqrt((@region[0][2] - @region[1][2]) ** 2)))
  #check if they're spawning into a block
  if(get_block_at(array(@location[0], @location[1] + 1, @location[2])) != '0:0') {
    set_block_at(@location[0], @location[1] + 1, @location[2], 0)
    set_block_at(@location[0], @location[1] + 2, @location[2], 0)
  }
  #check if they're spawning over air
  if(get_block_at(@location[0], @location[1], @location[2]) == '0:0') {
    set_block_at(@location[0], @location[1], @location[2], @mat)
  }
  set_ploc(@player, array(@location[0] + 0.5, @location[1], @location[2] + 0.5, @world))
  set_pinv(@player, array(0: array('type': 278, 'qty': 1, 'enchants': array(array('etype': 'DIG_SPEED', 'elevel': 40)), 'meta': array('display': color('green').'SUPERPICK'))))
)

#check match players every second
@spleefinterval = set_interval(1000, closure(
  import(@spleefsettings)
  import(@currentspleef)
  import(@reward)
  if(@spleefsettings['counter'] == 60) {
    proc(_removeedge, @x, @y, @z,
      if(get_block_at(@x, @y, @z) != '0:0') {
        set_block_at(@x, @y, @z, '0:0')
      }
    )
    _iterate_cuboid(array(@region[0][0], @region[0][1], @region[0][2]), array(@region[0][0], @region[0][1], @region[1][2]), '_removeedge')
    _iterate_cuboid(array(@region[0][0], @region[0][1], @region[0][2]), array(@region[1][0], @region[0][1], @region[0][2]), '_removeedge')
    _iterate_cuboid(array(@region[0][0], @region[0][1], @region[1][2]), array(@region[1][0], @region[0][1], @region[1][2]), '_removeedge')
    _iterate_cuboid(array(@region[1][0], @region[0][1], @region[0][2]), array(@region[1][0], @region[0][1], @region[1][2]), '_removeedge')
  }
  @spleefsettings['counter'] = @spleefsettings['counter'] + 1
  #detect winner and end match
  if(array_size(@currentspleef) <= 1 && (!array_index_exists(@currentspleef, 'PseudoKnight') || pinfo('PseudoKnight', 11) == true)) {
    @winner = array_implode(array_keys(@currentspleef))
    if(@winner != '') {
      _regionmsg(@cfg['region']['wrapper'], color(a).'[Spleef] '._colorname(@winner).@winner.color(r).' is the winner!')
      set_ploc(@winner, @cfg['warp']['lobby'])
      _clear_pinv(@winner)
      acc_add(@winner, @reward)
      tmsg(@winner, color(a).'[Spleef] '.color(r).@reward.' coins!')
    } else {
      _regionmsg(@cfg['region']['wrapper'], color(a).'[Spleef] '.color(r).'No one wins.')
    }
    unbind('spleef_quit')
    unbind('spleef_break')
    @currentspleef = array()
    export(@currentspleef)
    clear_task()
  }
  #detect people that aren't actually in the match
  foreach(array_keys(@currentspleef), @player,
    if(!ponline(@player) || pworld(@player) != @world || !array_contains(sk_current_regions(@player), @cfg['region']['arena'])) {
      array_remove(@currentspleef, @player)
      export(@currentspleef)
      _regionmsg(@cfg['region']['wrapper'], color(a).'[Spleef] '._colorname(@player).@player.color(r).' was knocked out.')
      if(ponline(@player) && pworld() == @world) {
        set_ploc(@player, @cfg['warp']['lobby'])
        _clear_pinv(@player)
      }
    }
  )
  #detect people who shouldn't be in the arena
  foreach(all_players(), @player,
    if(array_index_exists(@currentspleef, @player), continue())
    if(pworld(@player) == @world && array_contains(sk_current_regions(@player), @cfg['region']['arena'])) {
      set_ploc(@player, @cfg['warp']['lobby'])
      msg(color(a).'[Spleef] '.color(r).'Please do not interfere with a spleef match in progress.')
    }
  )
  export(@spleefsettings)
))

bind(player_quit, array('id': 'spleef_quit'), array('player': player()), @event, @spleefinterval, @cfg,
  import(@currentspleef)
  unbind()
  unbind('spleef_break')
  clear_task(@spleefinterval)
  _regionmsg(@cfg['region']['wrapper'], color(a).'[Spleef] '.color(r).' Host left the server.')
  console('Spleef host left server.')
  foreach(array_keys(@currentspleef), @player,
    set_ploc(@player, @cfg['warp']['lobby'])
  )
  @currentspleef = array()
  export(@currentspleef)
)

bind(block_break, array('id': 'spleef_break'), null, @event, @cfg,
  import(@currentspleef)
  if(array_index_exists(@currentspleef, player()) && !array_contains(sk_regions_at(@event['location']), @cfg['region']['floor'])) {
    cancel()
  }
)

))

, # else
msg(color('green').'[Spleef] Spleef is a game where you break blocks underneath other players so that they fall out of the arena. Last man standing wins.')
msg(color('green').'[Spleef] '.color(r).'/spleef join '.color('gray').'Join the next match')
msg(color('green').'[Spleef] '.color(r).'/spleef start '.color('gray').'Start the match')
msg(color('green').'[Spleef] '.color(r).'/spleef floor '.color('gray').'Select the floor block')
)
<<<