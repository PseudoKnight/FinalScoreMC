/*
	Send a formatted server message to player from given name.
	Usage Example: runalias /sayas Server @p Welcome to the server.
*/
/sayas $from $to $ = >>>
	_execute_on($to, closure(@uuid) {
		tmsg(@uuid, colorize('&7'.$from.': &r'.$));
	});
<<<

/*
	Spawns a temporary minecart that gets removed when the player exits or quits
	Usage Example: runalias /tempcart @p
*/
/tempcart $target [$timer] [$offset] = >>>
	@loc = get_command_block();
	if(!@loc) {
		die();
	}
	@loc = array(@loc[0] + 0.5, @loc[1] + 2, @loc[2] + 0.5, @loc[3]);
	@target = $target;
	if(@target[0] == '@') {
		@player = _get_nearby_player(@loc, 3);
		if(!@player) {
			die();
		}
		@uuid = puuid(@player);
		@cart = spawn_entity('minecart', 1, @loc)[0];
		set_entity_rider(@cart, @uuid)
		if(has_bind(@player.'vehicle_leave')) {
			die();
		}
		bind('vehicle_leave', array(id: @player.'vehicle_leave'), array('vehicletype': 'MINECART', 'passengertype': 'PLAYER'), @e, @player) {
			if(@e['player'] == @player) {
				unbind()
				unbind(@player.'quit')
				try {
					entity_remove(@e['vehicle']);
				} catch(BadEntityException @ex) {
					// already removed or unloaded
				}
			}
		}
		bind('player_quit', array(id: @player.'quit'), array('player': @player), @e, @cart) {
			unbind()
			unbind(@player.'vehicle_leave')
			try {
				entity_remove(@cart);
			} catch(BadEntityException @ex) {
				// already removed or unloaded
			}
		}
	} else {
		@cart = spawn_entity('minecart', 1, @loc)[0];
		@stand = spawn_entity('armor_stand', 1, @loc)[0];
		set_entity_rider(@cart, @stand);
		set_entity_spec(@stand, associative_array('visible': false));
		set_entity_spec(@cart, associative_array('block': @target, 'offset': if($offset, integer($offset), 0)));
		if($timer) {
			set_timeout(integer($timer), closure(){
				try {
					entity_remove(@stand);
					entity_remove(@cart);
				} catch(BadEntityException @ex) {
					// already removed
				}
			});
		}
	}
<<<

/*
	Sets the players respawn location. Similar to the now /spawnpoint command.
	Usage Example: runalias /bedspawn @p ~-1 ~ ~1
*/
/bedspawn $target [$x] [$y] [$z] = >>>
	_execute_on($target, closure(@uuid) {
		if($x === '') {
			set_pbed_location(@uuid, ploc(@uuid))
		} else {
			set_pbed_location(@uuid, _relative_coords(@cmdblk, $x, $y, $z))
		}
	});
<<<

/effect $target $effect [$strength=0] [$length=30] = >>>
	_execute_on($target, closure(@uuid) {
		set_peffect(@uuid, $effect, $strength, $length);
	});
<<<

/velocity $target $x $y $z [$double] = >>>
	@applicationtime = $double;
	@closure = closure(@uuid) {
		@loc = ploc(@uuid);
		set_pvelocity(@uuid, $x, $y, $z);
		play_sound(@loc, array('sound': 'ENTITY_GHAST_SHOOT', 'volume': 2));
		make_effect(@loc, 'MOBSPAWNER_FLAMES');
		
		@reapply = array(if(@applicationtime, integer(@applicationtime / 50), 0));
		set_interval(50, closure(){
			try {
				make_effect(ploc(@uuid), 'MOBSPAWNER_FLAMES');
				if(@reapply[0]-- > 0) {
					set_pvelocity(@uuid, $x, $y, $z);
				} else {
					clear_task();
				}
			} catch(PlayerOfflineException @ex) {
				clear_task();
			}
		});
	}
	
	if(!_execute_on($target, @closure)) {
		# entity is not a player
		@loc = get_command_block();
		@entities = entities_in_radius(@loc, 3, $target);
		@entity = '';
		if(array_size(@entities) > 1) {
			@closest = 3;
			foreach(@e in @entities) {
				@dist = distance(entity_loc(@e), @loc);
				if(@dist < @closest) {
					@closest = @dist;
					@entity = @e;
				}
			}
		} else if(array_size(@entities) == 1) {
			@entity = @entities[0];
		} else {
			die();
		}
		
		execute(@entity, @closure);
	}
<<<

*:/playsound [$sound='random'] [$pitch=1] [$volume=1] [$x] [$y] [$z] = >>>
	if(string_position($sound, '.') >= 0) {
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_named_sound(@loc, array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		} else if(has_permission('group.builder') || pworld() === 'dev') {
			play_named_sound(ploc(), array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		}
	} else {
		if($sound === 'random') {
			@sounds = get_value('sounds');
			if(is_null(@sounds)) {
				@sounds = reflect_pull('enum', 'Sound')
				store_value('sounds', @sounds);
			}
			@sound = @sounds[rand(array_size(@sounds))]
			@range = rand();
			@pitch = 2 - (1.5 * @range)
		} else {
			@sound = $sound
			@pitch = $pitch
		}
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_sound(@loc, array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
		} else if(has_permission('group.builder') || pworld() === 'dev') {
			play_sound(ploc(), array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
			msg(@sound.' @ '.@pitch)
		}
	}
<<<

/setblock $x $y $z $id [$data='0'] [$mode='replace'] [$replaceid=''] [$replacedata='0'] = >>>
	if(!(@cmdblk = get_command_block())) {
		die();
	}
	@id = $id;
	@data = $data;
	if(is_numeric(@id)) {
		@type = to_lower(data_name(@id.':'.@data));
	} else {
		@id = data_values(@id);
		@type = to_lower(data_name(split(':', @id)[0].':'.@data));
	}
	
	if($mode == 'replace' || $mode == 'keep' || $mode == 'destroy') {
		@cmd = '/minecraft:setblock '.$x.' '.$y.' '.$z.' '.@type.if($mode != 'replace', ' '.$mode);
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	} else if($mode == 'timed') {
		@arg1 = $replaceid;
		@arg2 = '';
		if($replacedata != '0') {
			@arg1 = $replacedata;
			@arg2 = $replaceid;
			if(!is_numeric(@arg2)) {
				@arg2 = data_values(@arg2);
			}
			@arg2 = to_lower(data_name(@arg2));
		}
		@cmd = '/setblock '.$x.' '.$y.' '.$z.' '.@type.' timed '.@arg1.' '.@arg2;
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	} else if($mode == 'toggle') {
		@replaceblock = to_lower(data_name($replaceid.':'.$replacedata));
		@cmd = '/setblock '.$x.' '.$y.' '.$z.' '.@type.' toggle '.@replaceblock;
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	} else if($mode == 'fall') {
		@cmd = '/setblock '.$x.' '.$y.' '.$z.' '.@type.' fall';
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	}
<<<

/fill $x1 $y1 $z1 $x2 $y2 $z2 $id [$data=0] [$mode='keep'] [$replaceid=''] [$replacedata='0'] = >>>
	if(!(@cmdblk = get_command_block()) {
		die();
	}
	@id = $id;
	@data = $data;
	if(is_numeric(@id)) {
		@type = to_lower(data_name(@id.':'.@data));
	} else {
		@id = data_values(@id);
		@type = to_lower(data_name(split(':', @id)[0].':'.@data));
	}
	
	if($mode == 'replace' || $mode == 'keep' || $mode == 'destroy') {
		if($replaceid != '') {
			@replaceblock = to_lower(data_name($replaceid.':'.$replacedata));
		}
		@cmd = '/minecraft:fill '.$x1.' '.$y1.' '.$z1.' '.$x2.' '.$y2.' '.$z2.' '.@type
				.if($mode == 'replace', if($replaceid != '', ' '.$mode.' '.@replaceblock, ''), ' '.$mode);
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	} else if($mode == 'timed') {
		@arg1 = $replaceid;
		@arg2 = '';
		if($replacedata != '0') {
			@arg1 = $replacedata;
			@arg2 = $replaceid;
			if(!is_numeric(@arg2)) {
				@arg2 = data_values(@arg2);
			}
			@arg2 = to_lower(data_name(@arg2));
		}
		@cmd = '/fill '.$x1.' '.$y1.' '.$z1.' '.$x2.' '.$y2.' '.$z2.' '.@type.' timed '.@arg1.' '.@arg2;
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	} else if($mode == 'toggle') {
		@replaceblock = to_lower(data_name($replaceid.':'.$replacedata));
		@cmd = '/fill '.$x1.' '.$y1.' '.$z1.' '.$x2.' '.$y2.' '.$z2.' '.@type.' toggle '.@replaceblock;
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	} else if($mode == 'fall') {
		@cmd = '/fill '.$x1.' '.$y1.' '.$z1.' '.$x2.' '.$y2.' '.$z2.' '.@type.' fall';
		set_block_command(@cmdblk, @cmd);
		run(@cmd);
	}
<<<

/tp $player $x $y $z = >>>
	if(!_execute_on($player, closure(@uuid) {
		@loc = _relative_coords(ploc(@uuid), $x, $y, $z);
		set_ploc(@uuid, @loc);
	})) {
		run('/tp '.$player.' '.$x.' '.$y.' '.$z);
	}
<<<

/summon $entity $x $y $z = >>>
	@loc = _relative_coords(@cmdBlock, $x, $y, $z);
	@loc['x'] += 0.5;
	@loc['z'] += 0.5;
	_spawn_entity($entity, @loc);
<<<
