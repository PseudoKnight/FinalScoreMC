/*
	Send a formatted server message to player from given name.
	Usage Example: runalias /sayas Server @p Welcome to the server.
*/
/sayas $from $to $ = >>>
	if(is_array(@loc = get_command_block()) && @loc['world'] == pworld($to)) {
		tmsg($to, colorize('&7'.$from.': &r'.$));
	}
<<<

/*
	Spawns a temporary minecart that gets removed when the player exits or quits
	Usage Example: runalias /tempcart @p
*/
/tempcart $player [$timer] [$offset] = >>>
	if(is_null(@loc = get_command_block()), die())
	@loc = array(@loc[0] + 0.5, @loc[1] + 2, @loc[2] + 0.5, @loc[3])
	if(ponline($player)) {
		if(@loc[3] != pworld($player)) {
			die('This commandblock cannot set a player into a tempcart across worlds.');
		}
		@rider = puuid($player)
		@cart = spawn_entity('minecart', 1, @loc)[0]
		set_entity_max_speed(@cart, 0.49); // 0.4 default, 0.5 doesn't glitch but can rarely derail, 0.53 glitches
		set_entity_rider(@cart, @rider)
		if(has_bind($player.'vehicle_leave')) {
			die();
		}
		bind(vehicle_leave, array(id: $player.'vehicle_leave'), array('vehicletype': 'MINECART', 'passengertype': 'PLAYER'), @e, @player = $player) {
			if(@e['player'] == @player) {
				unbind()
				unbind(@player.'quit')
				try {
					entity_remove(@e['vehicle']);
				} catch(BadEntityException @ex) {
					// already removed or unloaded
				}
			}
		}
		bind(player_quit, array(id: $player.'quit'), array('player': $player), @e, @cart) {
			unbind()
			unbind(player().'vehicle_leave')
			try {
				entity_remove(@cart);
			} catch(BadEntityException @ex) {
				// already removed or unloaded
			}
		}
	} else {
		@material = $player;
		@cart = spawn_entity('minecart', 1, @loc)[0];
		@stand = spawn_entity('armor_stand', 1, @loc)[0];
		set_entity_rider(@cart, @stand);
		set_entity_spec(@stand, associative_array('visible': false));
		set_entity_spec(@cart, associative_array('block': @material, 'offset': if($offset, integer($offset), 0)));
		set_entity_max_speed(@cart, 0.5);
		if($timer) {
			set_timeout(integer($timer), closure(){
				try {
					entity_remove(@stand);
					entity_remove(@cart);
				} catch(BadEntityException @ex) {
					// already removed
				}
			});
		}
	}
<<<

/*
	Sets the players respawn location. Similar to the now /spawnpoint command.
	Usage Example: runalias /bedspawn @p ~-1 ~ ~1
*/
/bedspawn $player [$x] [$y] [$z] = >>>
	@cmdblk = get_command_block();
	if(@cmdblk['world'] != pworld($player)) {
		die('This commandblock cannot set spawn for players in another world.');
	}
	if($x === '') {
		set_pbed_location($player, ploc($player))
	} else {
		set_pbed_location($player, _relative_coords(@cmdblk, $x, $y, $z))
	}
<<<

*:/give [$player=''] [$item=0] [$amount=1] = >>>
	if(is_null(@loc = get_command_block()) && !has_permission('group.moderator')) {
		die('You do not have permission to use this command.');
	}
	if($player === '') {
		die('Usage: /give [player] [id:data] [quantity]');
	}
	@player = _find_player($player);
	if(@loc && @loc['world'] != pworld(@player)) {
		die('This commandblock cannot give to players in another world.');
	}
	if($item == 0) {
		die('You need to specify an item id or name.');
	}
	@item = split(':', $item)
	if(!is_numeric(@item[0])) {
		@item[0] = data_values(@item[0]);
	}
	if(is_null(@item[0])) {
		die('Unknown item name');
	}
	if(!array_index_exists(@item, 1)) {
		@item[1] = 0;
	}
	pgive_item(@player, @item[0].':'.@item[1], $amount);
	msg(color('yellow').'You gave '.@player.' '.$amount.' '.data_name(@item[0].':'.@item[1]).'.');
<<<

*:/effect $player $effect [$strength=0] [$length=30] = >>>
	if((@loc = get_command_block()) || has_permission('command.effect')) {
		try {
			@player = player($player);
		} catch(PlayerOfflineException @e) {
			die('Who is that? Are they online?');
		}
		if(@loc && @loc['world'] != pworld(@player)) {
			die('This commandblock cannot apply an effect to players in another world.');
		}
		@effects = _get_effects();
		if(!array_index_exists(@effects, $effect)) {
			if($effect == 'milk') {
				_clear_peffects(@player);
			} else {
				die('These are the available effect names: milk '.array_implode(array_keys(@effects), ' '));
			}
		} else {
			set_peffect(@player, @effects[$effect], $strength, $length);
		}
	}
<<<

*:/velocity $entity $x $y $z [$double] = >>>
	@loc = get_command_block();
	if(is_null(@loc) && !has_permission('group.builder')) {
		die(color('gold').'You cannot run this command.');
	}
	@applicationtime = $double;
	if(ponline($entity)) {
		@player = $entity;
		if(@loc && @loc['world'] != pworld(@player)) {
			die('This commandblock cannot apply a velocity to players in another world.');
		}
		@loc = ploc(@player);
		if(_is_survival_world(@loc['world'])) {
			die(color('gold').'You cannot set a velocity on players in survival worlds.');
		}
		
		set_pvelocity(@player, $x, $y, $z);
		play_sound(@loc, array('sound': 'GHAST_FIREBALL', 'volume': 2));
		make_effect(@loc, 'MOBSPAWNER_FLAMES');
		
		@reapply = array(if(@applicationtime, integer(@applicationtime / 50), 0));
		set_interval(50, closure(){
			make_effect(ploc(@player), 'MOBSPAWNER_FLAMES');
			if(@reapply[0]-- > 0) {
				set_pvelocity(@player, $x, $y, $z);
			} else {
				clear_task();
			}
		});

	} else {
		# entity is not a player

		@entities = entities_in_radius(@loc, 3, $entity);
		@entity = '';
		if(array_size(@entities) > 1) {
			@closest = 3;
			foreach(@e in @entities) {
				@dist = _distance(entity_loc(@e), @loc);
				if(@dist < @closest) {
					@closest = @dist;
					@entity = @e;
				}
			}
		} else if(array_size(@entities) == 1) {
			@entity = @entities[0];
		} else {
			die();
		}
		
		@loc = entity_loc(@entity);
		make_effect(@loc, 'MOBSPAWNER_FLAMES');
		play_sound(@loc, array('sound': 'GHAST_FIREBALL', 'volume': 2));
		set_entity_velocity(@entity, array($x, $y, $z));
		
		@reapply = array(if(@applicationtime, integer(@applicationtime / 50), 0));
		set_interval(50, closure(){
			make_effect(entity_loc(@entity), 'MOBSPAWNER_FLAMES');
			if(@reapply[0]-- > 0) {
				set_entity_velocity(@entity, array($x, $y, $z));
			} else {
				clear_task();
			}
		});
	}
<<<

*:/playsound [$sound='random'] [$pitch=1] [$volume=1] [$x] [$y] [$z] = >>>
	if(string_position($sound, '.') >= 0) {
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_named_sound(@loc, array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		} else if(has_permission('group.builder') || pworld() === 'dev') {
			play_named_sound(ploc(), array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		}
	} else {
		if($sound === 'random') {
			@sounds = get_value('sounds');
			if(is_null(@sounds)) {
				@sounds = reflect_pull('enum', 'Sound')
				store_value('sounds', @sounds);
			}
			@sound = @sounds[rand(array_size(@sounds))]
			@range = rand();
			@pitch = 2 - (1.5 * @range)
		} else {
			@sound = $sound
			@pitch = $pitch
		}
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_sound(@loc, array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
		} else if(has_permission('group.builder') || pworld() === 'dev') {
			play_sound(ploc(), array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
			msg(@sound.' @ '.@pitch)
		}
	}
<<<

/setblock $x $y $z $id [$data='0'] [$mode='replace'] [$replaceid=''] [$replacedata='0'] = >>>
	if(@cmdblk = get_command_block()) {
		@loc = _relative_coords(@cmdblk, $x, $y, $z)

		if(!is_numeric(@id = $id) && is_null(@id = data_values($id))) {
			die();
		}

		@id = split(':', @id)[0]

		switch($mode) {
		case 'replace':
			if($replaceid) {
				if(get_block_at(@loc) == $replaceid.':'.$replacedata) {
					set_block_at(@loc, @id.':'.$data, false);
				}
			} else {
				set_block_at(@loc, @id.':'.$data, false);
			}
		case 'keep':
			if(get_block_at(@loc)[0] === '0') {
				set_block_at(@loc, @id.':'.$data, false)
			}
		case 'destroy':
			if(get_block_at(@loc, @cmdblk[3])[0] !== '0') {
				make_effect(@loc, 'STEP_SOUND:'.@id)
			}
			set_block_at(@loc, @id.':'.$data, true)
		case 'fall':
			@block = get_block_at(@loc)
			if(@block[0] !== '0') {
				set_block_at(@loc, '0:0')
				spawn_falling_block(@loc, @block)
			}
		case 'timed':
			@ms = integer($replaceid);
			@block = get_block_at(@loc);
			set_block_at(@loc, @id.':'.$data, false);
			set_timeout(@ms, closure(){
				set_block_at(@loc, @block);
			});
		case 'toggle':
			@block = get_block_at(@loc)
			if(@block == $replaceid.':'.$replacedata) {
				set_block_at(@loc, @id.':'.$data, false)
			} else if(@block == @id.':'.$data) {
				set_block_at(@loc, $replaceid.':'.$replacedata, false)
			}
		}
	}
<<<

/fill $x1 $y1 $z1 $x2 $y2 $z2 $id [$data=0] [$mode='keep'] [$replaceid=''] [$replacedata='0'] = >>>
	if(@cmdblk = get_command_block()) {
		@loc1 = _relative_coords(@cmdblk, $x1, $y1, $z1)
		@loc2 = _relative_coords(@cmdblk, $x2, $y2, $z2)

		if(!is_numeric(@id = $id)
		&& is_null(@id = data_values($id))) {
			die()
		}
		@id = split(':', @id)[0]

		if($replaceid !== '') {
			if(!is_numeric(@replaceid = $replaceid)
			&& is_null(@replaceid = data_values($replaceid))) {
				die()
			}
			@replaceid = split(':', @replaceid)[0]
		}

		switch($mode) {
		case 'replace':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if($replaceid === '' || get_block_at(@x, @y, @z, @cmdblk['world']) == @replaceid.':'.$replacedata) {
							set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], false)
						}
					}
				}
			}

		case 'toggle':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						@block = get_block_at(@x, @y, @z, @cmdblk['world'])
						if(@block == @replaceid.':'.$replacedata) {
							set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], false)
						} else if(@block == @id.':'.$data) {
							set_block_at(@x, @y, @z, @replaceid.':'.$replacedata, @cmdblk['world'], false)
						}
					}
				}
			}

		case 'keep':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if(get_block_at(@x, @y, @z, @cmdblk['world'])[0] === '0') {
							set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], false)
						}
					}
				}
			}

		case 'destroy':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if(get_block_at(@x, @y, @z, @cmdblk['world'])[0] !== '0') {
							make_effect(array(@x, @y, @z, @cmdblk['world']), 'STEP_SOUND:'.@id)
						}
						set_block_at(@x, @y, @z, @id.':'.$data, @cmdblk['world'], true)
					}
				}
			}

		case 'fall':
			for(@x = min(@loc1['x'], @loc2['x']) + 0.5, @x <= max(@loc1['x'], @loc2['x']) + 0.5, @x += 1.0) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']) + 0.5, @z <= max(@loc1['z'], @loc2['z']) + 0.5, @z += 1.0) {
						@block = get_block_at(@x, @y, @z, @cmdblk['world'])
						if(@block[0] !== '0') {
							set_block_at(@x, @y, @z, '0:0', @cmdblk['world'], false)
							spawn_falling_block(array(@x, @y, @z, @cmdblk['world']), @block)
						}
					}
				}
			}

		case 'hollow':
		case 'outline':
			console('Hollow and outline modes for /fill are not yet supported.', false);
		}
	}
<<<

/tp $player $x $y $z = >>>
	if((@cmdblk = get_command_block()) && ponline($player)) {
		if(@cmdblk['world'] != pworld($player)) {
			die('This commandblock cannot teleport players in other worlds.');
		}
		@loc = _relative_coords(ploc($player), $x, $y, $z);
		set_ploc($player, @loc);
	} else {
		run('/tp' $player $x $y $z);
	}
<<<

/summon $entity $x $y $z = >>>
	if(!@cmdBlock = get_command_block()) {
		die('This is for commandblocks only.');
	}
	@loc = _relative_coords(@cmdBlock, $x, $y, $z);
	@loc['x'] += 0.5;
	@loc['z'] += 0.5;
	_spawn_mob($entity, @loc);
<<<
