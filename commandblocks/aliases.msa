/*
	Send a formatted server message to player from given name.
	Usage Example: runalias /sayas Server @p Welcome to the server.
*/
/sayas $from $to $ = >>>
	@loc = get_command_block();
	@args = parse_args($);
	foreach(@index: @arg in @args) {
		if(string_position(@arg, '@p') == 0) {
			@args[@index] = _get_nearby_player(@loc, 64);
		}
	}
	@msg = array_implode(@args);
	_execute_on($to, closure(@player) {
		tmsg(@player, colorize('&7'.$from.': &r'.@msg));
	});
<<<

/kill $selector = >>>
	_execute_on($selector, closure(@player) {
		damage_entity(puuid(@player), 40);
	});
<<<

/*
	Spawns a temporary minecart that gets removed when the player exits or quits
	Usage Example: runalias /tempcart @p
*/
/tempcart $target [$timer] [$offset] = >>>
	@loc = get_command_block();
	if(!@loc) {
		die();
	}
	@loc['x'] += 0.5;
	@loc['y'] += 2;
	@loc['z'] += 0.5;
	@target = $target;
	if(@target[0] == '@') {
		@player = _get_nearby_player(@loc, 3);
		if(!@player) {
			die();
		}
		@uuid = puuid(@player);
		@cart = spawn_entity('minecart', 1, @loc)[0];
		set_entity_saves_on_unload(@cart, false);
		set_entity_rider(@cart, @uuid)
		if(has_bind(@player.'vehicle_leave')) {
			die();
		}
		bind('vehicle_leave', array(id: @player.'vehicle_leave'), array('vehicletype': 'MINECART', 'passengertype': 'PLAYER'), @e, @player) {
			if(@e['player'] == @player) {
				unbind();
				unbind(@player.'quit');
				set_timeout(10, closure(){
					try {
						entity_remove(@e['vehicle']);
					} catch(BadEntityException @ex) {
						// already removed or unloaded
					}
				});
			}
		}
		bind('player_quit', array(id: @player.'quit'), array('player': @player), @e, @cart, @player) {
			unbind()
			unbind(@player.'vehicle_leave')
			try {
				entity_remove(@cart);
			} catch(BadEntityException @ex) {
				// already removed or unloaded
			}
		}
	} else {
		@cart = spawn_entity('minecart', 1, @loc)[0];
		set_entity_saves_on_unload(@cart, false);
		@stand = spawn_entity('armor_stand', 1, @loc)[0];
		set_entity_rider(@cart, @stand);
		set_entity_spec(@stand, associative_array('visible': false));
		set_entity_spec(@cart, associative_array('block': @target, 'offset': if($offset, integer($offset), 0)));
		if($timer) {
			set_timeout(integer($timer), closure(){
				try {
					entity_remove(@stand);
					entity_remove(@cart);
				} catch(BadEntityException @ex) {
					// already removed
				}
			});
		}
	}
<<<

/*
	Sets the players respawn location. Similar to the now /spawnpoint command.
	Usage Example: runalias /bedspawn @p ~-1 ~ ~1
*/
/bedspawn $target [$x] [$y] [$z] = >>>
	@cmdblk = get_command_block();
	_execute_on($target, closure(@player) {
		if($x === '') {
			set_pbed_location(@player, ploc(@player))
		} else {
			set_pbed_location(@player, _relative_coords(@cmdblk, $x, $y, $z))
		}
	});
<<<

/**
	Override for vanilla command. Uses vanilla if given "give" or "clear" arguments.
	Args: effect_or_milk [strength=0] [seconds=30] [hide_particles] [hide_icon]
 */
*:/effect $ = >>>
	@args = parse_args($);
	if(@args[0] === 'give' || @args[0] === 'clear') {
		run('/effect '.$);
	} else {
		if(!has_permission('command.effect')) {
			die();
		}
		@selector = @args[0];
		@effect = @args[1];
		@strength = 0;
		@seconds = 30;
		@hideParticles = false;
		@hideIcon = false;
		if(array_size(@args) > 2) {
			@strength = @args[2];
			if(array_size(@args) > 3) {
				@seconds = @args[3];
				if(array_size(@args) > 4) {
					for(@i = 4, @i < array_size(@args), @i++) {
						if(@args[@i] === 'hide_particles') {
							@hideParticles = true;
						} else if(@args[@i] === 'hide_icon') {
							@hideIcon = true;
						}
					}
				}
			}
		}
		_execute_on(@selector, closure(@uuid) {
			if(@effect === 'milk') {
				clear_peffects(@uuid);
			} else {
				set_peffect(@uuid, @effect, @strength, @seconds, true, !@hideParticles, !@hideIcon);
			}
		});
	}
<<<

/velocity $target $x $y $z [$double] = >>>
	@target = $target;
	@vector = array($x, $y, $z);
	@applicationtime = $double;

	@closure = closure(@uuid) {
		if(length(@uuid) <= 16) {
			@uuid = puuid(@uuid);
		}
		set_timeout(50, closure(){
			@loc = entity_loc(@uuid);
			set_entity_velocity(@uuid, @vector);
			play_sound(@loc, array('sound': 'ENTITY_GHAST_SHOOT', 'volume': 2));
			make_effect(@loc, 'MOBSPAWNER_FLAMES');

			@reapply = array(if(@applicationtime, integer(@applicationtime / 50), 0));
			set_interval(50, closure(){
				try {
					make_effect(entity_loc(@uuid), 'MOBSPAWNER_FLAMES');
					if(@reapply[0]-- > 0) {
						set_entity_velocity(@uuid, @vector);
					} else {
						clear_task();
					}
				} catch(Exception @ex) {
					clear_task();
				}
			});
		});
	}
	
	if(!_execute_on($target, @closure)) {
		# entity is not a player
		@loc = get_command_block();
		@entities = null;
		try {
			@entities = entities_in_radius(@loc, 3, @target);
		} catch(BadEntityException @ex) {
			// not an entity type
			die();
		}
		@entity = '';
		if(array_size(@entities) > 1) {
			@closest = 3;
			foreach(@e in @entities) {
				@dist = distance(entity_loc(@e), @loc);
				if(@dist < @closest) {
					@closest = @dist;
					@entity = @e;
				}
			}
		} else if(array_size(@entities) == 1) {
			@entity = @entities[0];
		} else {
			die();
		}

		execute(@entity, @closure);
	}
<<<

*:/playsound [$sound='random'] [$pitch=1] [$volume=1] [$] = >>>
	@pitch = $pitch;
	if(@pitch == 'random') {
		@pitch = 0.5 + rand() * 1.5;
	}
	@args = parse_args($);
	if(string_position($sound, '.') >= 0) {
		if(@cmdblk = get_command_block()) {
			@loc = @cmdblk;
			if(array_size(@args) >= 3) {
				@loc = _relative_coords(@cmdblk, @args[-3], @args[-2], @args[-1]);
			}
			if(@args && array_size(@args) - 3) {
				play_named_sound(@loc, array(
					sound: $sound,
					pitch: @pitch,
					volume: $volume,
					seed: @args[0],
				));
			} else {
				play_named_sound(@loc, array(
					sound: $sound,
					pitch: @pitch,
					volume: $volume
				));
			}
		} else if(has_permission('command.playsound')) {
			if(@args) {
				play_named_sound(ploc(), array(
					sound: $sound,
					pitch: @pitch,
					volume: $volume,
					seed: @args[0],
				));
			} else {
				play_named_sound(ploc(), array(
					sound: $sound,
					pitch: @pitch,
					volume: $volume
				));
			}
		}
	} else {
		@sound = $sound;
		if(@sound === 'random') {
			@sounds = reflect_pull('enum', 'Sound');
			@sound = array_get_rand(@sounds);
			@pitch = 0.5 + rand() * 1.5;
		}
		if(@cmdblk = get_command_block()) {
			@loc = @cmdblk;
			if(array_size(@args) >= 3) {
				@loc = _relative_coords(@cmdblk, @args[-3], @args[-2], @args[-1]);
			}
			if(@args && array_size(@args) - 3) {
				play_sound(@loc, array(
					sound: @sound,
					pitch: @pitch,
					volume: $volume,
					seed: @args[0],
				));
			} else {
				play_sound(@loc, array(
					sound: @sound,
					pitch: @pitch,
					volume: $volume
				));
			}
		} else if(has_permission('command.playsound')) {
			if(@args) {
				play_sound(ploc(), array(
					sound: @sound,
					pitch: @pitch,
					volume: $volume,
					seed: @args[0],
				));
			} else {
				play_sound(ploc(), array(
					sound: @sound,
					pitch: @pitch,
					volume: $volume
				));
			}
			msg(@sound.' @ '.@pitch);
		}
	}
<<<

/tp $player $x $y $z = >>>
	if(!_execute_on($player, closure(@player) {
		@loc = _relative_coords(ploc(@player), $x, $y, $z);
		set_ploc(@player, @loc);
	})) {
		run('/tp '.$player.' '.$x.' '.$y.' '.$z);
	}
<<<

/summon $entity $x $y $z = >>>
	@cmdBlock = get_command_block();
	@loc = _relative_coords(@cmdBlock, $x, $y, $z);
	@loc['x'] += 0.5;
	@loc['z'] += 0.5;
	_spawn_entity($entity, @loc);
<<<
