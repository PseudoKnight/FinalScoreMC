/*
	Send a formatted server message to player from given name.
	Usage Example: runalias /sayas Server @p Welcome to the server.
*/
/sayas $from $to $ = >>>
	_execute_on($to, closure(@uuid) {
		tmsg(@uuid, colorize('&7'.$from.': &r'.$));
	});
<<<

/*
	Spawns a temporary minecart that gets removed when the player exits or quits
	Usage Example: runalias /tempcart @p
*/
/tempcart $target [$timer] [$offset] = >>>
	@loc = get_command_block();
	if(!@loc) {
		die();
	}
	@loc = array(@loc[0] + 0.5, @loc[1] + 2, @loc[2] + 0.5, @loc[3]);
	@target = $target;
	if(@target[0] == '@') {
		@player = _get_nearby_player(@loc, 3);
		@uuid = puuid(@player);
		@cart = spawn_entity('minecart', 1, @loc)[0];
		set_entity_rider(@cart, @uuid)
		if(has_bind(@player.'vehicle_leave')) {
			die();
		}
		bind('vehicle_leave', array(id: @player.'vehicle_leave'), array('vehicletype': 'MINECART', 'passengertype': 'PLAYER'), @e, @player) {
			if(@e['player'] == @player) {
				unbind()
				unbind(@player.'quit')
				try {
					entity_remove(@e['vehicle']);
				} catch(BadEntityException @ex) {
					// already removed or unloaded
				}
			}
		}
		bind('player_quit', array(id: @player.'quit'), array('player': @player), @e, @cart) {
			unbind()
			unbind(@player.'vehicle_leave')
			try {
				entity_remove(@cart);
			} catch(BadEntityException @ex) {
				// already removed or unloaded
			}
		}
	} else {
		@cart = spawn_entity('minecart', 1, @loc)[0];
		@stand = spawn_entity('armor_stand', 1, @loc)[0];
		set_entity_rider(@cart, @stand);
		set_entity_spec(@stand, associative_array('visible': false));
		set_entity_spec(@cart, associative_array('block': @target, 'offset': if($offset, integer($offset), 0)));
		if($timer) {
			set_timeout(integer($timer), closure(){
				try {
					entity_remove(@stand);
					entity_remove(@cart);
				} catch(BadEntityException @ex) {
					// already removed
				}
			});
		}
	}
<<<

/*
	Sets the players respawn location. Similar to the now /spawnpoint command.
	Usage Example: runalias /bedspawn @p ~-1 ~ ~1
*/
/bedspawn $target [$x] [$y] [$z] = >>>
	_execute_on($target, closure(@uuid) {
		if($x === '') {
			set_pbed_location(@uuid, ploc(@uuid))
		} else {
			set_pbed_location(@uuid, _relative_coords(@cmdblk, $x, $y, $z))
		}
	});
<<<

/effect $target $effect [$strength=0] [$length=30] = >>>
	@effects = _get_effects();
	_execute_on($target, closure(@uuid) {
		if(!array_index_exists(@effects, $effect)) {
			if($effect == 'milk') {
				clear_peffects(@uuid);
			} else {
				die('These are the available effect names: milk '.array_implode(array_keys(@effects), ' '));
			}
		} else {
			set_peffect(@uuid, @effects[$effect], $strength, $length);
		}
	});
<<<

/velocity $target $x $y $z [$double] = >>>
	@applicationtime = $double;
	@closure = closure(@uuid) {
		@loc = ploc(@uuid);
		set_pvelocity(@uuid, $x, $y, $z);
		play_sound(@loc, array('sound': 'ENTITY_GHAST_SHOOT', 'volume': 2));
		make_effect(@loc, 'MOBSPAWNER_FLAMES');
		
		@reapply = array(if(@applicationtime, integer(@applicationtime / 50), 0));
		set_interval(50, closure(){
			try {
				make_effect(ploc(@uuid), 'MOBSPAWNER_FLAMES');
				if(@reapply[0]-- > 0) {
					set_pvelocity(@uuid, $x, $y, $z);
				} else {
					clear_task();
				}
			} catch(PlayerOfflineException @ex) {
				clear_task();
			}
		});
	}
	
	if(!_execute_on($target, @closure)) {
		# entity is not a player
		@loc = get_command_block();
		@entities = entities_in_radius(@loc, 3, $target);
		@entity = '';
		if(array_size(@entities) > 1) {
			@closest = 3;
			foreach(@e in @entities) {
				@dist = distance(entity_loc(@e), @loc);
				if(@dist < @closest) {
					@closest = @dist;
					@entity = @e;
				}
			}
		} else if(array_size(@entities) == 1) {
			@entity = @entities[0];
		} else {
			die();
		}
		
		execute(@entity, @closure);
	}
<<<

*:/playsound [$sound='random'] [$pitch=1] [$volume=1] [$x] [$y] [$z] = >>>
	if(string_position($sound, '.') >= 0) {
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_named_sound(@loc, array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		} else if(has_permission('group.builder') || pworld() === 'dev') {
			play_named_sound(ploc(), array('sound': $sound, 'pitch': $pitch, 'volume': $volume))
		}
	} else {
		if($sound === 'random') {
			@sounds = get_value('sounds');
			if(is_null(@sounds)) {
				@sounds = reflect_pull('enum', 'Sound')
				store_value('sounds', @sounds);
			}
			@sound = @sounds[rand(array_size(@sounds))]
			@range = rand();
			@pitch = 2 - (1.5 * @range)
		} else {
			@sound = $sound
			@pitch = $pitch
		}
		if(@cmdblk = get_command_block()) {
			if($z) {
				@loc = _relative_coords(@cmdblk, $x, $y, $z)
			} else {
				@loc = @cmdblk
			}
			play_sound(@loc, array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
		} else if(has_permission('group.builder') || pworld() === 'dev') {
			play_sound(ploc(), array('sound': @sound, 'pitch': @pitch, 'volume': $volume))
			msg(@sound.' @ '.@pitch)
		}
	}
<<<

/setblock $x $y $z $id [$data='0'] [$mode='replace'] [$replaceid=''] [$replacedata='0'] = >>>
	if(@cmdblk = get_command_block()) {
		@loc = _relative_coords(@cmdblk, $x, $y, $z);

		if(!is_numeric(@id = $id)) {
			die();
		}

		@type = data_name(@id.':'.$data);

		switch($mode) {
			case 'replace':
				if($replaceid) {
					@replace = data_name($replaceid.':'.$replacedata);
					if(get_block(@loc) == @replace) {
						set_block(@loc, @type, false);
					}
				} else {
					set_block(@loc, @type, false);
				}
			case 'keep':
				if(get_block(@loc) === 'AIR') {
					set_block(@loc, @type, false);
				}
			case 'destroy':
				if(get_block(@loc) !== 'AIR') {
					make_effect(@loc, 'STEP_SOUND:'.@type);
				}
				set_block(@loc, @type, true)
			case 'fall':
				@block = get_block(@loc)
				if(@block !== 'AIR') {
					set_block(@loc, 'AIR');
					spawn_falling_block(@loc, @block);
				}
			case 'timed':
				@ms = integer($replaceid);
				@block = @ms;
				if($replacedata != '0') {
					@ms = integer($replacedata);
				} else {
					@block = get_block(@loc);
				}
				set_block(@loc, @type, false);
				set_timeout(@ms, closure(){
					set_block(@loc, @block);
				});
			case 'toggle':
				@replace = data_name($replaceid.':'.$replacedata);
				@block = get_block(@loc);
				if(@block == @replace) {
					set_block(@loc, @type, false);
				} else if(@block == @id.':'.$data) {
					set_block(@loc, @replace, false);
				}
		}
	}
<<<

/fill $x1 $y1 $z1 $x2 $y2 $z2 $id [$data=0] [$mode='keep'] [$replaceid=''] [$replacedata='0'] = >>>
	if(@cmdblk = get_command_block()) {
		@loc1 = _relative_coords(@cmdblk, $x1, $y1, $z1)
		@loc2 = _relative_coords(@cmdblk, $x2, $y2, $z2)

		if(!is_numeric(@id = $id)) {
			die()
		}
		@type = data_name(@id.':'.$data);

		if($replaceid !== '') {
			if(!is_numeric(@replaceid = $replaceid)) {
				die()
			}
		}

		switch($mode) {
		case 'replace':
			@replace = data_name($replaceid.':'.$replacedata);
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if($replaceid === '' || get_block(array(@x, @y, @z, @cmdblk['world'])) == @replace) {
							set_block(array(@x, @y, @z, @cmdblk['world']), @type, false);
						}
					}
				}
			}

		case 'toggle':
			@replace = data_name($replaceid.':'.$replacedata);
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						@block = get_block(array(@x, @y, @z, @cmdblk['world']));
						if(@block == @replace) {
							set_block(array(@x, @y, @z, @cmdblk['world']), @type, false)
						} else if(@block == @type) {
							set_block(array(@x, @y, @z, @cmdblk['world']), @replace , false)
						}
					}
				}
			}

		case 'keep':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if(get_block(array(@x, @y, @z, @cmdblk['world'])) === 'AIR') {
							set_block(array(@x, @y, @z, @cmdblk['world']), @type, false)
						}
					}
				}
			}

		case 'destroy':
			for(@x = min(@loc1['x'], @loc2['x']), @x <= max(@loc1['x'], @loc2['x']), @x++) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']), @z <= max(@loc1['z'], @loc2['z']), @z++) {
						if(get_block(array(@x, @y, @z, @cmdblk['world'])) !== 'AIR') {
							make_effect(array(@x, @y, @z, @cmdblk['world']), 'STEP_SOUND:'.@type)
						}
						set_block(array(@x, @y, @z, @cmdblk['world']), @type, true)
					}
				}
			}

		case 'fall':
			for(@x = min(@loc1['x'], @loc2['x']) + 0.5, @x <= max(@loc1['x'], @loc2['x']) + 0.5, @x += 1.0) {
				for(@y = min(@loc1['y'], @loc2['y']), @y <= max(@loc1['y'], @loc2['y']), @y++) {
					for(@z = min(@loc1['z'], @loc2['z']) + 0.5, @z <= max(@loc1['z'], @loc2['z']) + 0.5, @z += 1.0) {
						@block = get_block(array(@x, @y, @z, @cmdblk['world']));
						if(@block !== 'AIR') {
							set_block(array(@x, @y, @z, @cmdblk['world']), 'AIR', false);
							spawn_falling_block(array(@x, @y, @z, @cmdblk['world']), @block)
						}
					}
				}
			}

		case 'hollow':
		case 'outline':
			console('Hollow and outline modes for /fill are not yet supported.', false);
		}
	}
<<<

/tp $player $x $y $z = >>>
	if(!_execute_on($player, closure(@uuid) {
		@loc = _relative_coords(ploc(@uuid), $x, $y, $z);
		set_ploc(@uuid, @loc);
	})) {
		run('/tp' $player $x $y $z);
	}
<<<

/summon $entity $x $y $z = >>>
	@loc = _relative_coords(@cmdBlock, $x, $y, $z);
	@loc['x'] += 0.5;
	@loc['z'] += 0.5;
	_spawn_entity($entity, @loc);
<<<
